
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007064  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007178  08007178  00017178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007390  08007390  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08007390  08007390  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007390  08007390  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08007398  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000090  08007424  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08007424  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e980  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022eb  00000000  00000000  0002ea35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00031d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001854c  00000000  00000000  00032c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a7e  00000000  00000000  0004b14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c62f  00000000  00000000  0005cbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e91f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004904  00000000  00000000  000e924c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	0800715c 	.word	0x0800715c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	0800715c 	.word	0x0800715c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <NRF24_DelayMicroSeconds>:
//static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <NRF24_DelayMicroSeconds+0x38>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <NRF24_DelayMicroSeconds+0x3c>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	0c9a      	lsrs	r2, r3, #18
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800112c:	bf00      	nop
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	1e5a      	subs	r2, r3, #1
 8001132:	60fa      	str	r2, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1fa      	bne.n	800112e <NRF24_DelayMicroSeconds+0x22>
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	2000001c 	.word	0x2000001c
 8001148:	165e9f81 	.word	0x165e9f81

0800114c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d008      	beq.n	800116c <NRF24_csn+0x20>
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <NRF24_csn+0x38>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <NRF24_csn+0x3c>)
 8001160:	8811      	ldrh	r1, [r2, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f002 f883 	bl	8003270 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800116a:	e007      	b.n	800117c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <NRF24_csn+0x38>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <NRF24_csn+0x3c>)
 8001172:	8811      	ldrh	r1, [r2, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f002 f87a 	bl	8003270 <HAL_GPIO_WritePin>
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000bc 	.word	0x200000bc
 8001188:	200000c0 	.word	0x200000c0

0800118c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d008      	beq.n	80011ac <NRF24_ce+0x20>
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <NRF24_ce+0x38>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <NRF24_ce+0x3c>)
 80011a0:	8811      	ldrh	r1, [r2, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f002 f863 	bl	8003270 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80011aa:	e007      	b.n	80011bc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <NRF24_ce+0x38>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <NRF24_ce+0x3c>)
 80011b2:	8811      	ldrh	r1, [r2, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f85a 	bl	8003270 <HAL_GPIO_WritePin>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200000bc 	.word	0x200000bc
 80011c8:	200000c2 	.word	0x200000c2

080011cc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff ffb8 	bl	800114c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011e6:	f107 010c 	add.w	r1, r7, #12
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	2201      	movs	r2, #1
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <NRF24_read_register+0x4c>)
 80011f0:	f003 fce0 	bl	8004bb4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	1c59      	adds	r1, r3, #1
 80011fa:	2364      	movs	r3, #100	; 0x64
 80011fc:	2201      	movs	r2, #1
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <NRF24_read_register+0x4c>)
 8001200:	f003 fe14 	bl	8004e2c <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001204:	7b7b      	ldrb	r3, [r7, #13]
 8001206:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff ff9f 	bl	800114c <NRF24_csn>
	return retData;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200000c4 	.word	0x200000c4

0800121c <NRF24_write_register>:
	//Bring CSN high
	NRF24_csn(1);
}
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff8d 	bl	800114c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	b2db      	uxtb	r3, r3
 800123a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001240:	f107 010c 	add.w	r1, r7, #12
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	2202      	movs	r2, #2
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <NRF24_write_register+0x40>)
 800124a:	f003 fcb3 	bl	8004bb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f7ff ff7c 	bl	800114c <NRF24_csn>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000c4 	.word	0x200000c4

08001260 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff6b 	bl	800114c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f043 0320 	orr.w	r3, r3, #32
 800127c:	b2db      	uxtb	r3, r3
 800127e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001280:	f107 010c 	add.w	r1, r7, #12
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	2201      	movs	r2, #1
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <NRF24_write_registerN+0x4c>)
 800128a:	f003 fc93 	bl	8004bb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	b29a      	uxth	r2, r3
 8001292:	2364      	movs	r3, #100	; 0x64
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <NRF24_write_registerN+0x4c>)
 8001298:	f003 fc8c 	bl	8004bb4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff ff55 	bl	800114c <NRF24_csn>
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000c4 	.word	0x200000c4

080012b0 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80012b4:	21ff      	movs	r1, #255	; 0xff
 80012b6:	20e1      	movs	r0, #225	; 0xe1
 80012b8:	f7ff ffb0 	bl	800121c <NRF24_write_register>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80012c4:	21ff      	movs	r1, #255	; 0xff
 80012c6:	20e2      	movs	r0, #226	; 0xe2
 80012c8:	f7ff ffa8 	bl	800121c <NRF24_write_register>
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80012d0:	b082      	sub	sp, #8
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80012e4:	4b65      	ldr	r3, [pc, #404]	; (800147c <NRF24_begin+0x1ac>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2258      	movs	r2, #88	; 0x58
 80012ee:	4619      	mov	r1, r3
 80012f0:	f004 fc26 	bl	8005b40 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80012f4:	4a62      	ldr	r2, [pc, #392]	; (8001480 <NRF24_begin+0x1b0>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80012fa:	4a62      	ldr	r2, [pc, #392]	; (8001484 <NRF24_begin+0x1b4>)
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001300:	4a61      	ldr	r2, [pc, #388]	; (8001488 <NRF24_begin+0x1b8>)
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff ff20 	bl	800114c <NRF24_csn>
	NRF24_ce(0);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff3d 	bl	800118c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001312:	2005      	movs	r0, #5
 8001314:	f001 fd20 	bl	8002d58 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001318:	2108      	movs	r1, #8
 800131a:	2000      	movs	r0, #0
 800131c:	f7ff ff7e 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001320:	213f      	movs	r1, #63	; 0x3f
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ff7a 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001328:	2103      	movs	r1, #3
 800132a:	2002      	movs	r0, #2
 800132c:	f7ff ff76 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001330:	2103      	movs	r1, #3
 8001332:	2003      	movs	r0, #3
 8001334:	f7ff ff72 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001338:	2103      	movs	r1, #3
 800133a:	2004      	movs	r0, #4
 800133c:	f7ff ff6e 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001340:	2102      	movs	r1, #2
 8001342:	2005      	movs	r0, #5
 8001344:	f7ff ff6a 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001348:	210f      	movs	r1, #15
 800134a:	2006      	movs	r0, #6
 800134c:	f7ff ff66 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001350:	210e      	movs	r1, #14
 8001352:	2007      	movs	r0, #7
 8001354:	f7ff ff62 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001358:	2100      	movs	r1, #0
 800135a:	2008      	movs	r0, #8
 800135c:	f7ff ff5e 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001360:	2100      	movs	r1, #0
 8001362:	2009      	movs	r0, #9
 8001364:	f7ff ff5a 	bl	800121c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001368:	23e7      	movs	r3, #231	; 0xe7
 800136a:	733b      	strb	r3, [r7, #12]
 800136c:	23e7      	movs	r3, #231	; 0xe7
 800136e:	72fb      	strb	r3, [r7, #11]
 8001370:	23e7      	movs	r3, #231	; 0xe7
 8001372:	72bb      	strb	r3, [r7, #10]
 8001374:	23e7      	movs	r3, #231	; 0xe7
 8001376:	727b      	strb	r3, [r7, #9]
 8001378:	23e7      	movs	r3, #231	; 0xe7
 800137a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	2205      	movs	r2, #5
 8001382:	4619      	mov	r1, r3
 8001384:	200a      	movs	r0, #10
 8001386:	f7ff ff6b 	bl	8001260 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800138a:	23c2      	movs	r3, #194	; 0xc2
 800138c:	733b      	strb	r3, [r7, #12]
 800138e:	23c2      	movs	r3, #194	; 0xc2
 8001390:	72fb      	strb	r3, [r7, #11]
 8001392:	23c2      	movs	r3, #194	; 0xc2
 8001394:	72bb      	strb	r3, [r7, #10]
 8001396:	23c2      	movs	r3, #194	; 0xc2
 8001398:	727b      	strb	r3, [r7, #9]
 800139a:	23c2      	movs	r3, #194	; 0xc2
 800139c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	2205      	movs	r2, #5
 80013a4:	4619      	mov	r1, r3
 80013a6:	200b      	movs	r0, #11
 80013a8:	f7ff ff5a 	bl	8001260 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80013ac:	21c3      	movs	r1, #195	; 0xc3
 80013ae:	200c      	movs	r0, #12
 80013b0:	f7ff ff34 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80013b4:	21c4      	movs	r1, #196	; 0xc4
 80013b6:	200d      	movs	r0, #13
 80013b8:	f7ff ff30 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80013bc:	21c5      	movs	r1, #197	; 0xc5
 80013be:	200e      	movs	r0, #14
 80013c0:	f7ff ff2c 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80013c4:	21c6      	movs	r1, #198	; 0xc6
 80013c6:	200f      	movs	r0, #15
 80013c8:	f7ff ff28 	bl	800121c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80013cc:	23e7      	movs	r3, #231	; 0xe7
 80013ce:	733b      	strb	r3, [r7, #12]
 80013d0:	23e7      	movs	r3, #231	; 0xe7
 80013d2:	72fb      	strb	r3, [r7, #11]
 80013d4:	23e7      	movs	r3, #231	; 0xe7
 80013d6:	72bb      	strb	r3, [r7, #10]
 80013d8:	23e7      	movs	r3, #231	; 0xe7
 80013da:	727b      	strb	r3, [r7, #9]
 80013dc:	23e7      	movs	r3, #231	; 0xe7
 80013de:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	2205      	movs	r2, #5
 80013e6:	4619      	mov	r1, r3
 80013e8:	2010      	movs	r0, #16
 80013ea:	f7ff ff39 	bl	8001260 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80013ee:	2100      	movs	r1, #0
 80013f0:	2011      	movs	r0, #17
 80013f2:	f7ff ff13 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2012      	movs	r0, #18
 80013fa:	f7ff ff0f 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80013fe:	2100      	movs	r1, #0
 8001400:	2013      	movs	r0, #19
 8001402:	f7ff ff0b 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001406:	2100      	movs	r1, #0
 8001408:	2014      	movs	r0, #20
 800140a:	f7ff ff07 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800140e:	2100      	movs	r1, #0
 8001410:	2015      	movs	r0, #21
 8001412:	f7ff ff03 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001416:	2100      	movs	r1, #0
 8001418:	2016      	movs	r0, #22
 800141a:	f7ff feff 	bl	800121c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800141e:	f000 f9e7 	bl	80017f0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001422:	2100      	movs	r1, #0
 8001424:	201c      	movs	r0, #28
 8001426:	f7ff fef9 	bl	800121c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800142a:	2100      	movs	r1, #0
 800142c:	201d      	movs	r0, #29
 800142e:	f7ff fef5 	bl	800121c <NRF24_write_register>
	//printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001432:	210f      	movs	r1, #15
 8001434:	200f      	movs	r0, #15
 8001436:	f000 f8a9 	bl	800158c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800143a:	2003      	movs	r0, #3
 800143c:	f000 f919 	bl	8001672 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 f94f 	bl	80016e4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001446:	2002      	movs	r0, #2
 8001448:	f000 f992 	bl	8001770 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800144c:	f000 f8e4 	bl	8001618 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001450:	2020      	movs	r0, #32
 8001452:	f000 f8cb 	bl	80015ec <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8001456:	f000 f9c2 	bl	80017de <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800145a:	204c      	movs	r0, #76	; 0x4c
 800145c:	f000 f8b1 	bl	80015c2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001460:	f7ff ff26 	bl	80012b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001464:	f7ff ff2c 	bl	80012c0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001468:	f000 f9aa 	bl	80017c0 <NRF24_powerDown>
	
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001476:	b002      	add	sp, #8
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200000c4 	.word	0x200000c4
 8001480:	200000bc 	.word	0x200000bc
 8001484:	200000c0 	.word	0x200000c0
 8001488:	200000c2 	.word	0x200000c2

0800148c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fe9b 	bl	80011cc <NRF24_read_register>
 8001496:	4603      	mov	r3, r0
 8001498:	f043 0303 	orr.w	r3, r3, #3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff febb 	bl	800121c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <NRF24_startListening+0x48>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	d004      	beq.n	80014ba <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80014b0:	2205      	movs	r2, #5
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <NRF24_startListening+0x48>)
 80014b4:	200a      	movs	r0, #10
 80014b6:	f7ff fed3 	bl	8001260 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 80014ba:	f7ff fef9 	bl	80012b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014be:	f7ff feff 	bl	80012c0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fe62 	bl	800118c <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80014c8:	2096      	movs	r0, #150	; 0x96
 80014ca:	f7ff fe1f 	bl	800110c <NRF24_DelayMicroSeconds>
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200000b0 	.word	0x200000b0

080014d8 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fe55 	bl	800118c <NRF24_ce>
	NRF24_flush_tx();
 80014e2:	f7ff fee5 	bl	80012b0 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014e6:	f7ff feeb 	bl	80012c0 <NRF24_flush_rx>
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4601      	mov	r1, r0
 80014f8:	e9c7 2300 	strd	r2, r3, [r7]
 80014fc:	460b      	mov	r3, r1
 80014fe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d104      	bne.n	8001510 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800150a:	491c      	ldr	r1, [pc, #112]	; (800157c <NRF24_openReadingPipe+0x8c>)
 800150c:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b06      	cmp	r3, #6
 8001514:	d82d      	bhi.n	8001572 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d808      	bhi.n	800152e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	4a18      	ldr	r2, [pc, #96]	; (8001580 <NRF24_openReadingPipe+0x90>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	4639      	mov	r1, r7
 8001524:	2205      	movs	r2, #5
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe9a 	bl	8001260 <NRF24_write_registerN>
 800152c:	e007      	b.n	800153e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	4a13      	ldr	r2, [pc, #76]	; (8001580 <NRF24_openReadingPipe+0x90>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	4639      	mov	r1, r7
 8001536:	2201      	movs	r2, #1
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fe91 	bl	8001260 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <NRF24_openReadingPipe+0x94>)
 8001542:	5cd3      	ldrb	r3, [r2, r3]
 8001544:	4a10      	ldr	r2, [pc, #64]	; (8001588 <NRF24_openReadingPipe+0x98>)
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fe66 	bl	800121c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001550:	2002      	movs	r0, #2
 8001552:	f7ff fe3b 	bl	80011cc <NRF24_read_register>
 8001556:	4603      	mov	r3, r0
 8001558:	b25a      	sxtb	r2, r3
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	2101      	movs	r1, #1
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	b25b      	sxtb	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4619      	mov	r1, r3
 800156c:	2002      	movs	r0, #2
 800156e:	f7ff fe55 	bl	800121c <NRF24_write_register>
	}
	
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200000b0 	.word	0x200000b0
 8001580:	08007188 	.word	0x08007188
 8001584:	08007190 	.word	0x08007190
 8001588:	200000b8 	.word	0x200000b8

0800158c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	4313      	orrs	r3, r2
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	2004      	movs	r0, #4
 80015b6:	f7ff fe31 	bl	800121c <NRF24_write_register>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80015cc:	237f      	movs	r3, #127	; 0x7f
 80015ce:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf28      	it	cs
 80015d8:	4613      	movcs	r3, r2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	2005      	movs	r0, #5
 80015e0:	f7ff fe1c 	bl	800121c <NRF24_write_register>
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80015f6:	2320      	movs	r3, #32
 80015f8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4293      	cmp	r3, r2
 8001600:	bf28      	it	cs
 8001602:	4613      	movcs	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b03      	ldr	r3, [pc, #12]	; (8001614 <NRF24_setPayloadSize+0x28>)
 8001608:	701a      	strb	r2, [r3, #0]
}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	200000b8 	.word	0x200000b8

08001618 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800161c:	201d      	movs	r0, #29
 800161e:	f7ff fdd5 	bl	80011cc <NRF24_read_register>
 8001622:	4603      	mov	r3, r0
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	201d      	movs	r0, #29
 800162e:	f7ff fdf5 	bl	800121c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001632:	2100      	movs	r1, #0
 8001634:	201c      	movs	r0, #28
 8001636:	f7ff fdf1 	bl	800121c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800163a:	4b02      	ldr	r3, [pc, #8]	; (8001644 <NRF24_disableDynamicPayloads+0x2c>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000b9 	.word	0x200000b9

08001648 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d004      	beq.n	8001662 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001658:	213f      	movs	r1, #63	; 0x3f
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff fdde 	bl	800121c <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001660:	e003      	b.n	800166a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001662:	2100      	movs	r1, #0
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff fdd9 	bl	800121c <NRF24_write_register>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800167c:	2006      	movs	r0, #6
 800167e:	f7ff fda5 	bl	80011cc <NRF24_read_register>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
 8001688:	f023 0306 	bic.w	r3, r3, #6
 800168c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d104      	bne.n	800169e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	f043 0306 	orr.w	r3, r3, #6
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e019      	b.n	80016d2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d104      	bne.n	80016ae <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e011      	b.n	80016d2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d104      	bne.n	80016be <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e009      	b.n	80016d2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d103      	bne.n	80016d2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	f043 0306 	orr.w	r3, r3, #6
 80016d0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4619      	mov	r1, r3
 80016d6:	2006      	movs	r0, #6
 80016d8:	f7ff fda0 	bl	800121c <NRF24_write_register>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80016f2:	2006      	movs	r0, #6
 80016f4:	f7ff fd6a 	bl	80011cc <NRF24_read_register>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <NRF24_setDataRate+0x88>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001702:	7bbb      	ldrb	r3, [r7, #14]
 8001704:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001708:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d107      	bne.n	8001720 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <NRF24_setDataRate+0x88>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	f043 0320 	orr.w	r3, r3, #32
 800171c:	73bb      	strb	r3, [r7, #14]
 800171e:	e00d      	b.n	800173c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <NRF24_setDataRate+0x88>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	73bb      	strb	r3, [r7, #14]
 8001734:	e002      	b.n	800173c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <NRF24_setDataRate+0x88>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	4619      	mov	r1, r3
 8001740:	2006      	movs	r0, #6
 8001742:	f7ff fd6b 	bl	800121c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001746:	2006      	movs	r0, #6
 8001748:	f7ff fd40 	bl	80011cc <NRF24_read_register>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	4293      	cmp	r3, r2
 8001754:	d102      	bne.n	800175c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e002      	b.n	8001762 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <NRF24_setDataRate+0x88>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200000ba 	.word	0x200000ba

08001770 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fd26 	bl	80011cc <NRF24_read_register>
 8001780:	4603      	mov	r3, r0
 8001782:	f023 030c 	bic.w	r3, r3, #12
 8001786:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00f      	beq.n	80017ae <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d104      	bne.n	800179e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	73fb      	strb	r3, [r7, #15]
 800179c:	e007      	b.n	80017ae <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	4619      	mov	r1, r3
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff fd32 	bl	800121c <NRF24_write_register>
}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff fd01 	bl	80011cc <NRF24_read_register>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f023 0302 	bic.w	r3, r3, #2
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	2000      	movs	r0, #0
 80017d6:	f7ff fd21 	bl	800121c <NRF24_write_register>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}

080017de <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80017e2:	2170      	movs	r1, #112	; 0x70
 80017e4:	2007      	movs	r0, #7
 80017e6:	f7ff fd19 	bl	800121c <NRF24_write_register>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff fca8 	bl	800114c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80017fc:	2350      	movs	r3, #80	; 0x50
 80017fe:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001800:	2373      	movs	r3, #115	; 0x73
 8001802:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001804:	1d39      	adds	r1, r7, #4
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	2202      	movs	r2, #2
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <NRF24_ACTIVATE_cmd+0x30>)
 800180c:	f003 f9d2 	bl	8004bb4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f7ff fc9b 	bl	800114c <NRF24_csn>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200000c4 	.word	0x200000c4

08001824 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <MX_GPIO_Init+0x90>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <MX_GPIO_Init+0x90>)
 800183e:	f043 0320 	orr.w	r3, r3, #32
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <MX_GPIO_Init+0x90>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_GPIO_Init+0x90>)
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <MX_GPIO_Init+0x90>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6193      	str	r3, [r2, #24]
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_GPIO_Init+0x90>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_GPIO_Init+0x90>)
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <MX_GPIO_Init+0x90>)
 800186e:	f043 0308 	orr.w	r3, r3, #8
 8001872:	6193      	str	r3, [r2, #24]
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_GPIO_Init+0x90>)
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSS_Pin|CEN_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001886:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_GPIO_Init+0x94>)
 8001888:	f001 fcf2 	bl	8003270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CSS_Pin|CEN_Pin;
 800188c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2302      	movs	r3, #2
 800189c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <MX_GPIO_Init+0x94>)
 80018a6:	f001 fb5f 	bl	8002f68 <HAL_GPIO_Init>

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010c00 	.word	0x40010c00

080018bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_I2C1_Init+0x50>)
 80018c2:	4a13      	ldr	r2, [pc, #76]	; (8001910 <MX_I2C1_Init+0x54>)
 80018c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_I2C1_Init+0x50>)
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_I2C1_Init+0x58>)
 80018ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_I2C1_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_I2C1_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_I2C1_Init+0x50>)
 80018da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_I2C1_Init+0x50>)
 80018fa:	f001 fcd1 	bl	80032a0 <HAL_I2C_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001904:	f001 f84f 	bl	80029a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	2000011c 	.word	0x2000011c
 8001910:	40005400 	.word	0x40005400
 8001914:	00061a80 	.word	0x00061a80

08001918 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_I2C_MspInit+0x90>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d132      	bne.n	800199e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_I2C_MspInit+0x94>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_I2C_MspInit+0x94>)
 800193e:	f043 0308 	orr.w	r3, r3, #8
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_I2C_MspInit+0x94>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001950:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	2312      	movs	r3, #18
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4812      	ldr	r0, [pc, #72]	; (80019b0 <HAL_I2C_MspInit+0x98>)
 8001966:	f001 faff 	bl	8002f68 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_I2C_MspInit+0x9c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f043 0302 	orr.w	r3, r3, #2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <HAL_I2C_MspInit+0x9c>)
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_I2C_MspInit+0x94>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_I2C_MspInit+0x94>)
 800198c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001990:	61d3      	str	r3, [r2, #28]
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_I2C_MspInit+0x94>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40010000 	.word	0x40010000

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <__NVIC_EnableIRQ+0x34>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <TIM3_IRQHandler>:





void TIM3_IRQHandler(void){
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0


	if ( TIM3->SR & TIM_SR_UIF ){
 80019f4:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <TIM3_IRQHandler+0x11c>)
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d07b      	beq.n	8001af8 <TIM3_IRQHandler+0x108>

		throttle_counter_left_motor++;
 8001a00:	4b43      	ldr	r3, [pc, #268]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	4a42      	ldr	r2, [pc, #264]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001a08:	6013      	str	r3, [r2, #0]
		if ( throttle_counter_left_motor > throttle_left_motor_memory ){
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <TIM3_IRQHandler+0x124>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dd1d      	ble.n	8001a52 <TIM3_IRQHandler+0x62>
			throttle_counter_left_motor=0;
 8001a16:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
			throttle_left_motor_memory = throttle_left_motor;
 8001a1c:	4b3e      	ldr	r3, [pc, #248]	; (8001b18 <TIM3_IRQHandler+0x128>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a3c      	ldr	r2, [pc, #240]	; (8001b14 <TIM3_IRQHandler+0x124>)
 8001a22:	6013      	str	r3, [r2, #0]
			if ( throttle_left_motor_memory < 0 ){
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <TIM3_IRQHandler+0x124>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	da0b      	bge.n	8001a44 <TIM3_IRQHandler+0x54>
				GPIOB->BRR |= ( 1<<12 );
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a36:	6153      	str	r3, [r2, #20]
				throttle_left_motor_memory *=-1;
 8001a38:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <TIM3_IRQHandler+0x124>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <TIM3_IRQHandler+0x124>)
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e01b      	b.n	8001a7c <TIM3_IRQHandler+0x8c>
			}else{
				GPIOB->BSRR |= ( 1<<12 );
 8001a44:	4b35      	ldr	r3, [pc, #212]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	4a34      	ldr	r2, [pc, #208]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4e:	6113      	str	r3, [r2, #16]
 8001a50:	e014      	b.n	8001a7c <TIM3_IRQHandler+0x8c>
			}
		}
		else if ( throttle_counter_left_motor == 1 )GPIOB->BSRR |=(1<<1);
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d106      	bne.n	8001a68 <TIM3_IRQHandler+0x78>
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6113      	str	r3, [r2, #16]
 8001a66:	e009      	b.n	8001a7c <TIM3_IRQHandler+0x8c>
		else if ( throttle_counter_left_motor == 2 )GPIOB->BRR |= (1<<1);
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d105      	bne.n	8001a7c <TIM3_IRQHandler+0x8c>
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	6153      	str	r3, [r2, #20]


		throttle_counter_right_motor++;
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <TIM3_IRQHandler+0x130>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a27      	ldr	r2, [pc, #156]	; (8001b20 <TIM3_IRQHandler+0x130>)
 8001a84:	6013      	str	r3, [r2, #0]
		if ( throttle_counter_right_motor > throttle_right_motor_memory ){
 8001a86:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <TIM3_IRQHandler+0x130>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <TIM3_IRQHandler+0x134>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	dd1d      	ble.n	8001ace <TIM3_IRQHandler+0xde>
			throttle_counter_right_motor=0;
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <TIM3_IRQHandler+0x130>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			throttle_right_motor_memory = throttle_right_motor;
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <TIM3_IRQHandler+0x138>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <TIM3_IRQHandler+0x134>)
 8001a9e:	6013      	str	r3, [r2, #0]
			if ( throttle_right_motor_memory < 0 ){
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <TIM3_IRQHandler+0x134>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da0b      	bge.n	8001ac0 <TIM3_IRQHandler+0xd0>
				GPIOB->BRR |= ( 1<<15 );
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab2:	6153      	str	r3, [r2, #20]
				throttle_right_motor_memory *=-1;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <TIM3_IRQHandler+0x134>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	425b      	negs	r3, r3
 8001aba:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <TIM3_IRQHandler+0x134>)
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e01b      	b.n	8001af8 <TIM3_IRQHandler+0x108>
			}else{
						GPIOB->BSRR |= ( 1<<15 );
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aca:	6113      	str	r3, [r2, #16]
 8001acc:	e014      	b.n	8001af8 <TIM3_IRQHandler+0x108>
			}
		}
		else if ( throttle_counter_left_motor == 1 )GPIOB->BSRR |=(1<<13);
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d106      	bne.n	8001ae4 <TIM3_IRQHandler+0xf4>
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ae0:	6113      	str	r3, [r2, #16]
 8001ae2:	e009      	b.n	8001af8 <TIM3_IRQHandler+0x108>
		else if ( throttle_counter_left_motor == 2 )GPIOB->BRR |= (1<<13);
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <TIM3_IRQHandler+0x120>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d105      	bne.n	8001af8 <TIM3_IRQHandler+0x108>
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <TIM3_IRQHandler+0x12c>)
 8001af2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af6:	6153      	str	r3, [r2, #20]
	}
	TIM3->SR &= ~TIM_SR_UIF;
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <TIM3_IRQHandler+0x11c>)
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <TIM3_IRQHandler+0x11c>)
 8001afe:	f023 0301 	bic.w	r3, r3, #1
 8001b02:	6113      	str	r3, [r2, #16]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	200001d4 	.word	0x200001d4
 8001b14:	200001d8 	.word	0x200001d8
 8001b18:	200001d0 	.word	0x200001d0
 8001b1c:	40010c00 	.word	0x40010c00
 8001b20:	200001e4 	.word	0x200001e4
 8001b24:	200001e8 	.word	0x200001e8
 8001b28:	200001e0 	.word	0x200001e0

08001b2c <setup_mpu_6050_register>:


void setup_mpu_6050_register(void){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x6B, 1, (uint8_t*) 0x00, 1, 10);
 8001b32:	230a      	movs	r3, #10
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	2301      	movs	r3, #1
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2301      	movs	r3, #1
 8001b40:	226b      	movs	r2, #107	; 0x6b
 8001b42:	21d0      	movs	r1, #208	; 0xd0
 8001b44:	480e      	ldr	r0, [pc, #56]	; (8001b80 <setup_mpu_6050_register+0x54>)
 8001b46:	f001 fcef 	bl	8003528 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1C, 1, (uint8_t*) 0x10, 1, 10);
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2310      	movs	r3, #16
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2301      	movs	r3, #1
 8001b58:	221c      	movs	r2, #28
 8001b5a:	21d0      	movs	r1, #208	; 0xd0
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <setup_mpu_6050_register+0x54>)
 8001b5e:	f001 fce3 	bl	8003528 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, 0x1B, 1, (uint8_t*) 0x08, 1, 10);
 8001b62:	230a      	movs	r3, #10
 8001b64:	9302      	str	r3, [sp, #8]
 8001b66:	2301      	movs	r3, #1
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	221b      	movs	r2, #27
 8001b72:	21d0      	movs	r1, #208	; 0xd0
 8001b74:	4802      	ldr	r0, [pc, #8]	; (8001b80 <setup_mpu_6050_register+0x54>)
 8001b76:	f001 fcd7 	bl	8003528 <HAL_I2C_Mem_Write>
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000011c 	.word	0x2000011c

08001b84 <read_mpu_6050_data>:

void read_mpu_6050_data(void){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af04      	add	r7, sp, #16
	uint8_t Accel_Data_Raw[6];
	HAL_I2C_Mem_Read (&hi2c1, 0x68<<1, 0x3B, 1, Accel_Data_Raw, 6, 1000);
 8001b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	2306      	movs	r3, #6
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	223b      	movs	r2, #59	; 0x3b
 8001b9e:	21d0      	movs	r1, #208	; 0xd0
 8001ba0:	4827      	ldr	r0, [pc, #156]	; (8001c40 <read_mpu_6050_data+0xbc>)
 8001ba2:	f001 fdbb 	bl	800371c <HAL_I2C_Mem_Read>

	acc_x = (int16_t)(Accel_Data_Raw[0] << 8 | Accel_Data_Raw [1]);
 8001ba6:	7a3b      	ldrb	r3, [r7, #8]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	7a7b      	ldrb	r3, [r7, #9]
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <read_mpu_6050_data+0xc0>)
 8001bb8:	601a      	str	r2, [r3, #0]
	acc_y = (int16_t)(Accel_Data_Raw[2] << 8 | Accel_Data_Raw [3]);
 8001bba:	7abb      	ldrb	r3, [r7, #10]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	7afb      	ldrb	r3, [r7, #11]
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <read_mpu_6050_data+0xc4>)
 8001bcc:	601a      	str	r2, [r3, #0]
	acc_z = (int16_t)(Accel_Data_Raw[4] << 8 | Accel_Data_Raw [5]);
 8001bce:	7b3b      	ldrb	r3, [r7, #12]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	7b7b      	ldrb	r3, [r7, #13]
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b21b      	sxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <read_mpu_6050_data+0xc8>)
 8001be0:	601a      	str	r2, [r3, #0]

	uint8_t Gyro_Data_Raw[6];
	HAL_I2C_Mem_Read (&hi2c1, 0x68<<1, 0x43, 1, Gyro_Data_Raw, 6, 1000);
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	2306      	movs	r3, #6
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	463b      	mov	r3, r7
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	2243      	movs	r2, #67	; 0x43
 8001bf4:	21d0      	movs	r1, #208	; 0xd0
 8001bf6:	4812      	ldr	r0, [pc, #72]	; (8001c40 <read_mpu_6050_data+0xbc>)
 8001bf8:	f001 fd90 	bl	800371c <HAL_I2C_Mem_Read>

	gyro_x = (int16_t)(Gyro_Data_Raw[0] << 8 | Gyro_Data_Raw [1]);
 8001bfc:	783b      	ldrb	r3, [r7, #0]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	787b      	ldrb	r3, [r7, #1]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <read_mpu_6050_data+0xcc>)
 8001c0e:	601a      	str	r2, [r3, #0]
	gyro_y = (int16_t)(Gyro_Data_Raw[2] << 8 | Gyro_Data_Raw [3]);
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <read_mpu_6050_data+0xd0>)
 8001c22:	601a      	str	r2, [r3, #0]
	gyro_z = (int16_t)(Gyro_Data_Raw[4] << 8 | Gyro_Data_Raw [5]);
 8001c24:	793b      	ldrb	r3, [r7, #4]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	797b      	ldrb	r3, [r7, #5]
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <read_mpu_6050_data+0xd4>)
 8001c36:	601a      	str	r2, [r3, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000011c 	.word	0x2000011c
 8001c44:	20000180 	.word	0x20000180
 8001c48:	20000184 	.word	0x20000184
 8001c4c:	20000188 	.word	0x20000188
 8001c50:	20000174 	.word	0x20000174
 8001c54:	20000178 	.word	0x20000178
 8001c58:	2000017c 	.word	0x2000017c
 8001c5c:	00000000 	.word	0x00000000

08001c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c64:	b098      	sub	sp, #96	; 0x60
 8001c66:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c68:	f001 f814 	bl	8002c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6c:	f000 fe56 	bl	800291c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c70:	f7ff fdd8 	bl	8001824 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c74:	f7ff fe22 	bl	80018bc <MX_I2C1_Init>
  MX_SPI1_Init();
 8001c78:	f000 fe9a 	bl	80029b0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001c7c:	f000 ff78 	bl	8002b70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ///////////////////////////////////////////////////
  // NRF24 setup
  NRF24_begin(CSS_GPIO_Port, CSS_Pin, CEN_Pin, hspi1);
 8001c80:	4c54      	ldr	r4, [pc, #336]	; (8001dd4 <main+0x174>)
 8001c82:	4668      	mov	r0, sp
 8001c84:	1d23      	adds	r3, r4, #4
 8001c86:	2254      	movs	r2, #84	; 0x54
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f003 ff59 	bl	8005b40 <memcpy>
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c98:	484f      	ldr	r0, [pc, #316]	; (8001dd8 <main+0x178>)
 8001c9a:	f7ff fb19 	bl	80012d0 <NRF24_begin>
  NRF24_stopListening();
 8001c9e:	f7ff fc1b 	bl	80014d8 <NRF24_stopListening>
  NRF24_setAutoAck(true);
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7ff fcd0 	bl	8001648 <NRF24_setAutoAck>
  NRF24_setChannel(68);
 8001ca8:	2044      	movs	r0, #68	; 0x44
 8001caa:	f7ff fc8a 	bl	80015c2 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8001cae:	2020      	movs	r0, #32
 8001cb0:	f7ff fc9c 	bl	80015ec <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1, RxpipeAddrs);
 8001cb4:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <main+0x17c>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f7ff fc18 	bl	80014f0 <NRF24_openReadingPipe>
  NRF24_startListening();
 8001cc0:	f7ff fbe4 	bl	800148c <NRF24_startListening>

  // GPIO Configure
  RCC->APB2ENR |= ( (1<<4) | (1<<3) );  // Enable clock for GPIO port C
 8001cc4:	4b46      	ldr	r3, [pc, #280]	; (8001de0 <main+0x180>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	4a45      	ldr	r2, [pc, #276]	; (8001de0 <main+0x180>)
 8001cca:	f043 0318 	orr.w	r3, r3, #24
 8001cce:	6193      	str	r3, [r2, #24]
  // Configure GPIOC pin 13 as output mode
  GPIOC->CRH |= ( ( 1<<20 ) | ( 1<<21 ) ); // OUTPUT mode, max speed 50Mhz
 8001cd0:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <main+0x184>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <main+0x184>)
 8001cd6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001cda:	6053      	str	r3, [r2, #4]
  GPIOC->CRH &= ~( ( 1<<22 ) | ( 1<<23 ) ); // General purpose output push-pull
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <main+0x184>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <main+0x184>)
 8001ce2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ce6:	6053      	str	r3, [r2, #4]

  // Configure GPIOB for controlling stepper Motor2
  /////////////////////////////////////////////////

  GPIOB->CRL |= ( ( 1<<4 ) | ( 1<<5 ) ); // m2_step pin as output
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <main+0x178>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <main+0x178>)
 8001cee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001cf2:	6013      	str	r3, [r2, #0]
  GPIOB->CRL &= ~( ( 1<<6 ) | ( 1<<7 ) );
 8001cf4:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <main+0x178>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a37      	ldr	r2, [pc, #220]	; (8001dd8 <main+0x178>)
 8001cfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001cfe:	6013      	str	r3, [r2, #0]

  GPIOB->CRL |= ( ( 1<<8 ) | ( 1<<9 ) ); // m2_enable as output
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <main+0x178>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a34      	ldr	r2, [pc, #208]	; (8001dd8 <main+0x178>)
 8001d06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d0a:	6013      	str	r3, [r2, #0]
  GPIOB->CRL &= ~( ( 1<<10 ) | ( 1<<11 ) );
 8001d0c:	4b32      	ldr	r3, [pc, #200]	; (8001dd8 <main+0x178>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a31      	ldr	r2, [pc, #196]	; (8001dd8 <main+0x178>)
 8001d12:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001d16:	6013      	str	r3, [r2, #0]

  GPIOB->CRH |= ( ( 1<<16 ) | ( 1<<17) ); // m2_dir as output
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <main+0x178>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <main+0x178>)
 8001d1e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001d22:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~( ( 1<<18 ) | ( 1<<19 ) );
 8001d24:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <main+0x178>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <main+0x178>)
 8001d2a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001d2e:	6053      	str	r3, [r2, #4]


  // Configure GPIOB for controlling stepper Motor1
  /////////////////////////////////////////////////

  GPIOB->CRH |= ( ( 1<<20 ) | ( 1<<21 ) ); // m1_step pin as output
 8001d30:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <main+0x178>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a28      	ldr	r2, [pc, #160]	; (8001dd8 <main+0x178>)
 8001d36:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001d3a:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~( ( 1<<22 ) | ( 1<<23 ) );
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <main+0x178>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <main+0x178>)
 8001d42:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d46:	6053      	str	r3, [r2, #4]

  GPIOB->CRH |= ( ( 1<<24 ) | ( 1<<25 ) ); // m1_enable as output
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <main+0x178>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <main+0x178>)
 8001d4e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001d52:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~( ( 1<<26 ) | ( 1<<27 ) );
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <main+0x178>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <main+0x178>)
 8001d5a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001d5e:	6053      	str	r3, [r2, #4]

  GPIOB->CRH |= ( ( 1<<28 ) | ( 1<<29 ) ); // m1_dir as output
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <main+0x178>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <main+0x178>)
 8001d66:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001d6a:	6053      	str	r3, [r2, #4]
  GPIOB->CRH &= ~( ( 1<<30 ) | ( 1<<31 ) );
 8001d6c:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <main+0x178>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <main+0x178>)
 8001d72:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001d76:	6053      	str	r3, [r2, #4]
  /////////////////////////////////////////////////

  GPIOB->BRR |= (1<<2);
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <main+0x178>)
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <main+0x178>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6153      	str	r3, [r2, #20]
  GPIOB->BRR |= (1<<14);
 8001d84:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <main+0x178>)
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <main+0x178>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8e:	6153      	str	r3, [r2, #20]

  // Timer interrupt configuration

  RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; 				// Enable clock for TIM3
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <main+0x180>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <main+0x180>)
 8001d96:	f043 0302 	orr.w	r3, r3, #2
 8001d9a:	61d3      	str	r3, [r2, #28]
  TIM3->PSC = 2-1;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <main+0x188>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
  TIM3->ARR = 1800-1;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <main+0x188>)
 8001da4:	f240 7207 	movw	r2, #1799	; 0x707
 8001da8:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->CR1 |= TIM_CR1_CEN; 						// Enable counter
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <main+0x188>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <main+0x188>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DIER_UIE; 						// Enable timer interrupt
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <main+0x188>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <main+0x188>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ(TIM3_IRQn); 						// abort enable IRQ line for TIM3
 8001dc2:	201d      	movs	r0, #29
 8001dc4:	f7ff fdf8 	bl	80019b8 <__NVIC_EnableIRQ>

  ////////////////////////////////////////////////////

  setup_mpu_6050_register();
 8001dc8:	f7ff feb0 	bl	8001b2c <setup_mpu_6050_register>
  for ( int i=0; i< 2000; i++){
 8001dcc:	2300      	movs	r3, #0
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e02f      	b.n	8001e32 <main+0x1d2>
 8001dd2:	bf00      	nop
 8001dd4:	200001ec 	.word	0x200001ec
 8001dd8:	40010c00 	.word	0x40010c00
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40000400 	.word	0x40000400
	  if ( i % 15 == 0);
	  read_mpu_6050_data();
 8001dec:	f7ff feca 	bl	8001b84 <read_mpu_6050_data>
	  gyro_x_cal += gyro_x;
 8001df0:	4bb5      	ldr	r3, [pc, #724]	; (80020c8 <main+0x468>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4bb5      	ldr	r3, [pc, #724]	; (80020cc <main+0x46c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4ab3      	ldr	r2, [pc, #716]	; (80020c8 <main+0x468>)
 8001dfc:	6013      	str	r3, [r2, #0]
	  gyro_y_cal += gyro_y;
 8001dfe:	4bb4      	ldr	r3, [pc, #720]	; (80020d0 <main+0x470>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	4bb4      	ldr	r3, [pc, #720]	; (80020d4 <main+0x474>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4ab1      	ldr	r2, [pc, #708]	; (80020d0 <main+0x470>)
 8001e0a:	6013      	str	r3, [r2, #0]
	  gyro_z_cal += gyro_z;
 8001e0c:	4bb2      	ldr	r3, [pc, #712]	; (80020d8 <main+0x478>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4bb2      	ldr	r3, [pc, #712]	; (80020dc <main+0x47c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4413      	add	r3, r2
 8001e16:	4ab0      	ldr	r2, [pc, #704]	; (80020d8 <main+0x478>)
 8001e18:	6013      	str	r3, [r2, #0]
	  GPIOC->ODR ^= (1<<13);
 8001e1a:	4bb1      	ldr	r3, [pc, #708]	; (80020e0 <main+0x480>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4ab0      	ldr	r2, [pc, #704]	; (80020e0 <main+0x480>)
 8001e20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e24:	60d3      	str	r3, [r2, #12]
	  HAL_Delay(1);
 8001e26:	2001      	movs	r0, #1
 8001e28:	f000 ff96 	bl	8002d58 <HAL_Delay>
  for ( int i=0; i< 2000; i++){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e38:	dbd8      	blt.n	8001dec <main+0x18c>
  }

  gyro_x_cal /= 2000;
 8001e3a:	4ba3      	ldr	r3, [pc, #652]	; (80020c8 <main+0x468>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4aa9      	ldr	r2, [pc, #676]	; (80020e4 <main+0x484>)
 8001e40:	fb82 1203 	smull	r1, r2, r2, r3
 8001e44:	11d2      	asrs	r2, r2, #7
 8001e46:	17db      	asrs	r3, r3, #31
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	4a9f      	ldr	r2, [pc, #636]	; (80020c8 <main+0x468>)
 8001e4c:	6013      	str	r3, [r2, #0]
  gyro_y_cal /= 2000;
 8001e4e:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <main+0x470>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4aa4      	ldr	r2, [pc, #656]	; (80020e4 <main+0x484>)
 8001e54:	fb82 1203 	smull	r1, r2, r2, r3
 8001e58:	11d2      	asrs	r2, r2, #7
 8001e5a:	17db      	asrs	r3, r3, #31
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	4a9c      	ldr	r2, [pc, #624]	; (80020d0 <main+0x470>)
 8001e60:	6013      	str	r3, [r2, #0]
  gyro_z_cal /= 2000;
 8001e62:	4b9d      	ldr	r3, [pc, #628]	; (80020d8 <main+0x478>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a9f      	ldr	r2, [pc, #636]	; (80020e4 <main+0x484>)
 8001e68:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6c:	11d2      	asrs	r2, r2, #7
 8001e6e:	17db      	asrs	r3, r3, #31
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	4a99      	ldr	r2, [pc, #612]	; (80020d8 <main+0x478>)
 8001e74:	6013      	str	r3, [r2, #0]
  ///////////////////////////////////////////////////

  HAL_TIM_Base_Start(&htim4);
 8001e76:	489c      	ldr	r0, [pc, #624]	; (80020e8 <main+0x488>)
 8001e78:	f003 fbd4 	bl	8005624 <HAL_TIM_Base_Start>

  loop_timer = __HAL_TIM_GET_COUNTER(&htim4);
 8001e7c:	4b9a      	ldr	r3, [pc, #616]	; (80020e8 <main+0x488>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b99      	ldr	r3, [pc, #612]	; (80020ec <main+0x48c>)
 8001e86:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  read_mpu_6050_data();
 8001e88:	f7ff fe7c 	bl	8001b84 <read_mpu_6050_data>
	  gyro_x -= gyro_x_cal;
 8001e8c:	4b8f      	ldr	r3, [pc, #572]	; (80020cc <main+0x46c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4b8d      	ldr	r3, [pc, #564]	; (80020c8 <main+0x468>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	4a8d      	ldr	r2, [pc, #564]	; (80020cc <main+0x46c>)
 8001e98:	6013      	str	r3, [r2, #0]
	  gyro_y -= gyro_y_cal;
 8001e9a:	4b8e      	ldr	r3, [pc, #568]	; (80020d4 <main+0x474>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <main+0x470>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	4a8b      	ldr	r2, [pc, #556]	; (80020d4 <main+0x474>)
 8001ea6:	6013      	str	r3, [r2, #0]
	  gyro_z -= gyro_z_cal;
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <main+0x47c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <main+0x478>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a8a      	ldr	r2, [pc, #552]	; (80020dc <main+0x47c>)
 8001eb4:	6013      	str	r3, [r2, #0]
	  // Gyro angle calculations
	  // 0.0000611 = 1 / (250Hz / 65.5)
	  angle_pitch += gyro_x * 0.0000611;
 8001eb6:	4b8e      	ldr	r3, [pc, #568]	; (80020f0 <main+0x490>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe faac 	bl	8000418 <__aeabi_f2d>
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	460d      	mov	r5, r1
 8001ec4:	4b81      	ldr	r3, [pc, #516]	; (80020cc <main+0x46c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fa93 	bl	80003f4 <__aeabi_i2d>
 8001ece:	a378      	add	r3, pc, #480	; (adr r3, 80020b0 <main+0x450>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe faf8 	bl	80004c8 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4620      	mov	r0, r4
 8001ede:	4629      	mov	r1, r5
 8001ee0:	f7fe f93c 	bl	800015c <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f7fe fdc4 	bl	8000a78 <__aeabi_d2f>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4a7f      	ldr	r2, [pc, #508]	; (80020f0 <main+0x490>)
 8001ef4:	6013      	str	r3, [r2, #0]
	  angle_roll += gyro_y * 0.0000611;
 8001ef6:	4b7f      	ldr	r3, [pc, #508]	; (80020f4 <main+0x494>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fa8c 	bl	8000418 <__aeabi_f2d>
 8001f00:	4604      	mov	r4, r0
 8001f02:	460d      	mov	r5, r1
 8001f04:	4b73      	ldr	r3, [pc, #460]	; (80020d4 <main+0x474>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fa73 	bl	80003f4 <__aeabi_i2d>
 8001f0e:	a368      	add	r3, pc, #416	; (adr r3, 80020b0 <main+0x450>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f7fe fad8 	bl	80004c8 <__aeabi_dmul>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	4629      	mov	r1, r5
 8001f20:	f7fe f91c 	bl	800015c <__adddf3>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f7fe fda4 	bl	8000a78 <__aeabi_d2f>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a70      	ldr	r2, [pc, #448]	; (80020f4 <main+0x494>)
 8001f34:	6013      	str	r3, [r2, #0]
	  //0.000001066 = 0.0000611 * (3.142(PI) / 180degr)
	  angle_roll += angle_pitch * sin(gyro_z * 0.000001066);
 8001f36:	4b6f      	ldr	r3, [pc, #444]	; (80020f4 <main+0x494>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fa6c 	bl	8000418 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <main+0x490>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fa65 	bl	8000418 <__aeabi_f2d>
 8001f4e:	4680      	mov	r8, r0
 8001f50:	4689      	mov	r9, r1
 8001f52:	4b62      	ldr	r3, [pc, #392]	; (80020dc <main+0x47c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa4c 	bl	80003f4 <__aeabi_i2d>
 8001f5c:	a356      	add	r3, pc, #344	; (adr r3, 80020b8 <main+0x458>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe fab1 	bl	80004c8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f003 fdfd 	bl	8005b6c <sin>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4640      	mov	r0, r8
 8001f78:	4649      	mov	r1, r9
 8001f7a:	f7fe faa5 	bl	80004c8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4620      	mov	r0, r4
 8001f84:	4629      	mov	r1, r5
 8001f86:	f7fe f8e9 	bl	800015c <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fd71 	bl	8000a78 <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a56      	ldr	r2, [pc, #344]	; (80020f4 <main+0x494>)
 8001f9a:	6013      	str	r3, [r2, #0]
	  angle_pitch += angle_roll * sin(gyro_z * 0.000001066);
 8001f9c:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <main+0x490>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fa39 	bl	8000418 <__aeabi_f2d>
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	460d      	mov	r5, r1
 8001faa:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <main+0x494>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa32 	bl	8000418 <__aeabi_f2d>
 8001fb4:	4680      	mov	r8, r0
 8001fb6:	4689      	mov	r9, r1
 8001fb8:	4b48      	ldr	r3, [pc, #288]	; (80020dc <main+0x47c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fa19 	bl	80003f4 <__aeabi_i2d>
 8001fc2:	a33d      	add	r3, pc, #244	; (adr r3, 80020b8 <main+0x458>)
 8001fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc8:	f7fe fa7e 	bl	80004c8 <__aeabi_dmul>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f003 fdca 	bl	8005b6c <sin>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4640      	mov	r0, r8
 8001fde:	4649      	mov	r1, r9
 8001fe0:	f7fe fa72 	bl	80004c8 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4620      	mov	r0, r4
 8001fea:	4629      	mov	r1, r5
 8001fec:	f7fe f8b6 	bl	800015c <__adddf3>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f7fe fd3e 	bl	8000a78 <__aeabi_d2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a3c      	ldr	r2, [pc, #240]	; (80020f0 <main+0x490>)
 8002000:	6013      	str	r3, [r2, #0]
	  //Accelerometer angle calculations
	  acc_total_vector = sqrt((acc_x*acc_x)+(acc_y*acc_y)+(acc_z*acc_z));
 8002002:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <main+0x498>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <main+0x498>)
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	fb03 f202 	mul.w	r2, r3, r2
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <main+0x49c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	493a      	ldr	r1, [pc, #232]	; (80020fc <main+0x49c>)
 8002014:	6809      	ldr	r1, [r1, #0]
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	441a      	add	r2, r3
 800201c:	4b38      	ldr	r3, [pc, #224]	; (8002100 <main+0x4a0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4937      	ldr	r1, [pc, #220]	; (8002100 <main+0x4a0>)
 8002022:	6809      	ldr	r1, [r1, #0]
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe f9e2 	bl	80003f4 <__aeabi_i2d>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f003 fe06 	bl	8005c48 <sqrt>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fcf0 	bl	8000a28 <__aeabi_d2iz>
 8002048:	4603      	mov	r3, r0
 800204a:	4a2e      	ldr	r2, [pc, #184]	; (8002104 <main+0x4a4>)
 800204c:	6013      	str	r3, [r2, #0]
	  //57.296 = 1 / (3.142 / 180)
	  if(abs(acc_x) < acc_total_vector){
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <main+0x498>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002056:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <main+0x4a4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	da54      	bge.n	800210c <main+0x4ac>
	    angle_roll_acc = asin((float)acc_x/acc_total_vector)* -57.296;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <main+0x498>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fe10 	bl	8000c8c <__aeabi_i2f>
 800206c:	4604      	mov	r4, r0
 800206e:	4b25      	ldr	r3, [pc, #148]	; (8002104 <main+0x4a4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fe0a 	bl	8000c8c <__aeabi_i2f>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	4620      	mov	r0, r4
 800207e:	f7fe ff0d 	bl	8000e9c <__aeabi_fdiv>
 8002082:	4603      	mov	r3, r0
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe f9c7 	bl	8000418 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f003 fdb1 	bl	8005bf8 <asin>
 8002096:	a30a      	add	r3, pc, #40	; (adr r3, 80020c0 <main+0x460>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fa14 	bl	80004c8 <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fce6 	bl	8000a78 <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	e02b      	b.n	8002108 <main+0x4a8>
 80020b0:	01d41596 	.word	0x01d41596
 80020b4:	3f10045a 	.word	0x3f10045a
 80020b8:	652c6e62 	.word	0x652c6e62
 80020bc:	3eb1e26f 	.word	0x3eb1e26f
 80020c0:	53f7ced9 	.word	0x53f7ced9
 80020c4:	c04ca5e3 	.word	0xc04ca5e3
 80020c8:	20000190 	.word	0x20000190
 80020cc:	20000174 	.word	0x20000174
 80020d0:	20000194 	.word	0x20000194
 80020d4:	20000178 	.word	0x20000178
 80020d8:	20000198 	.word	0x20000198
 80020dc:	2000017c 	.word	0x2000017c
 80020e0:	40011000 	.word	0x40011000
 80020e4:	10624dd3 	.word	0x10624dd3
 80020e8:	20000244 	.word	0x20000244
 80020ec:	2000019c 	.word	0x2000019c
 80020f0:	200001a0 	.word	0x200001a0
 80020f4:	200001a4 	.word	0x200001a4
 80020f8:	20000180 	.word	0x20000180
 80020fc:	20000184 	.word	0x20000184
 8002100:	20000188 	.word	0x20000188
 8002104:	2000018c 	.word	0x2000018c
 8002108:	4a6f      	ldr	r2, [pc, #444]	; (80022c8 <main+0x668>)
 800210a:	6013      	str	r3, [r2, #0]
//	  angle_roll_acc -= -35.7;
//	  angle_pitch_acc -= 0.0;

	  //angle_pitch = angle_pitch * 0.9996 + angle_pitch_acc * 0.0004;

	  angle_roll = angle_roll * 0.9996 + angle_roll_acc * 0.0004;
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <main+0x66c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f981 	bl	8000418 <__aeabi_f2d>
 8002116:	a366      	add	r3, pc, #408	; (adr r3, 80022b0 <main+0x650>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe f9d4 	bl	80004c8 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4614      	mov	r4, r2
 8002126:	461d      	mov	r5, r3
 8002128:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <main+0x668>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f973 	bl	8000418 <__aeabi_f2d>
 8002132:	a361      	add	r3, pc, #388	; (adr r3, 80022b8 <main+0x658>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe f9c6 	bl	80004c8 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe f80a 	bl	800015c <__adddf3>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fc92 	bl	8000a78 <__aeabi_d2f>
 8002154:	4603      	mov	r3, r0
 8002156:	4a5d      	ldr	r2, [pc, #372]	; (80022cc <main+0x66c>)
 8002158:	6013      	str	r3, [r2, #0]

	  ////////////////////////////////////////////////////////////////////////////////
	  // PID controller
	  pid_error_temp = angle_roll - self_balance_pid_setpoint - pid_setpoint;
 800215a:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <main+0x66c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a5c      	ldr	r2, [pc, #368]	; (80022d0 <main+0x670>)
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fcdb 	bl	8000b20 <__aeabi_fsub>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	4b59      	ldr	r3, [pc, #356]	; (80022d4 <main+0x674>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f7fe fcd3 	bl	8000b20 <__aeabi_fsub>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <main+0x678>)
 8002180:	601a      	str	r2, [r3, #0]
	  if ( pid_output > 10 || pid_output < -10 ) pid_error_temp += pid_output * 0.015;
 8002182:	4b56      	ldr	r3, [pc, #344]	; (80022dc <main+0x67c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4956      	ldr	r1, [pc, #344]	; (80022e0 <main+0x680>)
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe ff8f 	bl	80010ac <__aeabi_fcmpgt>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d108      	bne.n	80021a6 <main+0x546>
 8002194:	4b51      	ldr	r3, [pc, #324]	; (80022dc <main+0x67c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4952      	ldr	r1, [pc, #328]	; (80022e4 <main+0x684>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe ff68 	bl	8001070 <__aeabi_fcmplt>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01f      	beq.n	80021e6 <main+0x586>
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <main+0x678>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f934 	bl	8000418 <__aeabi_f2d>
 80021b0:	4604      	mov	r4, r0
 80021b2:	460d      	mov	r5, r1
 80021b4:	4b49      	ldr	r3, [pc, #292]	; (80022dc <main+0x67c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f92d 	bl	8000418 <__aeabi_f2d>
 80021be:	a340      	add	r3, pc, #256	; (adr r3, 80022c0 <main+0x660>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe f980 	bl	80004c8 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4620      	mov	r0, r4
 80021ce:	4629      	mov	r1, r5
 80021d0:	f7fd ffc4 	bl	800015c <__adddf3>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7fe fc4c 	bl	8000a78 <__aeabi_d2f>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a3d      	ldr	r2, [pc, #244]	; (80022d8 <main+0x678>)
 80021e4:	6013      	str	r3, [r2, #0]
	  pid_i_mem += pid_i_gain * pid_error_temp;
 80021e6:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <main+0x688>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a3b      	ldr	r2, [pc, #236]	; (80022d8 <main+0x678>)
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe fd9f 	bl	8000d34 <__aeabi_fmul>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <main+0x68c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4610      	mov	r0, r2
 8002202:	f7fe fc8f 	bl	8000b24 <__addsf3>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	4b38      	ldr	r3, [pc, #224]	; (80022ec <main+0x68c>)
 800220c:	601a      	str	r2, [r3, #0]
	  if ( pid_i_mem > 400 ) pid_i_mem = 400;
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <main+0x68c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4937      	ldr	r1, [pc, #220]	; (80022f0 <main+0x690>)
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe ff49 	bl	80010ac <__aeabi_fcmpgt>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <main+0x5c8>
 8002220:	4b32      	ldr	r3, [pc, #200]	; (80022ec <main+0x68c>)
 8002222:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <main+0x690>)
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00b      	b.n	8002240 <main+0x5e0>
	  else if ( pid_i_mem < -400 ) pid_i_mem = -400;
 8002228:	4b30      	ldr	r3, [pc, #192]	; (80022ec <main+0x68c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4931      	ldr	r1, [pc, #196]	; (80022f4 <main+0x694>)
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe ff1e 	bl	8001070 <__aeabi_fcmplt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <main+0x5e0>
 800223a:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <main+0x68c>)
 800223c:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <main+0x694>)
 800223e:	601a      	str	r2, [r3, #0]
	  pid_output = pid_p_gain * pid_error_temp + pid_i_mem + pid_d_gain * (pid_error_temp - pid_last_d_error);
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <main+0x698>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <main+0x678>)
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fd72 	bl	8000d34 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <main+0x68c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f7fe fc62 	bl	8000b24 <__addsf3>
 8002260:	4603      	mov	r3, r0
 8002262:	461c      	mov	r4, r3
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <main+0x678>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a24      	ldr	r2, [pc, #144]	; (80022fc <main+0x69c>)
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fc56 	bl	8000b20 <__aeabi_fsub>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <main+0x6a0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7fe fd58 	bl	8000d34 <__aeabi_fmul>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	4620      	mov	r0, r4
 800228a:	f7fe fc4b 	bl	8000b24 <__addsf3>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <main+0x67c>)
 8002294:	601a      	str	r2, [r3, #0]
	  if ( pid_output > 400 )pid_output = 400;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <main+0x67c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4915      	ldr	r1, [pc, #84]	; (80022f0 <main+0x690>)
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe ff05 	bl	80010ac <__aeabi_fcmpgt>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02d      	beq.n	8002304 <main+0x6a4>
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <main+0x67c>)
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <main+0x690>)
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e035      	b.n	800231c <main+0x6bc>
 80022b0:	23a29c78 	.word	0x23a29c78
 80022b4:	3feffcb9 	.word	0x3feffcb9
 80022b8:	eb1c432d 	.word	0xeb1c432d
 80022bc:	3f3a36e2 	.word	0x3f3a36e2
 80022c0:	eb851eb8 	.word	0xeb851eb8
 80022c4:	3f8eb851 	.word	0x3f8eb851
 80022c8:	200001a8 	.word	0x200001a8
 80022cc:	200001a4 	.word	0x200001a4
 80022d0:	200001ac 	.word	0x200001ac
 80022d4:	200001b8 	.word	0x200001b8
 80022d8:	200001b0 	.word	0x200001b0
 80022dc:	200001bc 	.word	0x200001bc
 80022e0:	41200000 	.word	0x41200000
 80022e4:	c1200000 	.word	0xc1200000
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	200001b4 	.word	0x200001b4
 80022f0:	43c80000 	.word	0x43c80000
 80022f4:	c3c80000 	.word	0xc3c80000
 80022f8:	20000008 	.word	0x20000008
 80022fc:	200001c0 	.word	0x200001c0
 8002300:	20000010 	.word	0x20000010
	  else if ( pid_output < -400 )pid_output = -400;
 8002304:	4ba0      	ldr	r3, [pc, #640]	; (8002588 <main+0x928>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	49a0      	ldr	r1, [pc, #640]	; (800258c <main+0x92c>)
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe feb0 	bl	8001070 <__aeabi_fcmplt>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <main+0x6bc>
 8002316:	4b9c      	ldr	r3, [pc, #624]	; (8002588 <main+0x928>)
 8002318:	4a9c      	ldr	r2, [pc, #624]	; (800258c <main+0x92c>)
 800231a:	601a      	str	r2, [r3, #0]
	  pid_last_d_error = pid_error_temp;
 800231c:	4b9c      	ldr	r3, [pc, #624]	; (8002590 <main+0x930>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a9c      	ldr	r2, [pc, #624]	; (8002594 <main+0x934>)
 8002322:	6013      	str	r3, [r2, #0]
	  if ( pid_output < 5 && pid_output > -5 ) pid_output = 0;
 8002324:	4b98      	ldr	r3, [pc, #608]	; (8002588 <main+0x928>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	499b      	ldr	r1, [pc, #620]	; (8002598 <main+0x938>)
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe fea0 	bl	8001070 <__aeabi_fcmplt>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <main+0x6f0>
 8002336:	4b94      	ldr	r3, [pc, #592]	; (8002588 <main+0x928>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4998      	ldr	r1, [pc, #608]	; (800259c <main+0x93c>)
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe feb5 	bl	80010ac <__aeabi_fcmpgt>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <main+0x6f0>
 8002348:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <main+0x928>)
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
	  if ( angle_roll > 30 || angle_roll < -30 ){
 8002350:	4b93      	ldr	r3, [pc, #588]	; (80025a0 <main+0x940>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4993      	ldr	r1, [pc, #588]	; (80025a4 <main+0x944>)
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fea8 	bl	80010ac <__aeabi_fcmpgt>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <main+0x714>
 8002362:	4b8f      	ldr	r3, [pc, #572]	; (80025a0 <main+0x940>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4990      	ldr	r1, [pc, #576]	; (80025a8 <main+0x948>)
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe fe81 	bl	8001070 <__aeabi_fcmplt>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <main+0x72c>
		  pid_output =0;
 8002374:	4b84      	ldr	r3, [pc, #528]	; (8002588 <main+0x928>)
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
		  pid_i_mem = 0;
 800237c:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <main+0x94c>)
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
		  self_balance_pid_setpoint=0;
 8002384:	4b8a      	ldr	r3, [pc, #552]	; (80025b0 <main+0x950>)
 8002386:	f04f 0200 	mov.w	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
	  }
	  if(pid_setpoint == 0){                                                    //If the setpoint is zero degrees
 800238c:	4b89      	ldr	r3, [pc, #548]	; (80025b4 <main+0x954>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f04f 0100 	mov.w	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fe61 	bl	800105c <__aeabi_fcmpeq>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d039      	beq.n	8002414 <main+0x7b4>
	    if(pid_output < 0)self_balance_pid_setpoint += 0.0015;                  //Increase the self_balance_pid_setpoint if the robot is still moving forewards
 80023a0:	4b79      	ldr	r3, [pc, #484]	; (8002588 <main+0x928>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fe61 	bl	8001070 <__aeabi_fcmplt>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <main+0x77a>
 80023b4:	4b7e      	ldr	r3, [pc, #504]	; (80025b0 <main+0x950>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f82d 	bl	8000418 <__aeabi_f2d>
 80023be:	a36c      	add	r3, pc, #432	; (adr r3, 8002570 <main+0x910>)
 80023c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c4:	f7fd feca 	bl	800015c <__adddf3>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7fe fb52 	bl	8000a78 <__aeabi_d2f>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4a76      	ldr	r2, [pc, #472]	; (80025b0 <main+0x950>)
 80023d8:	6013      	str	r3, [r2, #0]
	    if(pid_output > 0)self_balance_pid_setpoint -= 0.0015;                  //Decrease the self_balance_pid_setpoint if the robot is still moving backwards
 80023da:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <main+0x928>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fe62 	bl	80010ac <__aeabi_fcmpgt>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d012      	beq.n	8002414 <main+0x7b4>
 80023ee:	4b70      	ldr	r3, [pc, #448]	; (80025b0 <main+0x950>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe f810 	bl	8000418 <__aeabi_f2d>
 80023f8:	a35d      	add	r3, pc, #372	; (adr r3, 8002570 <main+0x910>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fd feab 	bl	8000158 <__aeabi_dsub>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f7fe fb35 	bl	8000a78 <__aeabi_d2f>
 800240e:	4603      	mov	r3, r0
 8002410:	4a67      	ldr	r2, [pc, #412]	; (80025b0 <main+0x950>)
 8002412:	6013      	str	r3, [r2, #0]
	  }

	  ///////////////////////////////////////////////////////////////
	  // Remote
	  pid_output_left = pid_output;
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <main+0x928>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <main+0x958>)
 800241a:	6013      	str	r3, [r2, #0]
	  pid_output_right = pid_output;
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <main+0x928>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a66      	ldr	r2, [pc, #408]	; (80025bc <main+0x95c>)
 8002422:	6013      	str	r3, [r2, #0]


	  if ( received_byte[0] & 0b00000001 ){
 8002424:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <main+0x960>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b00      	cmp	r3, #0
 800242e:	d017      	beq.n	8002460 <main+0x800>
		  pid_output_left += turning_speed;
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <main+0x958>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <main+0x964>)
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fb72 	bl	8000b24 <__addsf3>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <main+0x958>)
 8002446:	601a      	str	r2, [r3, #0]
		  pid_output_right -= turning_speed;
 8002448:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <main+0x95c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a5d      	ldr	r2, [pc, #372]	; (80025c4 <main+0x964>)
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fb64 	bl	8000b20 <__aeabi_fsub>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	4b57      	ldr	r3, [pc, #348]	; (80025bc <main+0x95c>)
 800245e:	601a      	str	r2, [r3, #0]
	  }
	  if ( received_byte[0] & 0b00000010 ){
 8002460:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <main+0x960>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d017      	beq.n	800249c <main+0x83c>
		  pid_output_left -= turning_speed;
 800246c:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <main+0x958>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <main+0x964>)
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	4611      	mov	r1, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fb52 	bl	8000b20 <__aeabi_fsub>
 800247c:	4603      	mov	r3, r0
 800247e:	461a      	mov	r2, r3
 8002480:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <main+0x958>)
 8002482:	601a      	str	r2, [r3, #0]
		  pid_output_right += turning_speed;
 8002484:	4b4d      	ldr	r3, [pc, #308]	; (80025bc <main+0x95c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <main+0x964>)
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fb48 	bl	8000b24 <__addsf3>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4b48      	ldr	r3, [pc, #288]	; (80025bc <main+0x95c>)
 800249a:	601a      	str	r2, [r3, #0]
	  }
	  if ( received_byte[0] & 0b00000100 ){
 800249c:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <main+0x960>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03b      	beq.n	8002520 <main+0x8c0>
		  if ( pid_setpoint > -2.5 )pid_setpoint -=0.05;
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <main+0x954>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4946      	ldr	r1, [pc, #280]	; (80025c8 <main+0x968>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fdfc 	bl	80010ac <__aeabi_fcmpgt>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d012      	beq.n	80024e0 <main+0x880>
 80024ba:	4b3e      	ldr	r3, [pc, #248]	; (80025b4 <main+0x954>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd ffaa 	bl	8000418 <__aeabi_f2d>
 80024c4:	a32c      	add	r3, pc, #176	; (adr r3, 8002578 <main+0x918>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fd fe45 	bl	8000158 <__aeabi_dsub>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe facf 	bl	8000a78 <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a35      	ldr	r2, [pc, #212]	; (80025b4 <main+0x954>)
 80024de:	6013      	str	r3, [r2, #0]
		  if ( pid_output > max_target_speed*-1)pid_setpoint -=0.005;
 80024e0:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <main+0x96c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024e8:	4a27      	ldr	r2, [pc, #156]	; (8002588 <main+0x928>)
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fdbe 	bl	8001070 <__aeabi_fcmplt>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d012      	beq.n	8002520 <main+0x8c0>
 80024fa:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <main+0x954>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fd ff8a 	bl	8000418 <__aeabi_f2d>
 8002504:	a31e      	add	r3, pc, #120	; (adr r3, 8002580 <main+0x920>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fd fe25 	bl	8000158 <__aeabi_dsub>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe faaf 	bl	8000a78 <__aeabi_d2f>
 800251a:	4603      	mov	r3, r0
 800251c:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <main+0x954>)
 800251e:	6013      	str	r3, [r2, #0]
	  }
	  if ( received_byte[0] & 0b00001000 ){
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <main+0x960>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d06c      	beq.n	8002606 <main+0x9a6>
		  if ( pid_setpoint < 2.5 ) pid_setpoint +=0.05;
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <main+0x954>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4927      	ldr	r1, [pc, #156]	; (80025d0 <main+0x970>)
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd9c 	bl	8001070 <__aeabi_fcmplt>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d012      	beq.n	8002564 <main+0x904>
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <main+0x954>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ff68 	bl	8000418 <__aeabi_f2d>
 8002548:	a30b      	add	r3, pc, #44	; (adr r3, 8002578 <main+0x918>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fd fe05 	bl	800015c <__adddf3>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fa8d 	bl	8000a78 <__aeabi_d2f>
 800255e:	4603      	mov	r3, r0
 8002560:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <main+0x954>)
 8002562:	6013      	str	r3, [r2, #0]
		  if ( pid_output < max_target_speed )pid_setpoint +=0.005;
 8002564:	4b08      	ldr	r3, [pc, #32]	; (8002588 <main+0x928>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a18      	ldr	r2, [pc, #96]	; (80025cc <main+0x96c>)
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4611      	mov	r1, r2
 800256e:	e031      	b.n	80025d4 <main+0x974>
 8002570:	bc6a7efa 	.word	0xbc6a7efa
 8002574:	3f589374 	.word	0x3f589374
 8002578:	9999999a 	.word	0x9999999a
 800257c:	3fa99999 	.word	0x3fa99999
 8002580:	47ae147b 	.word	0x47ae147b
 8002584:	3f747ae1 	.word	0x3f747ae1
 8002588:	200001bc 	.word	0x200001bc
 800258c:	c3c80000 	.word	0xc3c80000
 8002590:	200001b0 	.word	0x200001b0
 8002594:	200001c0 	.word	0x200001c0
 8002598:	40a00000 	.word	0x40a00000
 800259c:	c0a00000 	.word	0xc0a00000
 80025a0:	200001a4 	.word	0x200001a4
 80025a4:	41f00000 	.word	0x41f00000
 80025a8:	c1f00000 	.word	0xc1f00000
 80025ac:	200001b4 	.word	0x200001b4
 80025b0:	200001ac 	.word	0x200001ac
 80025b4:	200001b8 	.word	0x200001b8
 80025b8:	200001c4 	.word	0x200001c4
 80025bc:	200001c8 	.word	0x200001c8
 80025c0:	20000170 	.word	0x20000170
 80025c4:	20000014 	.word	0x20000014
 80025c8:	c0200000 	.word	0xc0200000
 80025cc:	20000018 	.word	0x20000018
 80025d0:	40200000 	.word	0x40200000
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fd4b 	bl	8001070 <__aeabi_fcmplt>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <main+0x9a6>
 80025e0:	4b9f      	ldr	r3, [pc, #636]	; (8002860 <main+0xc00>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ff17 	bl	8000418 <__aeabi_f2d>
 80025ea:	a399      	add	r3, pc, #612	; (adr r3, 8002850 <main+0xbf0>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fd fdb4 	bl	800015c <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe fa3c 	bl	8000a78 <__aeabi_d2f>
 8002600:	4603      	mov	r3, r0
 8002602:	4a97      	ldr	r2, [pc, #604]	; (8002860 <main+0xc00>)
 8002604:	6013      	str	r3, [r2, #0]
	  }
	  if ( !(received_byte[0] & 0b00001100 ) ){
 8002606:	4b97      	ldr	r3, [pc, #604]	; (8002864 <main+0xc04>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b00      	cmp	r3, #0
 8002610:	d13f      	bne.n	8002692 <main+0xa32>
		  if ( pid_setpoint > 0.5 ) pid_setpoint -=0.05;
 8002612:	4b93      	ldr	r3, [pc, #588]	; (8002860 <main+0xc00>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fd46 	bl	80010ac <__aeabi_fcmpgt>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d013      	beq.n	800264e <main+0x9ee>
 8002626:	4b8e      	ldr	r3, [pc, #568]	; (8002860 <main+0xc00>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fef4 	bl	8000418 <__aeabi_f2d>
 8002630:	a389      	add	r3, pc, #548	; (adr r3, 8002858 <main+0xbf8>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	f7fd fd8f 	bl	8000158 <__aeabi_dsub>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fa19 	bl	8000a78 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4a85      	ldr	r2, [pc, #532]	; (8002860 <main+0xc00>)
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	e021      	b.n	8002692 <main+0xa32>
		  else if ( pid_setpoint < -0.5 ) pid_setpoint +=0.05;
 800264e:	4b84      	ldr	r3, [pc, #528]	; (8002860 <main+0xc00>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fd0a 	bl	8001070 <__aeabi_fcmplt>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d013      	beq.n	800268a <main+0xa2a>
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <main+0xc00>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fed6 	bl	8000418 <__aeabi_f2d>
 800266c:	a37a      	add	r3, pc, #488	; (adr r3, 8002858 <main+0xbf8>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd fd73 	bl	800015c <__adddf3>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe f9fb 	bl	8000a78 <__aeabi_d2f>
 8002682:	4603      	mov	r3, r0
 8002684:	4a76      	ldr	r2, [pc, #472]	; (8002860 <main+0xc00>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e003      	b.n	8002692 <main+0xa32>
		  else pid_setpoint =0;
 800268a:	4b75      	ldr	r3, [pc, #468]	; (8002860 <main+0xc00>)
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
	  }
	  ///////////////////////////////////////////////////////////////////
	  // Add these lines to make stepper run in linear

	  if ( pid_output_left > 0 )pid_output_left = 405 - (1/(pid_output_left +9)) * 5500;
 8002692:	4b75      	ldr	r3, [pc, #468]	; (8002868 <main+0xc08>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fd06 	bl	80010ac <__aeabi_fcmpgt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01a      	beq.n	80026dc <main+0xa7c>
 80026a6:	4b70      	ldr	r3, [pc, #448]	; (8002868 <main+0xc08>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4970      	ldr	r1, [pc, #448]	; (800286c <main+0xc0c>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fa39 	bl	8000b24 <__addsf3>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80026ba:	f7fe fbef 	bl	8000e9c <__aeabi_fdiv>
 80026be:	4603      	mov	r3, r0
 80026c0:	496b      	ldr	r1, [pc, #428]	; (8002870 <main+0xc10>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fb36 	bl	8000d34 <__aeabi_fmul>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4869      	ldr	r0, [pc, #420]	; (8002874 <main+0xc14>)
 80026ce:	f7fe fa27 	bl	8000b20 <__aeabi_fsub>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b64      	ldr	r3, [pc, #400]	; (8002868 <main+0xc08>)
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e023      	b.n	8002724 <main+0xac4>
	  else if(pid_output_left < 0)pid_output_left = -405 - (1/(pid_output_left - 9)) * 5500;
 80026dc:	4b62      	ldr	r3, [pc, #392]	; (8002868 <main+0xc08>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f04f 0100 	mov.w	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fcc3 	bl	8001070 <__aeabi_fcmplt>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d019      	beq.n	8002724 <main+0xac4>
 80026f0:	4b5d      	ldr	r3, [pc, #372]	; (8002868 <main+0xc08>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	495d      	ldr	r1, [pc, #372]	; (800286c <main+0xc0c>)
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fa12 	bl	8000b20 <__aeabi_fsub>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4619      	mov	r1, r3
 8002700:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002704:	f7fe fbca 	bl	8000e9c <__aeabi_fdiv>
 8002708:	4603      	mov	r3, r0
 800270a:	4959      	ldr	r1, [pc, #356]	; (8002870 <main+0xc10>)
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fb11 	bl	8000d34 <__aeabi_fmul>
 8002712:	4603      	mov	r3, r0
 8002714:	4619      	mov	r1, r3
 8002716:	4858      	ldr	r0, [pc, #352]	; (8002878 <main+0xc18>)
 8002718:	f7fe fa02 	bl	8000b20 <__aeabi_fsub>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	4b51      	ldr	r3, [pc, #324]	; (8002868 <main+0xc08>)
 8002722:	601a      	str	r2, [r3, #0]

	  if(pid_output_right > 0)pid_output_right = 405 - (1/(pid_output_right + 9)) * 5500;
 8002724:	4b55      	ldr	r3, [pc, #340]	; (800287c <main+0xc1c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f7fe fcbd 	bl	80010ac <__aeabi_fcmpgt>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01a      	beq.n	800276e <main+0xb0e>
 8002738:	4b50      	ldr	r3, [pc, #320]	; (800287c <main+0xc1c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	494b      	ldr	r1, [pc, #300]	; (800286c <main+0xc0c>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe f9f0 	bl	8000b24 <__addsf3>
 8002744:	4603      	mov	r3, r0
 8002746:	4619      	mov	r1, r3
 8002748:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800274c:	f7fe fba6 	bl	8000e9c <__aeabi_fdiv>
 8002750:	4603      	mov	r3, r0
 8002752:	4947      	ldr	r1, [pc, #284]	; (8002870 <main+0xc10>)
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe faed 	bl	8000d34 <__aeabi_fmul>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	4845      	ldr	r0, [pc, #276]	; (8002874 <main+0xc14>)
 8002760:	f7fe f9de 	bl	8000b20 <__aeabi_fsub>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b44      	ldr	r3, [pc, #272]	; (800287c <main+0xc1c>)
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e023      	b.n	80027b6 <main+0xb56>
	  else if(pid_output_right < 0)pid_output_right = -405 - (1/(pid_output_right - 9)) * 5500;
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <main+0xc1c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fc7a 	bl	8001070 <__aeabi_fcmplt>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d019      	beq.n	80027b6 <main+0xb56>
 8002782:	4b3e      	ldr	r3, [pc, #248]	; (800287c <main+0xc1c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4939      	ldr	r1, [pc, #228]	; (800286c <main+0xc0c>)
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe f9c9 	bl	8000b20 <__aeabi_fsub>
 800278e:	4603      	mov	r3, r0
 8002790:	4619      	mov	r1, r3
 8002792:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002796:	f7fe fb81 	bl	8000e9c <__aeabi_fdiv>
 800279a:	4603      	mov	r3, r0
 800279c:	4934      	ldr	r1, [pc, #208]	; (8002870 <main+0xc10>)
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fac8 	bl	8000d34 <__aeabi_fmul>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4619      	mov	r1, r3
 80027a8:	4833      	ldr	r0, [pc, #204]	; (8002878 <main+0xc18>)
 80027aa:	f7fe f9b9 	bl	8000b20 <__aeabi_fsub>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b32      	ldr	r3, [pc, #200]	; (800287c <main+0xc1c>)
 80027b4:	601a      	str	r2, [r3, #0]

	  /////////////////////////////////////////////////////////////////////


	  //Calculate the needed pulse time for the left and right stepper motor controllers
	  if(pid_output_left > 0)left_motor = 400 - pid_output_left;
 80027b6:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <main+0xc08>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fc74 	bl	80010ac <__aeabi_fcmpgt>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00d      	beq.n	80027e6 <main+0xb86>
 80027ca:	4b27      	ldr	r3, [pc, #156]	; (8002868 <main+0xc08>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	482b      	ldr	r0, [pc, #172]	; (8002880 <main+0xc20>)
 80027d2:	f7fe f9a5 	bl	8000b20 <__aeabi_fsub>
 80027d6:	4603      	mov	r3, r0
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe fc71 	bl	80010c0 <__aeabi_f2iz>
 80027de:	4603      	mov	r3, r0
 80027e0:	4a28      	ldr	r2, [pc, #160]	; (8002884 <main+0xc24>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e01a      	b.n	800281c <main+0xbbc>
	  else if(pid_output_left < 0)left_motor = -400 - pid_output_left;
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <main+0xc08>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fc3e 	bl	8001070 <__aeabi_fcmplt>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <main+0xbb6>
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <main+0xc08>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	4821      	ldr	r0, [pc, #132]	; (8002888 <main+0xc28>)
 8002802:	f7fe f98d 	bl	8000b20 <__aeabi_fsub>
 8002806:	4603      	mov	r3, r0
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fc59 	bl	80010c0 <__aeabi_f2iz>
 800280e:	4603      	mov	r3, r0
 8002810:	4a1c      	ldr	r2, [pc, #112]	; (8002884 <main+0xc24>)
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	e002      	b.n	800281c <main+0xbbc>
	  else left_motor = 0;
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <main+0xc24>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]


	  if(pid_output_right > 0)right_motor = 400 - pid_output_right;
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <main+0xc1c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fc41 	bl	80010ac <__aeabi_fcmpgt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02f      	beq.n	8002890 <main+0xc30>
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <main+0xc1c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	4812      	ldr	r0, [pc, #72]	; (8002880 <main+0xc20>)
 8002838:	f7fe f972 	bl	8000b20 <__aeabi_fsub>
 800283c:	4603      	mov	r3, r0
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fc3e 	bl	80010c0 <__aeabi_f2iz>
 8002844:	4603      	mov	r3, r0
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <main+0xc2c>)
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e03c      	b.n	80028c6 <main+0xc66>
 800284c:	f3af 8000 	nop.w
 8002850:	47ae147b 	.word	0x47ae147b
 8002854:	3f747ae1 	.word	0x3f747ae1
 8002858:	9999999a 	.word	0x9999999a
 800285c:	3fa99999 	.word	0x3fa99999
 8002860:	200001b8 	.word	0x200001b8
 8002864:	20000170 	.word	0x20000170
 8002868:	200001c4 	.word	0x200001c4
 800286c:	41100000 	.word	0x41100000
 8002870:	45abe000 	.word	0x45abe000
 8002874:	43ca8000 	.word	0x43ca8000
 8002878:	c3ca8000 	.word	0xc3ca8000
 800287c:	200001c8 	.word	0x200001c8
 8002880:	43c80000 	.word	0x43c80000
 8002884:	200001cc 	.word	0x200001cc
 8002888:	c3c80000 	.word	0xc3c80000
 800288c:	200001dc 	.word	0x200001dc
	  else if(pid_output_right < 0)right_motor = -400 - pid_output_right;
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <main+0xc9c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe fbe9 	bl	8001070 <__aeabi_fcmplt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00d      	beq.n	80028c0 <main+0xc60>
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <main+0xc9c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	4815      	ldr	r0, [pc, #84]	; (8002900 <main+0xca0>)
 80028ac:	f7fe f938 	bl	8000b20 <__aeabi_fsub>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fc04 	bl	80010c0 <__aeabi_f2iz>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <main+0xca4>)
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e002      	b.n	80028c6 <main+0xc66>
	  else right_motor = 0;
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <main+0xca4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

	  throttle_left_motor = left_motor;
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <main+0xca8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <main+0xcac>)
 80028cc:	6013      	str	r3, [r2, #0]
	  throttle_right_motor = right_motor;
 80028ce:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <main+0xca4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <main+0xcb0>)
 80028d4:	6013      	str	r3, [r2, #0]


	  while ( __HAL_TIM_GET_COUNTER(&htim4) - loop_timer < 4000 );
 80028d6:	bf00      	nop
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <main+0xcb4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <main+0xcb8>)
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80028e8:	d3f6      	bcc.n	80028d8 <main+0xc78>
	  loop_timer = __HAL_TIM_GET_COUNTER(&htim4);
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <main+0xcb4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <main+0xcb8>)
 80028f4:	601a      	str	r2, [r3, #0]
	  read_mpu_6050_data();
 80028f6:	f7ff bac7 	b.w	8001e88 <main+0x228>
 80028fa:	bf00      	nop
 80028fc:	200001c8 	.word	0x200001c8
 8002900:	c3c80000 	.word	0xc3c80000
 8002904:	200001dc 	.word	0x200001dc
 8002908:	200001cc 	.word	0x200001cc
 800290c:	200001d0 	.word	0x200001d0
 8002910:	200001e0 	.word	0x200001e0
 8002914:	20000244 	.word	0x20000244
 8002918:	2000019c 	.word	0x2000019c

0800291c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b090      	sub	sp, #64	; 0x40
 8002920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	2228      	movs	r2, #40	; 0x28
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f003 f916 	bl	8005b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800294c:	2301      	movs	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002950:	2302      	movs	r3, #2
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002958:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800295a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800295e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fc9b 	bl	80042a0 <HAL_RCC_OscConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002970:	f000 f819 	bl	80029a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002974:	230f      	movs	r3, #15
 8002976:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002978:	2302      	movs	r3, #2
 800297a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2102      	movs	r1, #2
 800298e:	4618      	mov	r0, r3
 8002990:	f001 ff08 	bl	80047a4 <HAL_RCC_ClockConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800299a:	f000 f804 	bl	80029a6 <Error_Handler>
  }
}
 800299e:	bf00      	nop
 80029a0:	3740      	adds	r7, #64	; 0x40
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029aa:	b672      	cpsid	i
}
 80029ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029ae:	e7fe      	b.n	80029ae <Error_Handler+0x8>

080029b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029b4:	4b17      	ldr	r3, [pc, #92]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029b6:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <MX_SPI1_Init+0x68>)
 80029b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029c8:	4b12      	ldr	r3, [pc, #72]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029e4:	2228      	movs	r2, #40	; 0x28
 80029e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_SPI1_Init+0x64>)
 80029fc:	220a      	movs	r2, #10
 80029fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <MX_SPI1_Init+0x64>)
 8002a02:	f002 f853 	bl	8004aac <HAL_SPI_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a0c:	f7ff ffcb 	bl	80029a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	200001ec 	.word	0x200001ec
 8002a18:	40013000 	.word	0x40013000

08002a1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_SPI_MspInit+0x88>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d12f      	bne.n	8002a9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a46:	6193      	str	r3, [r2, #24]
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a5a:	f043 0304 	orr.w	r3, r3, #4
 8002a5e:	6193      	str	r3, [r2, #24]
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_SPI_MspInit+0x8c>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a6c:	23a0      	movs	r3, #160	; 0xa0
 8002a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480b      	ldr	r0, [pc, #44]	; (8002aac <HAL_SPI_MspInit+0x90>)
 8002a80:	f000 fa72 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a84:	2340      	movs	r3, #64	; 0x40
 8002a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	4619      	mov	r1, r3
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <HAL_SPI_MspInit+0x90>)
 8002a98:	f000 fa66 	bl	8002f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40013000 	.word	0x40013000
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010800 	.word	0x40010800

08002ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_MspInit+0x5c>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6193      	str	r3, [r2, #24]
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_MspInit+0x5c>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	61d3      	str	r3, [r2, #28]
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_MspInit+0x5c>)
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_MspInit+0x60>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_MspInit+0x60>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40010000 	.word	0x40010000

08002b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <NMI_Handler+0x4>

08002b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <HardFault_Handler+0x4>

08002b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <MemManage_Handler+0x4>

08002b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b2a:	e7fe      	b.n	8002b2a <BusFault_Handler+0x4>

08002b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b30:	e7fe      	b.n	8002b30 <UsageFault_Handler+0x4>

08002b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b32:	b480      	push	{r7}
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5a:	f000 f8e1 	bl	8002d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
	...

08002b70 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
 8002b80:	609a      	str	r2, [r3, #8]
 8002b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b84:	463b      	mov	r3, r7
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002b8e:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <MX_TIM4_Init+0x98>)
 8002b90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002b94:	2248      	movs	r2, #72	; 0x48
 8002b96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bac:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002bb2:	4814      	ldr	r0, [pc, #80]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bb4:	f002 fce6 	bl	8005584 <HAL_TIM_Base_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002bbe:	f7ff fef2 	bl	80029a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002bc8:	f107 0308 	add.w	r3, r7, #8
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480d      	ldr	r0, [pc, #52]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bd0:	f002 fd72 	bl	80056b8 <HAL_TIM_ConfigClockSource>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002bda:	f7ff fee4 	bl	80029a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002be6:	463b      	mov	r3, r7
 8002be8:	4619      	mov	r1, r3
 8002bea:	4806      	ldr	r0, [pc, #24]	; (8002c04 <MX_TIM4_Init+0x94>)
 8002bec:	f002 ff20 	bl	8005a30 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002bf6:	f7ff fed6 	bl	80029a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000244 	.word	0x20000244
 8002c08:	40000800 	.word	0x40000800

08002c0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_TIM_Base_MspInit+0x34>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10b      	bne.n	8002c36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_TIM_Base_MspInit+0x38>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <HAL_TIM_Base_MspInit+0x38>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	61d3      	str	r3, [r2, #28]
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_TIM_Base_MspInit+0x38>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40021000 	.word	0x40021000

08002c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c4a:	e003      	b.n	8002c54 <LoopCopyDataInit>

08002c4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c52:	3104      	adds	r1, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c54:	480a      	ldr	r0, [pc, #40]	; (8002c80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c5c:	d3f6      	bcc.n	8002c4c <CopyDataInit>
  ldr r2, =_sbss
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	; (8002c88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c60:	e002      	b.n	8002c68 <LoopFillZerobss>

08002c62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c64:	f842 3b04 	str.w	r3, [r2], #4

08002c68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c6c:	d3f9      	bcc.n	8002c62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c6e:	f7ff ff78 	bl	8002b62 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c72:	f002 ff41 	bl	8005af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c76:	f7fe fff3 	bl	8001c60 <main>
  bx lr
 8002c7a:	4770      	bx	lr
  ldr r3, =_sidata
 8002c7c:	08007398 	.word	0x08007398
  ldr r0, =_sdata
 8002c80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c84:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 8002c88:	20000090 	.word	0x20000090
  ldr r3, = _ebss
 8002c8c:	20000290 	.word	0x20000290

08002c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c90:	e7fe      	b.n	8002c90 <ADC1_2_IRQHandler>
	...

08002c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <HAL_Init+0x28>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <HAL_Init+0x28>)
 8002c9e:	f043 0310 	orr.w	r3, r3, #16
 8002ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f000 f92b 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f000 f808 	bl	8002cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb0:	f7ff fefe 	bl	8002ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x54>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x58>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f935 	bl	8002f4e <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f000 f90b 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d00:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_InitTick+0x5c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	2000001c 	.word	0x2000001c
 8002d18:	20000024 	.word	0x20000024
 8002d1c:	20000020 	.word	0x20000020

08002d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_IncTick+0x1c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_IncTick+0x20>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_IncTick+0x20>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000024 	.word	0x20000024
 8002d40:	2000028c 	.word	0x2000028c

08002d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <HAL_GetTick+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	2000028c 	.word	0x2000028c

08002d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d60:	f7ff fff0 	bl	8002d44 <HAL_GetTick>
 8002d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d70:	d005      	beq.n	8002d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <HAL_Delay+0x44>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d7e:	bf00      	nop
 8002d80:	f7ff ffe0 	bl	8002d44 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d8f7      	bhi.n	8002d80 <HAL_Delay+0x28>
  {
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000024 	.word	0x20000024

08002da0 <__NVIC_SetPriorityGrouping>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_GetPriorityGrouping>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__NVIC_GetPriorityGrouping+0x18>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 0307 	and.w	r3, r3, #7
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	db0a      	blt.n	8002e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	490c      	ldr	r1, [pc, #48]	; (8002e50 <__NVIC_SetPriority+0x4c>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	0112      	lsls	r2, r2, #4
 8002e24:	b2d2      	uxtb	r2, r2
 8002e26:	440b      	add	r3, r1
 8002e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e2c:	e00a      	b.n	8002e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4908      	ldr	r1, [pc, #32]	; (8002e54 <__NVIC_SetPriority+0x50>)
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	440b      	add	r3, r1
 8002e42:	761a      	strb	r2, [r3, #24]
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f1c3 0307 	rsb	r3, r3, #7
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	bf28      	it	cs
 8002e76:	2304      	movcs	r3, #4
 8002e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d902      	bls.n	8002e88 <NVIC_EncodePriority+0x30>
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3b03      	subs	r3, #3
 8002e86:	e000      	b.n	8002e8a <NVIC_EncodePriority+0x32>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	4313      	orrs	r3, r2
         );
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f7ff ff90 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff49 	bl	8002da0 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff5e 	bl	8002de8 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff90 	bl	8002e58 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5f 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ffb0 	bl	8002ebc <SysTick_Config>
 8002f5c:	4603      	mov	r3, r0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b08b      	sub	sp, #44	; 0x2c
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	e169      	b.n	8003250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f040 8158 	bne.w	800324a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a9a      	ldr	r2, [pc, #616]	; (8003208 <HAL_GPIO_Init+0x2a0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d05e      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fa4:	4a98      	ldr	r2, [pc, #608]	; (8003208 <HAL_GPIO_Init+0x2a0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d875      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002faa:	4a98      	ldr	r2, [pc, #608]	; (800320c <HAL_GPIO_Init+0x2a4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d058      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fb0:	4a96      	ldr	r2, [pc, #600]	; (800320c <HAL_GPIO_Init+0x2a4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d86f      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fb6:	4a96      	ldr	r2, [pc, #600]	; (8003210 <HAL_GPIO_Init+0x2a8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d052      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fbc:	4a94      	ldr	r2, [pc, #592]	; (8003210 <HAL_GPIO_Init+0x2a8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d869      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fc2:	4a94      	ldr	r2, [pc, #592]	; (8003214 <HAL_GPIO_Init+0x2ac>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d04c      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fc8:	4a92      	ldr	r2, [pc, #584]	; (8003214 <HAL_GPIO_Init+0x2ac>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d863      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fce:	4a92      	ldr	r2, [pc, #584]	; (8003218 <HAL_GPIO_Init+0x2b0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d046      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fd4:	4a90      	ldr	r2, [pc, #576]	; (8003218 <HAL_GPIO_Init+0x2b0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d85d      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fda:	2b12      	cmp	r3, #18
 8002fdc:	d82a      	bhi.n	8003034 <HAL_GPIO_Init+0xcc>
 8002fde:	2b12      	cmp	r3, #18
 8002fe0:	d859      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <HAL_GPIO_Init+0x80>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08003063 	.word	0x08003063
 8002fec:	0800303d 	.word	0x0800303d
 8002ff0:	0800304f 	.word	0x0800304f
 8002ff4:	08003091 	.word	0x08003091
 8002ff8:	08003097 	.word	0x08003097
 8002ffc:	08003097 	.word	0x08003097
 8003000:	08003097 	.word	0x08003097
 8003004:	08003097 	.word	0x08003097
 8003008:	08003097 	.word	0x08003097
 800300c:	08003097 	.word	0x08003097
 8003010:	08003097 	.word	0x08003097
 8003014:	08003097 	.word	0x08003097
 8003018:	08003097 	.word	0x08003097
 800301c:	08003097 	.word	0x08003097
 8003020:	08003097 	.word	0x08003097
 8003024:	08003097 	.word	0x08003097
 8003028:	08003097 	.word	0x08003097
 800302c:	08003045 	.word	0x08003045
 8003030:	08003059 	.word	0x08003059
 8003034:	4a79      	ldr	r2, [pc, #484]	; (800321c <HAL_GPIO_Init+0x2b4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800303a:	e02c      	b.n	8003096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	623b      	str	r3, [r7, #32]
          break;
 8003042:	e029      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	3304      	adds	r3, #4
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e024      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	3308      	adds	r3, #8
 8003054:	623b      	str	r3, [r7, #32]
          break;
 8003056:	e01f      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	330c      	adds	r3, #12
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	e01a      	b.n	8003098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800306a:	2304      	movs	r3, #4
 800306c:	623b      	str	r3, [r7, #32]
          break;
 800306e:	e013      	b.n	8003098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003078:	2308      	movs	r3, #8
 800307a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	611a      	str	r2, [r3, #16]
          break;
 8003082:	e009      	b.n	8003098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003084:	2308      	movs	r3, #8
 8003086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	615a      	str	r2, [r3, #20]
          break;
 800308e:	e003      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e000      	b.n	8003098 <HAL_GPIO_Init+0x130>
          break;
 8003096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2bff      	cmp	r3, #255	; 0xff
 800309c:	d801      	bhi.n	80030a2 <HAL_GPIO_Init+0x13a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	e001      	b.n	80030a6 <HAL_GPIO_Init+0x13e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2bff      	cmp	r3, #255	; 0xff
 80030ac:	d802      	bhi.n	80030b4 <HAL_GPIO_Init+0x14c>
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	e002      	b.n	80030ba <HAL_GPIO_Init+0x152>
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	3b08      	subs	r3, #8
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	210f      	movs	r1, #15
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	401a      	ands	r2, r3
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	431a      	orrs	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80b1 	beq.w	800324a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030e8:	4b4d      	ldr	r3, [pc, #308]	; (8003220 <HAL_GPIO_Init+0x2b8>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_GPIO_Init+0x2b8>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b4a      	ldr	r3, [pc, #296]	; (8003220 <HAL_GPIO_Init+0x2b8>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003100:	4a48      	ldr	r2, [pc, #288]	; (8003224 <HAL_GPIO_Init+0x2bc>)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a40      	ldr	r2, [pc, #256]	; (8003228 <HAL_GPIO_Init+0x2c0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <HAL_GPIO_Init+0x1ec>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3f      	ldr	r2, [pc, #252]	; (800322c <HAL_GPIO_Init+0x2c4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00d      	beq.n	8003150 <HAL_GPIO_Init+0x1e8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3e      	ldr	r2, [pc, #248]	; (8003230 <HAL_GPIO_Init+0x2c8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <HAL_GPIO_Init+0x1e4>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3d      	ldr	r2, [pc, #244]	; (8003234 <HAL_GPIO_Init+0x2cc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_GPIO_Init+0x1e0>
 8003144:	2303      	movs	r3, #3
 8003146:	e006      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 8003148:	2304      	movs	r3, #4
 800314a:	e004      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 800314c:	2302      	movs	r3, #2
 800314e:	e002      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 8003154:	2300      	movs	r3, #0
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	f002 0203 	and.w	r2, r2, #3
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	4093      	lsls	r3, r2
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003166:	492f      	ldr	r1, [pc, #188]	; (8003224 <HAL_GPIO_Init+0x2bc>)
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d006      	beq.n	800318e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003180:	4b2d      	ldr	r3, [pc, #180]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	492c      	ldr	r1, [pc, #176]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800318e:	4b2a      	ldr	r3, [pc, #168]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	43db      	mvns	r3, r3
 8003196:	4928      	ldr	r1, [pc, #160]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 8003198:	4013      	ands	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031a8:	4b23      	ldr	r3, [pc, #140]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4922      	ldr	r1, [pc, #136]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	e006      	b.n	80031c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	43db      	mvns	r3, r3
 80031be:	491e      	ldr	r1, [pc, #120]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031d0:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4918      	ldr	r1, [pc, #96]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	4914      	ldr	r1, [pc, #80]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d021      	beq.n	800323c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <HAL_GPIO_Init+0x2d0>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	60cb      	str	r3, [r1, #12]
 8003204:	e021      	b.n	800324a <HAL_GPIO_Init+0x2e2>
 8003206:	bf00      	nop
 8003208:	10320000 	.word	0x10320000
 800320c:	10310000 	.word	0x10310000
 8003210:	10220000 	.word	0x10220000
 8003214:	10210000 	.word	0x10210000
 8003218:	10120000 	.word	0x10120000
 800321c:	10110000 	.word	0x10110000
 8003220:	40021000 	.word	0x40021000
 8003224:	40010000 	.word	0x40010000
 8003228:	40010800 	.word	0x40010800
 800322c:	40010c00 	.word	0x40010c00
 8003230:	40011000 	.word	0x40011000
 8003234:	40011400 	.word	0x40011400
 8003238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_GPIO_Init+0x304>)
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	43db      	mvns	r3, r3
 8003244:	4909      	ldr	r1, [pc, #36]	; (800326c <HAL_GPIO_Init+0x304>)
 8003246:	4013      	ands	r3, r2
 8003248:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	3301      	adds	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	f47f ae8e 	bne.w	8002f7c <HAL_GPIO_Init+0x14>
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	372c      	adds	r7, #44	; 0x2c
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
 800327c:	4613      	mov	r3, r2
 800327e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800328c:	e003      	b.n	8003296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e12b      	b.n	800350a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe fb26 	bl	8001918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003304:	f001 fba0 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a81      	ldr	r2, [pc, #516]	; (8003514 <HAL_I2C_Init+0x274>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d807      	bhi.n	8003324 <HAL_I2C_Init+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a80      	ldr	r2, [pc, #512]	; (8003518 <HAL_I2C_Init+0x278>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e006      	b.n	8003332 <HAL_I2C_Init+0x92>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a7d      	ldr	r2, [pc, #500]	; (800351c <HAL_I2C_Init+0x27c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0e7      	b.n	800350a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a78      	ldr	r2, [pc, #480]	; (8003520 <HAL_I2C_Init+0x280>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0c9b      	lsrs	r3, r3, #18
 8003344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a6a      	ldr	r2, [pc, #424]	; (8003514 <HAL_I2C_Init+0x274>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d802      	bhi.n	8003374 <HAL_I2C_Init+0xd4>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	e009      	b.n	8003388 <HAL_I2C_Init+0xe8>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	4a69      	ldr	r2, [pc, #420]	; (8003524 <HAL_I2C_Init+0x284>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	3301      	adds	r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	430b      	orrs	r3, r1
 800338e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800339a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	495c      	ldr	r1, [pc, #368]	; (8003514 <HAL_I2C_Init+0x274>)
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d819      	bhi.n	80033dc <HAL_I2C_Init+0x13c>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e59      	subs	r1, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b6:	1c59      	adds	r1, r3, #1
 80033b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033bc:	400b      	ands	r3, r1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_I2C_Init+0x138>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e59      	subs	r1, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	e051      	b.n	800347c <HAL_I2C_Init+0x1dc>
 80033d8:	2304      	movs	r3, #4
 80033da:	e04f      	b.n	800347c <HAL_I2C_Init+0x1dc>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d111      	bne.n	8003408 <HAL_I2C_Init+0x168>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	1e58      	subs	r0, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6859      	ldr	r1, [r3, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	440b      	add	r3, r1
 80033f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f6:	3301      	adds	r3, #1
 80033f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	e012      	b.n	800342e <HAL_I2C_Init+0x18e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Init+0x196>
 8003432:	2301      	movs	r3, #1
 8003434:	e022      	b.n	800347c <HAL_I2C_Init+0x1dc>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10e      	bne.n	800345c <HAL_I2C_Init+0x1bc>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1e58      	subs	r0, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	460b      	mov	r3, r1
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	440b      	add	r3, r1
 800344c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	e00f      	b.n	800347c <HAL_I2C_Init+0x1dc>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	0099      	lsls	r1, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	6809      	ldr	r1, [r1, #0]
 8003480:	4313      	orrs	r3, r2
 8003482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6911      	ldr	r1, [r2, #16]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68d2      	ldr	r2, [r2, #12]
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6812      	ldr	r2, [r2, #0]
 80034bc:	430b      	orrs	r3, r1
 80034be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	000186a0 	.word	0x000186a0
 8003518:	001e847f 	.word	0x001e847f
 800351c:	003d08ff 	.word	0x003d08ff
 8003520:	431bde83 	.word	0x431bde83
 8003524:	10624dd3 	.word	0x10624dd3

08003528 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003542:	f7ff fbff 	bl	8002d44 <HAL_GetTick>
 8003546:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	f040 80d9 	bne.w	8003708 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2319      	movs	r3, #25
 800355c:	2201      	movs	r2, #1
 800355e:	496d      	ldr	r1, [pc, #436]	; (8003714 <HAL_I2C_Mem_Write+0x1ec>)
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 fcc1 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800356c:	2302      	movs	r3, #2
 800356e:	e0cc      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_I2C_Mem_Write+0x56>
 800357a:	2302      	movs	r3, #2
 800357c:	e0c5      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d007      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2221      	movs	r2, #33	; 0x21
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4a4d      	ldr	r2, [pc, #308]	; (8003718 <HAL_I2C_Mem_Write+0x1f0>)
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e6:	88f8      	ldrh	r0, [r7, #6]
 80035e8:	893a      	ldrh	r2, [r7, #8]
 80035ea:	8979      	ldrh	r1, [r7, #10]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4603      	mov	r3, r0
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 faf8 	bl	8003bec <I2C_RequestMemoryWrite>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d052      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e081      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 fd42 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	2b04      	cmp	r3, #4
 800361c:	d107      	bne.n	800362e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e06b      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	781a      	ldrb	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d11b      	bne.n	80036a8 <HAL_I2C_Mem_Write+0x180>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	d017      	beq.n	80036a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1aa      	bne.n	8003606 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fd2e 	bl	8004116 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d107      	bne.n	80036d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e016      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	00100002 	.word	0x00100002
 8003718:	ffff0000 	.word	0xffff0000

0800371c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	4608      	mov	r0, r1
 8003726:	4611      	mov	r1, r2
 8003728:	461a      	mov	r2, r3
 800372a:	4603      	mov	r3, r0
 800372c:	817b      	strh	r3, [r7, #10]
 800372e:	460b      	mov	r3, r1
 8003730:	813b      	strh	r3, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800373a:	f7ff fb03 	bl	8002d44 <HAL_GetTick>
 800373e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b20      	cmp	r3, #32
 800374a:	f040 8244 	bne.w	8003bd6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2319      	movs	r3, #25
 8003754:	2201      	movs	r2, #1
 8003756:	4982      	ldr	r1, [pc, #520]	; (8003960 <HAL_I2C_Mem_Read+0x244>)
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fbc5 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
 8003766:	e237      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Mem_Read+0x5a>
 8003772:	2302      	movs	r3, #2
 8003774:	e230      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d007      	beq.n	800379c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2222      	movs	r2, #34	; 0x22
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a62      	ldr	r2, [pc, #392]	; (8003964 <HAL_I2C_Mem_Read+0x248>)
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037de:	88f8      	ldrh	r0, [r7, #6]
 80037e0:	893a      	ldrh	r2, [r7, #8]
 80037e2:	8979      	ldrh	r1, [r7, #10]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	4603      	mov	r3, r0
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fa92 	bl	8003d18 <I2C_RequestMemoryRead>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e1ec      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003802:	2b00      	cmp	r3, #0
 8003804:	d113      	bne.n	800382e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e1c0      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	2b01      	cmp	r3, #1
 8003834:	d11e      	bne.n	8003874 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003844:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003846:	b672      	cpsid	i
}
 8003848:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003870:	b662      	cpsie	i
}
 8003872:	e035      	b.n	80038e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b02      	cmp	r3, #2
 800387a:	d11e      	bne.n	80038ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800388a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800388c:	b672      	cpsid	i
}
 800388e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038b6:	b662      	cpsie	i
}
 80038b8:	e012      	b.n	80038e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038e0:	e166      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	f200 811f 	bhi.w	8003b2a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d123      	bne.n	800393c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fc4d 	bl	8004198 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e167      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a
 800393a:	e139      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	2b02      	cmp	r3, #2
 8003942:	d152      	bne.n	80039ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	2200      	movs	r2, #0
 800394c:	4906      	ldr	r1, [pc, #24]	; (8003968 <HAL_I2C_Mem_Read+0x24c>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 faca 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e13c      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
 800395e:	bf00      	nop
 8003960:	00100002 	.word	0x00100002
 8003964:	ffff0000 	.word	0xffff0000
 8003968:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800396c:	b672      	cpsid	i
}
 800396e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039b2:	b662      	cpsie	i
}
 80039b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039e8:	e0e2      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2200      	movs	r2, #0
 80039f2:	497b      	ldr	r1, [pc, #492]	; (8003be0 <HAL_I2C_Mem_Read+0x4c4>)
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fa77 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0e9      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a14:	b672      	cpsid	i
}
 8003a16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a4a:	4b66      	ldr	r3, [pc, #408]	; (8003be4 <HAL_I2C_Mem_Read+0x4c8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	08db      	lsrs	r3, r3, #3
 8003a50:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_I2C_Mem_Read+0x4cc>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	0a1a      	lsrs	r2, r3, #8
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	00da      	lsls	r2, r3, #3
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d118      	bne.n	8003aa2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a92:	b662      	cpsie	i
}
 8003a94:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e09a      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f003 0304 	and.w	r3, r3, #4
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d1d9      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003af2:	b662      	cpsie	i
}
 8003af4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b28:	e042      	b.n	8003bb0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fb32 	bl	8004198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e04c      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d118      	bne.n	8003bb0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f47f ae94 	bne.w	80038e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e000      	b.n	8003bd8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
  }
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	00010004 	.word	0x00010004
 8003be4:	2000001c 	.word	0x2000001c
 8003be8:	14f8b589 	.word	0x14f8b589

08003bec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	817b      	strh	r3, [r7, #10]
 8003bfe:	460b      	mov	r3, r1
 8003c00:	813b      	strh	r3, [r7, #8]
 8003c02:	4613      	mov	r3, r2
 8003c04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f960 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00d      	beq.n	8003c4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d103      	bne.n	8003c46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e05f      	b.n	8003d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	492d      	ldr	r1, [pc, #180]	; (8003d14 <I2C_RequestMemoryWrite+0x128>)
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f998 	bl	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e04c      	b.n	8003d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c88:	6a39      	ldr	r1, [r7, #32]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fa02 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d107      	bne.n	8003cae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e02b      	b.n	8003d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d105      	bne.n	8003cc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb8:	893b      	ldrh	r3, [r7, #8]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	611a      	str	r2, [r3, #16]
 8003cc2:	e021      	b.n	8003d08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd4:	6a39      	ldr	r1, [r7, #32]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 f9dc 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d107      	bne.n	8003cfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e005      	b.n	8003d0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfe:	893b      	ldrh	r3, [r7, #8]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	00010002 	.word	0x00010002

08003d18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	817b      	strh	r3, [r7, #10]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	813b      	strh	r3, [r7, #8]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f8c2 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00d      	beq.n	8003d86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d78:	d103      	bne.n	8003d82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e0aa      	b.n	8003edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	4952      	ldr	r1, [pc, #328]	; (8003ee4 <I2C_RequestMemoryRead+0x1cc>)
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f8fa 	bl	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e097      	b.n	8003edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc4:	6a39      	ldr	r1, [r7, #32]
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f964 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00d      	beq.n	8003dee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d107      	bne.n	8003dea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e076      	b.n	8003edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df4:	893b      	ldrh	r3, [r7, #8]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	611a      	str	r2, [r3, #16]
 8003dfe:	e021      	b.n	8003e44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e00:	893b      	ldrh	r3, [r7, #8]
 8003e02:	0a1b      	lsrs	r3, r3, #8
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e10:	6a39      	ldr	r1, [r7, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f93e 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e050      	b.n	8003edc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3a:	893b      	ldrh	r3, [r7, #8]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	6a39      	ldr	r1, [r7, #32]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f923 	bl	8004094 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d107      	bne.n	8003e6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e035      	b.n	8003edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f82b 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea6:	d103      	bne.n	8003eb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e013      	b.n	8003edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003eb4:	897b      	ldrh	r3, [r7, #10]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <I2C_RequestMemoryRead+0x1cc>)
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f863 	bl	8003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	00010002 	.word	0x00010002

08003ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef8:	e025      	b.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d021      	beq.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fe ff1f 	bl	8002d44 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d116      	bne.n	8003f46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e023      	b.n	8003f8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	0c1b      	lsrs	r3, r3, #16
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d10d      	bne.n	8003f6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	43da      	mvns	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	e00c      	b.n	8003f86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d0b6      	beq.n	8003efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fa4:	e051      	b.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d123      	bne.n	8003ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0204 	orr.w	r2, r3, #4
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e046      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d021      	beq.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fe fe9d 	bl	8002d44 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d116      	bne.n	800404a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f043 0220 	orr.w	r2, r3, #32
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e020      	b.n	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10c      	bne.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4013      	ands	r3, r2
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e00b      	b.n	8004086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	43da      	mvns	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4013      	ands	r3, r2
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d18d      	bne.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a0:	e02d      	b.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 f8ce 	bl	8004244 <I2C_IsAcknowledgeFailed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e02d      	b.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d021      	beq.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ba:	f7fe fe43 	bl	8002d44 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e007      	b.n	800410e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d1ca      	bne.n	80040a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004122:	e02d      	b.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f88d 	bl	8004244 <I2C_IsAcknowledgeFailed>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e02d      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d021      	beq.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fe fe02 	bl	8002d44 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e007      	b.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	2b04      	cmp	r3, #4
 800418c:	d1ca      	bne.n	8004124 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041a4:	e042      	b.n	800422c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d119      	bne.n	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0210 	mvn.w	r2, #16
 80041bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e029      	b.n	800423c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e8:	f7fe fdac 	bl	8002d44 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e007      	b.n	800423c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d1b5      	bne.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d11b      	bne.n	8004294 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004264:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0204 	orr.w	r2, r3, #4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e272      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8087 	beq.w	80043ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042c0:	4b92      	ldr	r3, [pc, #584]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d00c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042cc:	4b8f      	ldr	r3, [pc, #572]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d112      	bne.n	80042fe <HAL_RCC_OscConfig+0x5e>
 80042d8:	4b8c      	ldr	r3, [pc, #560]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d10b      	bne.n	80042fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e6:	4b89      	ldr	r3, [pc, #548]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d06c      	beq.n	80043cc <HAL_RCC_OscConfig+0x12c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d168      	bne.n	80043cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e24c      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x76>
 8004308:	4b80      	ldr	r3, [pc, #512]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7f      	ldr	r2, [pc, #508]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e02e      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x98>
 800431e:	4b7b      	ldr	r3, [pc, #492]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7a      	ldr	r2, [pc, #488]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b78      	ldr	r3, [pc, #480]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a77      	ldr	r2, [pc, #476]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0xbc>
 8004342:	4b72      	ldr	r3, [pc, #456]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a71      	ldr	r2, [pc, #452]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6e      	ldr	r2, [pc, #440]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 800435c:	4b6b      	ldr	r3, [pc, #428]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a6a      	ldr	r2, [pc, #424]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b68      	ldr	r3, [pc, #416]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a67      	ldr	r2, [pc, #412]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fe fce2 	bl	8002d44 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fe fcde 	bl	8002d44 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e200      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b5d      	ldr	r3, [pc, #372]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xe4>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fe fcce 	bl	8002d44 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fe fcca 	bl	8002d44 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1ec      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x10c>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043da:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043e6:	4b49      	ldr	r3, [pc, #292]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x18c>
 80043f2:	4b46      	ldr	r3, [pc, #280]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1c0      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b3d      	ldr	r3, [pc, #244]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4939      	ldr	r1, [pc, #228]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7fe fc83 	bl	8002d44 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004442:	f7fe fc7f 	bl	8002d44 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e1a1      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4927      	ldr	r1, [pc, #156]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7fe fc62 	bl	8002d44 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004484:	f7fe fc5e 	bl	8002d44 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e180      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d03a      	beq.n	8004524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d019      	beq.n	80044ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_RCC_OscConfig+0x274>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7fe fc42 	bl	8002d44 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c4:	f7fe fc3e 	bl	8002d44 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e160      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044e2:	2001      	movs	r0, #1
 80044e4:	f000 fac4 	bl	8004a70 <RCC_Delay>
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <HAL_RCC_OscConfig+0x274>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7fe fc28 	bl	8002d44 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f6:	e00f      	b.n	8004518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f8:	f7fe fc24 	bl	8002d44 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d908      	bls.n	8004518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e146      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	42420000 	.word	0x42420000
 8004514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b92      	ldr	r3, [pc, #584]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e9      	bne.n	80044f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a6 	beq.w	800467e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b8b      	ldr	r3, [pc, #556]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	4b88      	ldr	r3, [pc, #544]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4a87      	ldr	r2, [pc, #540]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454c:	61d3      	str	r3, [r2, #28]
 800454e:	4b85      	ldr	r3, [pc, #532]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455a:	2301      	movs	r3, #1
 800455c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b82      	ldr	r3, [pc, #520]	; (8004768 <HAL_RCC_OscConfig+0x4c8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d118      	bne.n	800459c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	4b7f      	ldr	r3, [pc, #508]	; (8004768 <HAL_RCC_OscConfig+0x4c8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7e      	ldr	r2, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x4c8>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004576:	f7fe fbe5 	bl	8002d44 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fe fbe1 	bl	8002d44 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e103      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	4b75      	ldr	r3, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x4c8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x312>
 80045a4:	4b6f      	ldr	r3, [pc, #444]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4a6e      	ldr	r2, [pc, #440]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6213      	str	r3, [r2, #32]
 80045b0:	e02d      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x334>
 80045ba:	4b6a      	ldr	r3, [pc, #424]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a69      	ldr	r2, [pc, #420]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6213      	str	r3, [r2, #32]
 80045c6:	4b67      	ldr	r3, [pc, #412]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a66      	ldr	r2, [pc, #408]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6213      	str	r3, [r2, #32]
 80045d2:	e01c      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x356>
 80045dc:	4b61      	ldr	r3, [pc, #388]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4a60      	ldr	r2, [pc, #384]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	6213      	str	r3, [r2, #32]
 80045e8:	4b5e      	ldr	r3, [pc, #376]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4a5d      	ldr	r2, [pc, #372]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045f6:	4b5b      	ldr	r3, [pc, #364]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a5a      	ldr	r2, [pc, #360]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6213      	str	r3, [r2, #32]
 8004602:	4b58      	ldr	r3, [pc, #352]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4a57      	ldr	r2, [pc, #348]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d015      	beq.n	8004642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7fe fb95 	bl	8002d44 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fe fb91 	bl	8002d44 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	; 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0b1      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	4b4b      	ldr	r3, [pc, #300]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <HAL_RCC_OscConfig+0x37e>
 8004640:	e014      	b.n	800466c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7fe fb7f 	bl	8002d44 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fe fb7b 	bl	8002d44 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e09b      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004660:	4b40      	ldr	r3, [pc, #256]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ee      	bne.n	800464a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4b3c      	ldr	r3, [pc, #240]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	4a3b      	ldr	r2, [pc, #236]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8087 	beq.w	8004796 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004688:	4b36      	ldr	r3, [pc, #216]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b08      	cmp	r3, #8
 8004692:	d061      	beq.n	8004758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d146      	bne.n	800472a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469c:	4b33      	ldr	r3, [pc, #204]	; (800476c <HAL_RCC_OscConfig+0x4cc>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7fe fb4f 	bl	8002d44 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046aa:	f7fe fb4b 	bl	8002d44 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e06d      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046bc:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d108      	bne.n	80046e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	4921      	ldr	r1, [pc, #132]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e4:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a19      	ldr	r1, [r3, #32]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	430b      	orrs	r3, r1
 80046f6:	491b      	ldr	r1, [pc, #108]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046fc:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_RCC_OscConfig+0x4cc>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fe fb1f 	bl	8002d44 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fe fb1b 	bl	8002d44 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e03d      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x46a>
 8004728:	e035      	b.n	8004796 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <HAL_RCC_OscConfig+0x4cc>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fe fb08 	bl	8002d44 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7fe fb04 	bl	8002d44 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e026      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x498>
 8004756:	e01e      	b.n	8004796 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e019      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
 8004764:	40021000 	.word	0x40021000
 8004768:	40007000 	.word	0x40007000
 800476c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x500>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	429a      	cmp	r2, r3
 8004782:	d106      	bne.n	8004792 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478e:	429a      	cmp	r2, r3
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000

080047a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e0d0      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b8:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d910      	bls.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4965      	ldr	r1, [pc, #404]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b63      	ldr	r3, [pc, #396]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0b8      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004800:	4b59      	ldr	r3, [pc, #356]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4a58      	ldr	r2, [pc, #352]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800480a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004818:	4b53      	ldr	r3, [pc, #332]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a52      	ldr	r2, [pc, #328]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	494d      	ldr	r1, [pc, #308]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d040      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b47      	ldr	r3, [pc, #284]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d115      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e07f      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d107      	bne.n	8004872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e073      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004872:	4b3d      	ldr	r3, [pc, #244]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06b      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004882:	4b39      	ldr	r3, [pc, #228]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f023 0203 	bic.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4936      	ldr	r1, [pc, #216]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	4313      	orrs	r3, r2
 8004892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004894:	f7fe fa56 	bl	8002d44 <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	e00a      	b.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489c:	f7fe fa52 	bl	8002d44 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e053      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b2:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f003 020c 	and.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d1eb      	bne.n	800489c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c4:	4b27      	ldr	r3, [pc, #156]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d210      	bcs.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b24      	ldr	r3, [pc, #144]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 0207 	bic.w	r2, r3, #7
 80048da:	4922      	ldr	r1, [pc, #136]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <HAL_RCC_ClockConfig+0x1c0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e032      	b.n	800495a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004900:	4b19      	ldr	r3, [pc, #100]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4916      	ldr	r1, [pc, #88]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491e:	4b12      	ldr	r3, [pc, #72]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0b      	ldr	r3, [pc, #44]	; (8004968 <HAL_RCC_ClockConfig+0x1c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	490a      	ldr	r1, [pc, #40]	; (800496c <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	5ccb      	ldrb	r3, [r1, r3]
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	4a09      	ldr	r2, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1cc>)
 800494c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494e:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_ClockConfig+0x1d0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe f9b4 	bl	8002cc0 <HAL_InitTick>

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40022000 	.word	0x40022000
 8004968:	40021000 	.word	0x40021000
 800496c:	08007198 	.word	0x08007198
 8004970:	2000001c 	.word	0x2000001c
 8004974:	20000020 	.word	0x20000020

08004978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	b490      	push	{r4, r7}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800497e:	4b29      	ldr	r3, [pc, #164]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xac>)
 8004980:	1d3c      	adds	r4, r7, #4
 8004982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004988:	f240 2301 	movw	r3, #513	; 0x201
 800498c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049a2:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d002      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0x40>
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d003      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0x46>
 80049b6:	e02b      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049b8:	4b1c      	ldr	r3, [pc, #112]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80049ba:	623b      	str	r3, [r7, #32]
      break;
 80049bc:	e02b      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	0c9b      	lsrs	r3, r3, #18
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	3328      	adds	r3, #40	; 0x28
 80049c8:	443b      	add	r3, r7
 80049ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d012      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	0c5b      	lsrs	r3, r3, #17
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	3328      	adds	r3, #40	; 0x28
 80049e6:	443b      	add	r3, r7
 80049e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 80049f2:	fb03 f202 	mul.w	r2, r3, r2
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	e004      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	623b      	str	r3, [r7, #32]
      break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a12:	623b      	str	r3, [r7, #32]
      break;
 8004a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a16:	6a3b      	ldr	r3, [r7, #32]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc90      	pop	{r4, r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	08007178 	.word	0x08007178
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	007a1200 	.word	0x007a1200
 8004a30:	003d0900 	.word	0x003d0900

08004a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	2000001c 	.word	0x2000001c

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a4c:	f7ff fff2 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	080071a8 	.word	0x080071a8

08004a70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <RCC_Delay+0x34>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a0a      	ldr	r2, [pc, #40]	; (8004aa8 <RCC_Delay+0x38>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	0a5b      	lsrs	r3, r3, #9
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	fb02 f303 	mul.w	r3, r2, r3
 8004a8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a8c:	bf00      	nop
  }
  while (Delay --);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1e5a      	subs	r2, r3, #1
 8004a92:	60fa      	str	r2, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f9      	bne.n	8004a8c <RCC_Delay+0x1c>
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr
 8004aa4:	2000001c 	.word	0x2000001c
 8004aa8:	10624dd3 	.word	0x10624dd3

08004aac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e076      	b.n	8004bac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ace:	d009      	beq.n	8004ae4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	61da      	str	r2, [r3, #28]
 8004ad6:	e005      	b.n	8004ae4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd ff8c 	bl	8002a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	ea42 0103 	orr.w	r1, r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	0c1a      	lsrs	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f002 0204 	and.w	r2, r2, #4
 8004b8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_SPI_Transmit+0x22>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e126      	b.n	8004e24 <HAL_SPI_Transmit+0x270>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bde:	f7fe f8b1 	bl	8002d44 <HAL_GetTick>
 8004be2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d002      	beq.n	8004bfa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bf8:	e10b      	b.n	8004e12 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_SPI_Transmit+0x52>
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c0a:	e102      	b.n	8004e12 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	88fa      	ldrh	r2, [r7, #6]
 8004c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	d10f      	bne.n	8004c74 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d007      	beq.n	8004c92 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c9a:	d14b      	bne.n	8004d34 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Transmit+0xf6>
 8004ca4:	8afb      	ldrh	r3, [r7, #22]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d13e      	bne.n	8004d28 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	881a      	ldrh	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	1c9a      	adds	r2, r3, #2
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cce:	e02b      	b.n	8004d28 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d112      	bne.n	8004d04 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	1c9a      	adds	r2, r3, #2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d02:	e011      	b.n	8004d28 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d04:	f7fe f81e 	bl	8002d44 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d803      	bhi.n	8004d1c <HAL_SPI_Transmit+0x168>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Transmit+0x16e>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d26:	e074      	b.n	8004e12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ce      	bne.n	8004cd0 <HAL_SPI_Transmit+0x11c>
 8004d32:	e04c      	b.n	8004dce <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_SPI_Transmit+0x18e>
 8004d3c:	8afb      	ldrh	r3, [r7, #22]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d140      	bne.n	8004dc4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	330c      	adds	r3, #12
 8004d4c:	7812      	ldrb	r2, [r2, #0]
 8004d4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d68:	e02c      	b.n	8004dc4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d113      	bne.n	8004da0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	7812      	ldrb	r2, [r2, #0]
 8004d84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d9e:	e011      	b.n	8004dc4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da0:	f7fd ffd0 	bl	8002d44 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d803      	bhi.n	8004db8 <HAL_SPI_Transmit+0x204>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d102      	bne.n	8004dbe <HAL_SPI_Transmit+0x20a>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004dc2:	e026      	b.n	8004e12 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1cd      	bne.n	8004d6a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f000 fbb8 	bl	8005548 <SPI_EndRxTxTransaction>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2220      	movs	r2, #32
 8004de2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e000      	b.n	8004e12 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e48:	d112      	bne.n	8004e70 <HAL_SPI_Receive+0x44>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10e      	bne.n	8004e70 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2204      	movs	r2, #4
 8004e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4613      	mov	r3, r2
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f8f1 	bl	800504e <HAL_SPI_TransmitReceive>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	e0ea      	b.n	8005046 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_SPI_Receive+0x52>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e0e3      	b.n	8005046 <HAL_SPI_Receive+0x21a>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e86:	f7fd ff5d 	bl	8002d44 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e9c:	e0ca      	b.n	8005034 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Receive+0x7e>
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d102      	bne.n	8004eb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004eae:	e0c1      	b.n	8005034 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef6:	d10f      	bne.n	8004f18 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b40      	cmp	r3, #64	; 0x40
 8004f24:	d007      	beq.n	8004f36 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d162      	bne.n	8005004 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f3e:	e02e      	b.n	8004f9e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d115      	bne.n	8004f7a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f103 020c 	add.w	r2, r3, #12
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f78:	e011      	b.n	8004f9e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f7a:	f7fd fee3 	bl	8002d44 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d803      	bhi.n	8004f92 <HAL_SPI_Receive+0x166>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d102      	bne.n	8004f98 <HAL_SPI_Receive+0x16c>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f9c:	e04a      	b.n	8005034 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1cb      	bne.n	8004f40 <HAL_SPI_Receive+0x114>
 8004fa8:	e031      	b.n	800500e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d113      	bne.n	8004fe0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	1c9a      	adds	r2, r3, #2
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fde:	e011      	b.n	8005004 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe0:	f7fd feb0 	bl	8002d44 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d803      	bhi.n	8004ff8 <HAL_SPI_Receive+0x1cc>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Receive+0x1d2>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005002:	e017      	b.n	8005034 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1cd      	bne.n	8004faa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fa46 	bl	80054a4 <SPI_EndRxTransaction>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
 8005030:	e000      	b.n	8005034 <HAL_SPI_Receive+0x208>
  }

error :
 8005032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08c      	sub	sp, #48	; 0x30
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800505c:	2301      	movs	r3, #1
 800505e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x26>
 8005070:	2302      	movs	r3, #2
 8005072:	e18a      	b.n	800538a <HAL_SPI_TransmitReceive+0x33c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800507c:	f7fd fe62 	bl	8002d44 <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800509a:	2b01      	cmp	r3, #1
 800509c:	d00f      	beq.n	80050be <HAL_SPI_TransmitReceive+0x70>
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a4:	d107      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x68>
 80050ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d003      	beq.n	80050be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050bc:	e15b      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x82>
 80050ca:	887b      	ldrh	r3, [r7, #2]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d103      	bne.n	80050d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80050d6:	e14e      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d003      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2205      	movs	r2, #5
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	887a      	ldrh	r2, [r7, #2]
 80050fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	887a      	ldrh	r2, [r7, #2]
 8005102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	887a      	ldrh	r2, [r7, #2]
 800510e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	887a      	ldrh	r2, [r7, #2]
 8005114:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d007      	beq.n	8005140 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800513e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005148:	d178      	bne.n	800523c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_SPI_TransmitReceive+0x10a>
 8005152:	8b7b      	ldrh	r3, [r7, #26]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d166      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	881a      	ldrh	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	1c9a      	adds	r2, r3, #2
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800517c:	e053      	b.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d11b      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x176>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_SPI_TransmitReceive+0x176>
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d113      	bne.n	80051c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	881a      	ldrh	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	1c9a      	adds	r2, r3, #2
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d119      	bne.n	8005206 <HAL_SPI_TransmitReceive+0x1b8>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d014      	beq.n	8005206 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e6:	b292      	uxth	r2, r2
 80051e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	1c9a      	adds	r2, r3, #2
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005202:	2301      	movs	r3, #1
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005206:	f7fd fd9d 	bl	8002d44 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005212:	429a      	cmp	r2, r3
 8005214:	d807      	bhi.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d003      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005224:	e0a7      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1a6      	bne.n	800517e <HAL_SPI_TransmitReceive+0x130>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1a1      	bne.n	800517e <HAL_SPI_TransmitReceive+0x130>
 800523a:	e07c      	b.n	8005336 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_SPI_TransmitReceive+0x1fc>
 8005244:	8b7b      	ldrh	r3, [r7, #26]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d16b      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005270:	e057      	b.n	8005322 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d11c      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x26c>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d017      	beq.n	80052ba <HAL_SPI_TransmitReceive+0x26c>
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2b01      	cmp	r3, #1
 800528e:	d114      	bne.n	80052ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	7812      	ldrb	r2, [r2, #0]
 800529c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d119      	bne.n	80052fc <HAL_SPI_TransmitReceive+0x2ae>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d014      	beq.n	80052fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052f8:	2301      	movs	r3, #1
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052fc:	f7fd fd22 	bl	8002d44 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005308:	429a      	cmp	r2, r3
 800530a:	d803      	bhi.n	8005314 <HAL_SPI_TransmitReceive+0x2c6>
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d102      	bne.n	800531a <HAL_SPI_TransmitReceive+0x2cc>
 8005314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005320:	e029      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1a2      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x224>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d19d      	bne.n	8005272 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f904 	bl	8005548 <SPI_EndRxTxTransaction>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d006      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005352:	e010      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	e000      	b.n	8005376 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800538a:	4618      	mov	r0, r3
 800538c:	3730      	adds	r7, #48	; 0x30
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a4:	f7fd fcce 	bl	8002d44 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b4:	f7fd fcc6 	bl	8002d44 <HAL_GetTick>
 80053b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ba:	4b39      	ldr	r3, [pc, #228]	; (80054a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	015b      	lsls	r3, r3, #5
 80053c0:	0d1b      	lsrs	r3, r3, #20
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ca:	e054      	b.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d050      	beq.n	8005476 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d4:	f7fd fcb6 	bl	8002d44 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d902      	bls.n	80053ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d13d      	bne.n	8005466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d111      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540c:	d004      	beq.n	8005418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005416:	d107      	bne.n	8005428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005430:	d10f      	bne.n	8005452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e017      	b.n	8005496 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3b01      	subs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	429a      	cmp	r2, r3
 8005492:	d19b      	bne.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3720      	adds	r7, #32
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	2000001c 	.word	0x2000001c

080054a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b8:	d111      	bne.n	80054de <SPI_EndRxTransaction+0x3a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c2:	d004      	beq.n	80054ce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054cc:	d107      	bne.n	80054de <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054dc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d117      	bne.n	8005518 <SPI_EndRxTransaction+0x74>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f0:	d112      	bne.n	8005518 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2101      	movs	r1, #1
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff ff49 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01a      	beq.n	800553e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550c:	f043 0220 	orr.w	r2, r3, #32
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e013      	b.n	8005540 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff ff36 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e000      	b.n	8005540 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af02      	add	r7, sp, #8
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2200      	movs	r2, #0
 800555c:	2180      	movs	r1, #128	; 0x80
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff ff18 	bl	8005394 <SPI_WaitFlagStateUntilTimeout>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e000      	b.n	800557c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e041      	b.n	800561a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fd fb2e 	bl	8002c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f000 f93c 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	d001      	beq.n	800563c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e032      	b.n	80056a2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a18      	ldr	r2, [pc, #96]	; (80056ac <HAL_TIM_Base_Start+0x88>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00e      	beq.n	800566c <HAL_TIM_Base_Start+0x48>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d009      	beq.n	800566c <HAL_TIM_Base_Start+0x48>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a14      	ldr	r2, [pc, #80]	; (80056b0 <HAL_TIM_Base_Start+0x8c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d004      	beq.n	800566c <HAL_TIM_Base_Start+0x48>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a13      	ldr	r2, [pc, #76]	; (80056b4 <HAL_TIM_Base_Start+0x90>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d111      	bne.n	8005690 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b06      	cmp	r3, #6
 800567c:	d010      	beq.n	80056a0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0201 	orr.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568e:	e007      	b.n	80056a0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800

080056b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIM_ConfigClockSource+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e0b3      	b.n	8005838 <HAL_TIM_ConfigClockSource+0x180>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005708:	d03e      	beq.n	8005788 <HAL_TIM_ConfigClockSource+0xd0>
 800570a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570e:	f200 8087 	bhi.w	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	f000 8085 	beq.w	8005824 <HAL_TIM_ConfigClockSource+0x16c>
 800571a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571e:	d87f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d01a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xa2>
 8005724:	2b70      	cmp	r3, #112	; 0x70
 8005726:	d87b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d050      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x116>
 800572c:	2b60      	cmp	r3, #96	; 0x60
 800572e:	d877      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d03c      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0xf6>
 8005734:	2b50      	cmp	r3, #80	; 0x50
 8005736:	d873      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d058      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x136>
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d86f      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d064      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x156>
 8005744:	2b30      	cmp	r3, #48	; 0x30
 8005746:	d86b      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d060      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x156>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d867      	bhi.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
 8005750:	2b00      	cmp	r3, #0
 8005752:	d05c      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x156>
 8005754:	2b10      	cmp	r3, #16
 8005756:	d05a      	beq.n	800580e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005758:	e062      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6899      	ldr	r1, [r3, #8]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f000 f942 	bl	80059f2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800577c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	609a      	str	r2, [r3, #8]
      break;
 8005786:	e04e      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	6899      	ldr	r1, [r3, #8]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f000 f92b 	bl	80059f2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057aa:	609a      	str	r2, [r3, #8]
      break;
 80057ac:	e03b      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 f8a2 	bl	8005904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2150      	movs	r1, #80	; 0x50
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f8f9 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 80057cc:	e02b      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 f8c0 	bl	8005960 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2160      	movs	r1, #96	; 0x60
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f8e9 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 80057ec:	e01b      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6859      	ldr	r1, [r3, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f000 f882 	bl	8005904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2140      	movs	r1, #64	; 0x40
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f8d9 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 800580c:	e00b      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f000 f8d0 	bl	80059be <TIM_ITRx_SetConfig>
        break;
 800581e:	e002      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005820:	bf00      	nop
 8005822:	e000      	b.n	8005826 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005824:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <TIM_Base_SetConfig+0xb8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_Base_SetConfig+0x30>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0x30>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a26      	ldr	r2, [pc, #152]	; (80058fc <TIM_Base_SetConfig+0xbc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0x30>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a25      	ldr	r2, [pc, #148]	; (8005900 <TIM_Base_SetConfig+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1c      	ldr	r2, [pc, #112]	; (80058f8 <TIM_Base_SetConfig+0xb8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00b      	beq.n	80058a2 <TIM_Base_SetConfig+0x62>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d007      	beq.n	80058a2 <TIM_Base_SetConfig+0x62>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a19      	ldr	r2, [pc, #100]	; (80058fc <TIM_Base_SetConfig+0xbc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d003      	beq.n	80058a2 <TIM_Base_SetConfig+0x62>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a18      	ldr	r2, [pc, #96]	; (8005900 <TIM_Base_SetConfig+0xc0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d108      	bne.n	80058b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <TIM_Base_SetConfig+0xb8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d103      	bne.n	80058e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	615a      	str	r2, [r3, #20]
}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40000400 	.word	0x40000400
 8005900:	40000800 	.word	0x40000800

08005904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	f023 0201 	bic.w	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800592e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	011b      	lsls	r3, r3, #4
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 030a 	bic.w	r3, r3, #10
 8005940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f023 0210 	bic.w	r2, r3, #16
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800598a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	031b      	lsls	r3, r3, #12
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800599c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bc80      	pop	{r7}
 80059bc:	4770      	bx	lr

080059be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	f043 0307 	orr.w	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b087      	sub	sp, #28
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	607a      	str	r2, [r7, #4]
 80059fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	021a      	lsls	r2, r3, #8
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	609a      	str	r2, [r3, #8]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e046      	b.n	8005ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d009      	beq.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a12      	ldr	r2, [pc, #72]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a10      	ldr	r2, [pc, #64]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc80      	pop	{r7}
 8005ade:	4770      	bx	lr
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800

08005aec <__errno>:
 8005aec:	4b01      	ldr	r3, [pc, #4]	; (8005af4 <__errno+0x8>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000028 	.word	0x20000028

08005af8 <__libc_init_array>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	2600      	movs	r6, #0
 8005afc:	4d0c      	ldr	r5, [pc, #48]	; (8005b30 <__libc_init_array+0x38>)
 8005afe:	4c0d      	ldr	r4, [pc, #52]	; (8005b34 <__libc_init_array+0x3c>)
 8005b00:	1b64      	subs	r4, r4, r5
 8005b02:	10a4      	asrs	r4, r4, #2
 8005b04:	42a6      	cmp	r6, r4
 8005b06:	d109      	bne.n	8005b1c <__libc_init_array+0x24>
 8005b08:	f001 fb28 	bl	800715c <_init>
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	4d0a      	ldr	r5, [pc, #40]	; (8005b38 <__libc_init_array+0x40>)
 8005b10:	4c0a      	ldr	r4, [pc, #40]	; (8005b3c <__libc_init_array+0x44>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	42a6      	cmp	r6, r4
 8005b18:	d105      	bne.n	8005b26 <__libc_init_array+0x2e>
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b20:	4798      	blx	r3
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7ee      	b.n	8005b04 <__libc_init_array+0xc>
 8005b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2a:	4798      	blx	r3
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	e7f2      	b.n	8005b16 <__libc_init_array+0x1e>
 8005b30:	08007390 	.word	0x08007390
 8005b34:	08007390 	.word	0x08007390
 8005b38:	08007390 	.word	0x08007390
 8005b3c:	08007394 	.word	0x08007394

08005b40 <memcpy>:
 8005b40:	440a      	add	r2, r1
 8005b42:	4291      	cmp	r1, r2
 8005b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b48:	d100      	bne.n	8005b4c <memcpy+0xc>
 8005b4a:	4770      	bx	lr
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b52:	4291      	cmp	r1, r2
 8005b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b58:	d1f9      	bne.n	8005b4e <memcpy+0xe>
 8005b5a:	bd10      	pop	{r4, pc}

08005b5c <memset>:
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4402      	add	r2, r0
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memset+0xa>
 8005b64:	4770      	bx	lr
 8005b66:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6a:	e7f9      	b.n	8005b60 <memset+0x4>

08005b6c <sin>:
 8005b6c:	b530      	push	{r4, r5, lr}
 8005b6e:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <sin+0x84>)
 8005b70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b74:	4293      	cmp	r3, r2
 8005b76:	b087      	sub	sp, #28
 8005b78:	dc06      	bgt.n	8005b88 <sin+0x1c>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	f001 f929 	bl	8006dd8 <__kernel_sin>
 8005b86:	e006      	b.n	8005b96 <sin+0x2a>
 8005b88:	4a1a      	ldr	r2, [pc, #104]	; (8005bf4 <sin+0x88>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	dd05      	ble.n	8005b9a <sin+0x2e>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	f7fa fae1 	bl	8000158 <__aeabi_dsub>
 8005b96:	b007      	add	sp, #28
 8005b98:	bd30      	pop	{r4, r5, pc}
 8005b9a:	aa02      	add	r2, sp, #8
 8005b9c:	f000 fa74 	bl	8006088 <__ieee754_rem_pio2>
 8005ba0:	f000 0003 	and.w	r0, r0, #3
 8005ba4:	2801      	cmp	r0, #1
 8005ba6:	d009      	beq.n	8005bbc <sin+0x50>
 8005ba8:	2802      	cmp	r0, #2
 8005baa:	d00e      	beq.n	8005bca <sin+0x5e>
 8005bac:	b9c0      	cbnz	r0, 8005be0 <sin+0x74>
 8005bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bba:	e7e2      	b.n	8005b82 <sin+0x16>
 8005bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc4:	f000 fd08 	bl	80065d8 <__kernel_cos>
 8005bc8:	e7e5      	b.n	8005b96 <sin+0x2a>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bd6:	f001 f8ff 	bl	8006dd8 <__kernel_sin>
 8005bda:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005bde:	e7da      	b.n	8005b96 <sin+0x2a>
 8005be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be8:	f000 fcf6 	bl	80065d8 <__kernel_cos>
 8005bec:	e7f5      	b.n	8005bda <sin+0x6e>
 8005bee:	bf00      	nop
 8005bf0:	3fe921fb 	.word	0x3fe921fb
 8005bf4:	7fefffff 	.word	0x7fefffff

08005bf8 <asin>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	460d      	mov	r5, r1
 8005bfe:	f000 f847 	bl	8005c90 <__ieee754_asin>
 8005c02:	4622      	mov	r2, r4
 8005c04:	4606      	mov	r6, r0
 8005c06:	460f      	mov	r7, r1
 8005c08:	462b      	mov	r3, r5
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7fa fef5 	bl	80009fc <__aeabi_dcmpun>
 8005c12:	b988      	cbnz	r0, 8005c38 <asin+0x40>
 8005c14:	4620      	mov	r0, r4
 8005c16:	4629      	mov	r1, r5
 8005c18:	f001 f994 	bl	8006f44 <fabs>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	4b08      	ldr	r3, [pc, #32]	; (8005c40 <asin+0x48>)
 8005c20:	f7fa fee2 	bl	80009e8 <__aeabi_dcmpgt>
 8005c24:	b140      	cbz	r0, 8005c38 <asin+0x40>
 8005c26:	f7ff ff61 	bl	8005aec <__errno>
 8005c2a:	2321      	movs	r3, #33	; 0x21
 8005c2c:	6003      	str	r3, [r0, #0]
 8005c2e:	4805      	ldr	r0, [pc, #20]	; (8005c44 <asin+0x4c>)
 8005c30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005c34:	f001 ba0c 	b.w	8007050 <nan>
 8005c38:	4630      	mov	r0, r6
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	3ff00000 	.word	0x3ff00000
 8005c44:	080071b0 	.word	0x080071b0

08005c48 <sqrt>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	4606      	mov	r6, r0
 8005c4c:	460f      	mov	r7, r1
 8005c4e:	f000 fc13 	bl	8006478 <__ieee754_sqrt>
 8005c52:	4632      	mov	r2, r6
 8005c54:	4604      	mov	r4, r0
 8005c56:	460d      	mov	r5, r1
 8005c58:	463b      	mov	r3, r7
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	f7fa fecd 	bl	80009fc <__aeabi_dcmpun>
 8005c62:	b990      	cbnz	r0, 8005c8a <sqrt+0x42>
 8005c64:	2200      	movs	r2, #0
 8005c66:	2300      	movs	r3, #0
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fe9e 	bl	80009ac <__aeabi_dcmplt>
 8005c70:	b158      	cbz	r0, 8005c8a <sqrt+0x42>
 8005c72:	f7ff ff3b 	bl	8005aec <__errno>
 8005c76:	2321      	movs	r3, #33	; 0x21
 8005c78:	2200      	movs	r2, #0
 8005c7a:	6003      	str	r3, [r0, #0]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fa fd4b 	bl	800071c <__aeabi_ddiv>
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c90 <__ieee754_asin>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	4bc4      	ldr	r3, [pc, #784]	; (8005fa8 <__ieee754_asin+0x318>)
 8005c96:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	429e      	cmp	r6, r3
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	460d      	mov	r5, r1
 8005ca4:	9105      	str	r1, [sp, #20]
 8005ca6:	dd29      	ble.n	8005cfc <__ieee754_asin+0x6c>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 8005cae:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005cb2:	4333      	orrs	r3, r6
 8005cb4:	d114      	bne.n	8005ce0 <__ieee754_asin+0x50>
 8005cb6:	a3a2      	add	r3, pc, #648	; (adr r3, 8005f40 <__ieee754_asin+0x2b0>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f7fa fc04 	bl	80004c8 <__aeabi_dmul>
 8005cc0:	a3a1      	add	r3, pc, #644	; (adr r3, 8005f48 <__ieee754_asin+0x2b8>)
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460f      	mov	r7, r1
 8005cca:	4620      	mov	r0, r4
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f7fa fbfb 	bl	80004c8 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa fa3f 	bl	800015c <__adddf3>
 8005cde:	e006      	b.n	8005cee <__ieee754_asin+0x5e>
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	f7fa fa39 	bl	8000158 <__aeabi_dsub>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	f7fa fd17 	bl	800071c <__aeabi_ddiv>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	b007      	add	sp, #28
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	4bab      	ldr	r3, [pc, #684]	; (8005fac <__ieee754_asin+0x31c>)
 8005cfe:	429e      	cmp	r6, r3
 8005d00:	dc0e      	bgt.n	8005d20 <__ieee754_asin+0x90>
 8005d02:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8005d06:	f280 80ab 	bge.w	8005e60 <__ieee754_asin+0x1d0>
 8005d0a:	a391      	add	r3, pc, #580	; (adr r3, 8005f50 <__ieee754_asin+0x2c0>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fa24 	bl	800015c <__adddf3>
 8005d14:	2200      	movs	r2, #0
 8005d16:	4ba6      	ldr	r3, [pc, #664]	; (8005fb0 <__ieee754_asin+0x320>)
 8005d18:	f7fa fe66 	bl	80009e8 <__aeabi_dcmpgt>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d1e8      	bne.n	8005cf2 <__ieee754_asin+0x62>
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f001 f90e 	bl	8006f44 <fabs>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	49a0      	ldr	r1, [pc, #640]	; (8005fb0 <__ieee754_asin+0x320>)
 8005d30:	f7fa fa12 	bl	8000158 <__aeabi_dsub>
 8005d34:	2200      	movs	r2, #0
 8005d36:	4b9f      	ldr	r3, [pc, #636]	; (8005fb4 <__ieee754_asin+0x324>)
 8005d38:	f7fa fbc6 	bl	80004c8 <__aeabi_dmul>
 8005d3c:	a386      	add	r3, pc, #536	; (adr r3, 8005f58 <__ieee754_asin+0x2c8>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	4604      	mov	r4, r0
 8005d44:	460d      	mov	r5, r1
 8005d46:	f7fa fbbf 	bl	80004c8 <__aeabi_dmul>
 8005d4a:	a385      	add	r3, pc, #532	; (adr r3, 8005f60 <__ieee754_asin+0x2d0>)
 8005d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d50:	f7fa fa04 	bl	800015c <__adddf3>
 8005d54:	4622      	mov	r2, r4
 8005d56:	462b      	mov	r3, r5
 8005d58:	f7fa fbb6 	bl	80004c8 <__aeabi_dmul>
 8005d5c:	a382      	add	r3, pc, #520	; (adr r3, 8005f68 <__ieee754_asin+0x2d8>)
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f7fa f9f9 	bl	8000158 <__aeabi_dsub>
 8005d66:	4622      	mov	r2, r4
 8005d68:	462b      	mov	r3, r5
 8005d6a:	f7fa fbad 	bl	80004c8 <__aeabi_dmul>
 8005d6e:	a380      	add	r3, pc, #512	; (adr r3, 8005f70 <__ieee754_asin+0x2e0>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa f9f2 	bl	800015c <__adddf3>
 8005d78:	4622      	mov	r2, r4
 8005d7a:	462b      	mov	r3, r5
 8005d7c:	f7fa fba4 	bl	80004c8 <__aeabi_dmul>
 8005d80:	a37d      	add	r3, pc, #500	; (adr r3, 8005f78 <__ieee754_asin+0x2e8>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	f7fa f9e7 	bl	8000158 <__aeabi_dsub>
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	f7fa fb9b 	bl	80004c8 <__aeabi_dmul>
 8005d92:	a37b      	add	r3, pc, #492	; (adr r3, 8005f80 <__ieee754_asin+0x2f0>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa f9e0 	bl	800015c <__adddf3>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	462b      	mov	r3, r5
 8005da0:	f7fa fb92 	bl	80004c8 <__aeabi_dmul>
 8005da4:	a378      	add	r3, pc, #480	; (adr r3, 8005f88 <__ieee754_asin+0x2f8>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	e9cd 0100 	strd	r0, r1, [sp]
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fb89 	bl	80004c8 <__aeabi_dmul>
 8005db6:	a376      	add	r3, pc, #472	; (adr r3, 8005f90 <__ieee754_asin+0x300>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa f9cc 	bl	8000158 <__aeabi_dsub>
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	462b      	mov	r3, r5
 8005dc4:	f7fa fb80 	bl	80004c8 <__aeabi_dmul>
 8005dc8:	a373      	add	r3, pc, #460	; (adr r3, 8005f98 <__ieee754_asin+0x308>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa f9c5 	bl	800015c <__adddf3>
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	462b      	mov	r3, r5
 8005dd6:	f7fa fb77 	bl	80004c8 <__aeabi_dmul>
 8005dda:	a371      	add	r3, pc, #452	; (adr r3, 8005fa0 <__ieee754_asin+0x310>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa f9ba 	bl	8000158 <__aeabi_dsub>
 8005de4:	4622      	mov	r2, r4
 8005de6:	462b      	mov	r3, r5
 8005de8:	f7fa fb6e 	bl	80004c8 <__aeabi_dmul>
 8005dec:	4b70      	ldr	r3, [pc, #448]	; (8005fb0 <__ieee754_asin+0x320>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	f7fa f9b4 	bl	800015c <__adddf3>
 8005df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	f000 fb3c 	bl	8006478 <__ieee754_sqrt>
 8005e00:	4b6d      	ldr	r3, [pc, #436]	; (8005fb8 <__ieee754_asin+0x328>)
 8005e02:	4682      	mov	sl, r0
 8005e04:	429e      	cmp	r6, r3
 8005e06:	468b      	mov	fp, r1
 8005e08:	f340 80d8 	ble.w	8005fbc <__ieee754_asin+0x32c>
 8005e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e14:	f7fa fc82 	bl	800071c <__aeabi_ddiv>
 8005e18:	4652      	mov	r2, sl
 8005e1a:	465b      	mov	r3, fp
 8005e1c:	f7fa fb54 	bl	80004c8 <__aeabi_dmul>
 8005e20:	4652      	mov	r2, sl
 8005e22:	465b      	mov	r3, fp
 8005e24:	f7fa f99a 	bl	800015c <__adddf3>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	f7fa f996 	bl	800015c <__adddf3>
 8005e30:	a345      	add	r3, pc, #276	; (adr r3, 8005f48 <__ieee754_asin+0x2b8>)
 8005e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e36:	f7fa f98f 	bl	8000158 <__aeabi_dsub>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	a140      	add	r1, pc, #256	; (adr r1, 8005f40 <__ieee754_asin+0x2b0>)
 8005e40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e44:	f7fa f988 	bl	8000158 <__aeabi_dsub>
 8005e48:	9b05      	ldr	r3, [sp, #20]
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bfdc      	itt	le
 8005e50:	4602      	movle	r2, r0
 8005e52:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8005e56:	460d      	mov	r5, r1
 8005e58:	bfdc      	itt	le
 8005e5a:	4614      	movle	r4, r2
 8005e5c:	461d      	movle	r5, r3
 8005e5e:	e748      	b.n	8005cf2 <__ieee754_asin+0x62>
 8005e60:	460b      	mov	r3, r1
 8005e62:	f7fa fb31 	bl	80004c8 <__aeabi_dmul>
 8005e66:	a33c      	add	r3, pc, #240	; (adr r3, 8005f58 <__ieee754_asin+0x2c8>)
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	460f      	mov	r7, r1
 8005e70:	f7fa fb2a 	bl	80004c8 <__aeabi_dmul>
 8005e74:	a33a      	add	r3, pc, #232	; (adr r3, 8005f60 <__ieee754_asin+0x2d0>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f7fa f96f 	bl	800015c <__adddf3>
 8005e7e:	4632      	mov	r2, r6
 8005e80:	463b      	mov	r3, r7
 8005e82:	f7fa fb21 	bl	80004c8 <__aeabi_dmul>
 8005e86:	a338      	add	r3, pc, #224	; (adr r3, 8005f68 <__ieee754_asin+0x2d8>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa f964 	bl	8000158 <__aeabi_dsub>
 8005e90:	4632      	mov	r2, r6
 8005e92:	463b      	mov	r3, r7
 8005e94:	f7fa fb18 	bl	80004c8 <__aeabi_dmul>
 8005e98:	a335      	add	r3, pc, #212	; (adr r3, 8005f70 <__ieee754_asin+0x2e0>)
 8005e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9e:	f7fa f95d 	bl	800015c <__adddf3>
 8005ea2:	4632      	mov	r2, r6
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	f7fa fb0f 	bl	80004c8 <__aeabi_dmul>
 8005eaa:	a333      	add	r3, pc, #204	; (adr r3, 8005f78 <__ieee754_asin+0x2e8>)
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f7fa f952 	bl	8000158 <__aeabi_dsub>
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	f7fa fb06 	bl	80004c8 <__aeabi_dmul>
 8005ebc:	a330      	add	r3, pc, #192	; (adr r3, 8005f80 <__ieee754_asin+0x2f0>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f7fa f94b 	bl	800015c <__adddf3>
 8005ec6:	4632      	mov	r2, r6
 8005ec8:	463b      	mov	r3, r7
 8005eca:	f7fa fafd 	bl	80004c8 <__aeabi_dmul>
 8005ece:	a32e      	add	r3, pc, #184	; (adr r3, 8005f88 <__ieee754_asin+0x2f8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	4680      	mov	r8, r0
 8005ed6:	4689      	mov	r9, r1
 8005ed8:	4630      	mov	r0, r6
 8005eda:	4639      	mov	r1, r7
 8005edc:	f7fa faf4 	bl	80004c8 <__aeabi_dmul>
 8005ee0:	a32b      	add	r3, pc, #172	; (adr r3, 8005f90 <__ieee754_asin+0x300>)
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f7fa f937 	bl	8000158 <__aeabi_dsub>
 8005eea:	4632      	mov	r2, r6
 8005eec:	463b      	mov	r3, r7
 8005eee:	f7fa faeb 	bl	80004c8 <__aeabi_dmul>
 8005ef2:	a329      	add	r3, pc, #164	; (adr r3, 8005f98 <__ieee754_asin+0x308>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa f930 	bl	800015c <__adddf3>
 8005efc:	4632      	mov	r2, r6
 8005efe:	463b      	mov	r3, r7
 8005f00:	f7fa fae2 	bl	80004c8 <__aeabi_dmul>
 8005f04:	a326      	add	r3, pc, #152	; (adr r3, 8005fa0 <__ieee754_asin+0x310>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f7fa f925 	bl	8000158 <__aeabi_dsub>
 8005f0e:	4632      	mov	r2, r6
 8005f10:	463b      	mov	r3, r7
 8005f12:	f7fa fad9 	bl	80004c8 <__aeabi_dmul>
 8005f16:	2200      	movs	r2, #0
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <__ieee754_asin+0x320>)
 8005f1a:	f7fa f91f 	bl	800015c <__adddf3>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4640      	mov	r0, r8
 8005f24:	4649      	mov	r1, r9
 8005f26:	f7fa fbf9 	bl	800071c <__aeabi_ddiv>
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	f7fa facb 	bl	80004c8 <__aeabi_dmul>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4620      	mov	r0, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	e6ce      	b.n	8005cda <__ieee754_asin+0x4a>
 8005f3c:	f3af 8000 	nop.w
 8005f40:	54442d18 	.word	0x54442d18
 8005f44:	3ff921fb 	.word	0x3ff921fb
 8005f48:	33145c07 	.word	0x33145c07
 8005f4c:	3c91a626 	.word	0x3c91a626
 8005f50:	8800759c 	.word	0x8800759c
 8005f54:	7e37e43c 	.word	0x7e37e43c
 8005f58:	0dfdf709 	.word	0x0dfdf709
 8005f5c:	3f023de1 	.word	0x3f023de1
 8005f60:	7501b288 	.word	0x7501b288
 8005f64:	3f49efe0 	.word	0x3f49efe0
 8005f68:	b5688f3b 	.word	0xb5688f3b
 8005f6c:	3fa48228 	.word	0x3fa48228
 8005f70:	0e884455 	.word	0x0e884455
 8005f74:	3fc9c155 	.word	0x3fc9c155
 8005f78:	03eb6f7d 	.word	0x03eb6f7d
 8005f7c:	3fd4d612 	.word	0x3fd4d612
 8005f80:	55555555 	.word	0x55555555
 8005f84:	3fc55555 	.word	0x3fc55555
 8005f88:	b12e9282 	.word	0xb12e9282
 8005f8c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005f90:	1b8d0159 	.word	0x1b8d0159
 8005f94:	3fe6066c 	.word	0x3fe6066c
 8005f98:	9c598ac8 	.word	0x9c598ac8
 8005f9c:	40002ae5 	.word	0x40002ae5
 8005fa0:	1c8a2d4b 	.word	0x1c8a2d4b
 8005fa4:	40033a27 	.word	0x40033a27
 8005fa8:	3fefffff 	.word	0x3fefffff
 8005fac:	3fdfffff 	.word	0x3fdfffff
 8005fb0:	3ff00000 	.word	0x3ff00000
 8005fb4:	3fe00000 	.word	0x3fe00000
 8005fb8:	3fef3332 	.word	0x3fef3332
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	f7fa f8cc 	bl	800015c <__adddf3>
 8005fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fc8:	4606      	mov	r6, r0
 8005fca:	460f      	mov	r7, r1
 8005fcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fd0:	f7fa fba4 	bl	800071c <__aeabi_ddiv>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f7fa fa74 	bl	80004c8 <__aeabi_dmul>
 8005fe0:	f04f 0800 	mov.w	r8, #0
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	460f      	mov	r7, r1
 8005fe8:	4642      	mov	r2, r8
 8005fea:	465b      	mov	r3, fp
 8005fec:	4640      	mov	r0, r8
 8005fee:	4659      	mov	r1, fp
 8005ff0:	f7fa fa6a 	bl	80004c8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	f7fa f8ac 	bl	8000158 <__aeabi_dsub>
 8006000:	4642      	mov	r2, r8
 8006002:	4604      	mov	r4, r0
 8006004:	460d      	mov	r5, r1
 8006006:	465b      	mov	r3, fp
 8006008:	4650      	mov	r0, sl
 800600a:	4659      	mov	r1, fp
 800600c:	f7fa f8a6 	bl	800015c <__adddf3>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4620      	mov	r0, r4
 8006016:	4629      	mov	r1, r5
 8006018:	f7fa fb80 	bl	800071c <__aeabi_ddiv>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	f7fa f89c 	bl	800015c <__adddf3>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	a113      	add	r1, pc, #76	; (adr r1, 8006078 <__ieee754_asin+0x3e8>)
 800602a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800602e:	f7fa f893 	bl	8000158 <__aeabi_dsub>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4630      	mov	r0, r6
 8006038:	4639      	mov	r1, r7
 800603a:	f7fa f88d 	bl	8000158 <__aeabi_dsub>
 800603e:	4642      	mov	r2, r8
 8006040:	4604      	mov	r4, r0
 8006042:	460d      	mov	r5, r1
 8006044:	465b      	mov	r3, fp
 8006046:	4640      	mov	r0, r8
 8006048:	4659      	mov	r1, fp
 800604a:	f7fa f887 	bl	800015c <__adddf3>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	a10b      	add	r1, pc, #44	; (adr r1, 8006080 <__ieee754_asin+0x3f0>)
 8006054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006058:	f7fa f87e 	bl	8000158 <__aeabi_dsub>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4620      	mov	r0, r4
 8006062:	4629      	mov	r1, r5
 8006064:	f7fa f878 	bl	8000158 <__aeabi_dsub>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	a104      	add	r1, pc, #16	; (adr r1, 8006080 <__ieee754_asin+0x3f0>)
 800606e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006072:	e6e7      	b.n	8005e44 <__ieee754_asin+0x1b4>
 8006074:	f3af 8000 	nop.w
 8006078:	33145c07 	.word	0x33145c07
 800607c:	3c91a626 	.word	0x3c91a626
 8006080:	54442d18 	.word	0x54442d18
 8006084:	3fe921fb 	.word	0x3fe921fb

08006088 <__ieee754_rem_pio2>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	4614      	mov	r4, r2
 800608e:	4ac4      	ldr	r2, [pc, #784]	; (80063a0 <__ieee754_rem_pio2+0x318>)
 8006090:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006094:	b08d      	sub	sp, #52	; 0x34
 8006096:	4592      	cmp	sl, r2
 8006098:	9104      	str	r1, [sp, #16]
 800609a:	dc07      	bgt.n	80060ac <__ieee754_rem_pio2+0x24>
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	e9c4 0100 	strd	r0, r1, [r4]
 80060a4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80060a8:	2500      	movs	r5, #0
 80060aa:	e024      	b.n	80060f6 <__ieee754_rem_pio2+0x6e>
 80060ac:	4abd      	ldr	r2, [pc, #756]	; (80063a4 <__ieee754_rem_pio2+0x31c>)
 80060ae:	4592      	cmp	sl, r2
 80060b0:	dc72      	bgt.n	8006198 <__ieee754_rem_pio2+0x110>
 80060b2:	9b04      	ldr	r3, [sp, #16]
 80060b4:	4dbc      	ldr	r5, [pc, #752]	; (80063a8 <__ieee754_rem_pio2+0x320>)
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	a3ab      	add	r3, pc, #684	; (adr r3, 8006368 <__ieee754_rem_pio2+0x2e0>)
 80060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060be:	dd36      	ble.n	800612e <__ieee754_rem_pio2+0xa6>
 80060c0:	f7fa f84a 	bl	8000158 <__aeabi_dsub>
 80060c4:	45aa      	cmp	sl, r5
 80060c6:	4606      	mov	r6, r0
 80060c8:	460f      	mov	r7, r1
 80060ca:	d018      	beq.n	80060fe <__ieee754_rem_pio2+0x76>
 80060cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f841 	bl	8000158 <__aeabi_dsub>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4630      	mov	r0, r6
 80060dc:	e9c4 2300 	strd	r2, r3, [r4]
 80060e0:	4639      	mov	r1, r7
 80060e2:	f7fa f839 	bl	8000158 <__aeabi_dsub>
 80060e6:	a3a2      	add	r3, pc, #648	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f7fa f834 	bl	8000158 <__aeabi_dsub>
 80060f0:	2501      	movs	r5, #1
 80060f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060f6:	4628      	mov	r0, r5
 80060f8:	b00d      	add	sp, #52	; 0x34
 80060fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fe:	a39e      	add	r3, pc, #632	; (adr r3, 8006378 <__ieee754_rem_pio2+0x2f0>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa f828 	bl	8000158 <__aeabi_dsub>
 8006108:	a39d      	add	r3, pc, #628	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	f7fa f821 	bl	8000158 <__aeabi_dsub>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4630      	mov	r0, r6
 800611c:	e9c4 2300 	strd	r2, r3, [r4]
 8006120:	4639      	mov	r1, r7
 8006122:	f7fa f819 	bl	8000158 <__aeabi_dsub>
 8006126:	a396      	add	r3, pc, #600	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	e7de      	b.n	80060ec <__ieee754_rem_pio2+0x64>
 800612e:	f7fa f815 	bl	800015c <__adddf3>
 8006132:	45aa      	cmp	sl, r5
 8006134:	4606      	mov	r6, r0
 8006136:	460f      	mov	r7, r1
 8006138:	d016      	beq.n	8006168 <__ieee754_rem_pio2+0xe0>
 800613a:	a38d      	add	r3, pc, #564	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f7fa f80c 	bl	800015c <__adddf3>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4630      	mov	r0, r6
 800614a:	e9c4 2300 	strd	r2, r3, [r4]
 800614e:	4639      	mov	r1, r7
 8006150:	f7fa f802 	bl	8000158 <__aeabi_dsub>
 8006154:	a386      	add	r3, pc, #536	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	f7f9 ffff 	bl	800015c <__adddf3>
 800615e:	f04f 35ff 	mov.w	r5, #4294967295
 8006162:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006166:	e7c6      	b.n	80060f6 <__ieee754_rem_pio2+0x6e>
 8006168:	a383      	add	r3, pc, #524	; (adr r3, 8006378 <__ieee754_rem_pio2+0x2f0>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f7f9 fff5 	bl	800015c <__adddf3>
 8006172:	a383      	add	r3, pc, #524	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	4606      	mov	r6, r0
 800617a:	460f      	mov	r7, r1
 800617c:	f7f9 ffee 	bl	800015c <__adddf3>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4630      	mov	r0, r6
 8006186:	e9c4 2300 	strd	r2, r3, [r4]
 800618a:	4639      	mov	r1, r7
 800618c:	f7f9 ffe4 	bl	8000158 <__aeabi_dsub>
 8006190:	a37b      	add	r3, pc, #492	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	e7e0      	b.n	800615a <__ieee754_rem_pio2+0xd2>
 8006198:	4a84      	ldr	r2, [pc, #528]	; (80063ac <__ieee754_rem_pio2+0x324>)
 800619a:	4592      	cmp	sl, r2
 800619c:	f300 80d5 	bgt.w	800634a <__ieee754_rem_pio2+0x2c2>
 80061a0:	f000 fed0 	bl	8006f44 <fabs>
 80061a4:	a378      	add	r3, pc, #480	; (adr r3, 8006388 <__ieee754_rem_pio2+0x300>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	f7fa f98b 	bl	80004c8 <__aeabi_dmul>
 80061b2:	2200      	movs	r2, #0
 80061b4:	4b7e      	ldr	r3, [pc, #504]	; (80063b0 <__ieee754_rem_pio2+0x328>)
 80061b6:	f7f9 ffd1 	bl	800015c <__adddf3>
 80061ba:	f7fa fc35 	bl	8000a28 <__aeabi_d2iz>
 80061be:	4605      	mov	r5, r0
 80061c0:	f7fa f918 	bl	80003f4 <__aeabi_i2d>
 80061c4:	4602      	mov	r2, r0
 80061c6:	460b      	mov	r3, r1
 80061c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061cc:	a366      	add	r3, pc, #408	; (adr r3, 8006368 <__ieee754_rem_pio2+0x2e0>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f7fa f979 	bl	80004c8 <__aeabi_dmul>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4630      	mov	r0, r6
 80061dc:	4639      	mov	r1, r7
 80061de:	f7f9 ffbb 	bl	8000158 <__aeabi_dsub>
 80061e2:	a363      	add	r3, pc, #396	; (adr r3, 8006370 <__ieee754_rem_pio2+0x2e8>)
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	4680      	mov	r8, r0
 80061ea:	4689      	mov	r9, r1
 80061ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f0:	f7fa f96a 	bl	80004c8 <__aeabi_dmul>
 80061f4:	2d1f      	cmp	r5, #31
 80061f6:	4606      	mov	r6, r0
 80061f8:	460f      	mov	r7, r1
 80061fa:	dc0e      	bgt.n	800621a <__ieee754_rem_pio2+0x192>
 80061fc:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <__ieee754_rem_pio2+0x32c>)
 80061fe:	1e6a      	subs	r2, r5, #1
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	4553      	cmp	r3, sl
 8006206:	d008      	beq.n	800621a <__ieee754_rem_pio2+0x192>
 8006208:	4632      	mov	r2, r6
 800620a:	463b      	mov	r3, r7
 800620c:	4640      	mov	r0, r8
 800620e:	4649      	mov	r1, r9
 8006210:	f7f9 ffa2 	bl	8000158 <__aeabi_dsub>
 8006214:	e9c4 0100 	strd	r0, r1, [r4]
 8006218:	e013      	b.n	8006242 <__ieee754_rem_pio2+0x1ba>
 800621a:	463b      	mov	r3, r7
 800621c:	4632      	mov	r2, r6
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7f9 ff99 	bl	8000158 <__aeabi_dsub>
 8006226:	ea4f 532a 	mov.w	r3, sl, asr #20
 800622a:	9305      	str	r3, [sp, #20]
 800622c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006230:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8006234:	f1ba 0f10 	cmp.w	sl, #16
 8006238:	dc1f      	bgt.n	800627a <__ieee754_rem_pio2+0x1f2>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	e9c4 2300 	strd	r2, r3, [r4]
 8006242:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8006246:	4640      	mov	r0, r8
 8006248:	4653      	mov	r3, sl
 800624a:	4649      	mov	r1, r9
 800624c:	f7f9 ff84 	bl	8000158 <__aeabi_dsub>
 8006250:	4632      	mov	r2, r6
 8006252:	463b      	mov	r3, r7
 8006254:	f7f9 ff80 	bl	8000158 <__aeabi_dsub>
 8006258:	460b      	mov	r3, r1
 800625a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800625e:	9904      	ldr	r1, [sp, #16]
 8006260:	4602      	mov	r2, r0
 8006262:	2900      	cmp	r1, #0
 8006264:	f6bf af47 	bge.w	80060f6 <__ieee754_rem_pio2+0x6e>
 8006268:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800626c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006270:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006274:	60e3      	str	r3, [r4, #12]
 8006276:	426d      	negs	r5, r5
 8006278:	e73d      	b.n	80060f6 <__ieee754_rem_pio2+0x6e>
 800627a:	a33f      	add	r3, pc, #252	; (adr r3, 8006378 <__ieee754_rem_pio2+0x2f0>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006284:	f7fa f920 	bl	80004c8 <__aeabi_dmul>
 8006288:	4606      	mov	r6, r0
 800628a:	460f      	mov	r7, r1
 800628c:	4602      	mov	r2, r0
 800628e:	460b      	mov	r3, r1
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	f7f9 ff60 	bl	8000158 <__aeabi_dsub>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4682      	mov	sl, r0
 800629e:	468b      	mov	fp, r1
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7f9 ff58 	bl	8000158 <__aeabi_dsub>
 80062a8:	4632      	mov	r2, r6
 80062aa:	463b      	mov	r3, r7
 80062ac:	f7f9 ff54 	bl	8000158 <__aeabi_dsub>
 80062b0:	a333      	add	r3, pc, #204	; (adr r3, 8006380 <__ieee754_rem_pio2+0x2f8>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	4606      	mov	r6, r0
 80062b8:	460f      	mov	r7, r1
 80062ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062be:	f7fa f903 	bl	80004c8 <__aeabi_dmul>
 80062c2:	4632      	mov	r2, r6
 80062c4:	463b      	mov	r3, r7
 80062c6:	f7f9 ff47 	bl	8000158 <__aeabi_dsub>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4606      	mov	r6, r0
 80062d0:	460f      	mov	r7, r1
 80062d2:	4650      	mov	r0, sl
 80062d4:	4659      	mov	r1, fp
 80062d6:	f7f9 ff3f 	bl	8000158 <__aeabi_dsub>
 80062da:	9a05      	ldr	r2, [sp, #20]
 80062dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b31      	cmp	r3, #49	; 0x31
 80062e4:	dc06      	bgt.n	80062f4 <__ieee754_rem_pio2+0x26c>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	46d0      	mov	r8, sl
 80062ec:	46d9      	mov	r9, fp
 80062ee:	e9c4 2300 	strd	r2, r3, [r4]
 80062f2:	e7a6      	b.n	8006242 <__ieee754_rem_pio2+0x1ba>
 80062f4:	a326      	add	r3, pc, #152	; (adr r3, 8006390 <__ieee754_rem_pio2+0x308>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062fe:	f7fa f8e3 	bl	80004c8 <__aeabi_dmul>
 8006302:	4606      	mov	r6, r0
 8006304:	460f      	mov	r7, r1
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4650      	mov	r0, sl
 800630c:	4659      	mov	r1, fp
 800630e:	f7f9 ff23 	bl	8000158 <__aeabi_dsub>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4680      	mov	r8, r0
 8006318:	4689      	mov	r9, r1
 800631a:	4650      	mov	r0, sl
 800631c:	4659      	mov	r1, fp
 800631e:	f7f9 ff1b 	bl	8000158 <__aeabi_dsub>
 8006322:	4632      	mov	r2, r6
 8006324:	463b      	mov	r3, r7
 8006326:	f7f9 ff17 	bl	8000158 <__aeabi_dsub>
 800632a:	a31b      	add	r3, pc, #108	; (adr r3, 8006398 <__ieee754_rem_pio2+0x310>)
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	4606      	mov	r6, r0
 8006332:	460f      	mov	r7, r1
 8006334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006338:	f7fa f8c6 	bl	80004c8 <__aeabi_dmul>
 800633c:	4632      	mov	r2, r6
 800633e:	463b      	mov	r3, r7
 8006340:	f7f9 ff0a 	bl	8000158 <__aeabi_dsub>
 8006344:	4606      	mov	r6, r0
 8006346:	460f      	mov	r7, r1
 8006348:	e75e      	b.n	8006208 <__ieee754_rem_pio2+0x180>
 800634a:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <__ieee754_rem_pio2+0x330>)
 800634c:	4592      	cmp	sl, r2
 800634e:	dd35      	ble.n	80063bc <__ieee754_rem_pio2+0x334>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	f7f9 ff00 	bl	8000158 <__aeabi_dsub>
 8006358:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800635c:	e9c4 0100 	strd	r0, r1, [r4]
 8006360:	e6a2      	b.n	80060a8 <__ieee754_rem_pio2+0x20>
 8006362:	bf00      	nop
 8006364:	f3af 8000 	nop.w
 8006368:	54400000 	.word	0x54400000
 800636c:	3ff921fb 	.word	0x3ff921fb
 8006370:	1a626331 	.word	0x1a626331
 8006374:	3dd0b461 	.word	0x3dd0b461
 8006378:	1a600000 	.word	0x1a600000
 800637c:	3dd0b461 	.word	0x3dd0b461
 8006380:	2e037073 	.word	0x2e037073
 8006384:	3ba3198a 	.word	0x3ba3198a
 8006388:	6dc9c883 	.word	0x6dc9c883
 800638c:	3fe45f30 	.word	0x3fe45f30
 8006390:	2e000000 	.word	0x2e000000
 8006394:	3ba3198a 	.word	0x3ba3198a
 8006398:	252049c1 	.word	0x252049c1
 800639c:	397b839a 	.word	0x397b839a
 80063a0:	3fe921fb 	.word	0x3fe921fb
 80063a4:	4002d97b 	.word	0x4002d97b
 80063a8:	3ff921fb 	.word	0x3ff921fb
 80063ac:	413921fb 	.word	0x413921fb
 80063b0:	3fe00000 	.word	0x3fe00000
 80063b4:	080071b4 	.word	0x080071b4
 80063b8:	7fefffff 	.word	0x7fefffff
 80063bc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80063c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80063c4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80063c8:	460f      	mov	r7, r1
 80063ca:	4606      	mov	r6, r0
 80063cc:	f7fa fb2c 	bl	8000a28 <__aeabi_d2iz>
 80063d0:	f7fa f810 	bl	80003f4 <__aeabi_i2d>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063e0:	f7f9 feba 	bl	8000158 <__aeabi_dsub>
 80063e4:	2200      	movs	r2, #0
 80063e6:	4b22      	ldr	r3, [pc, #136]	; (8006470 <__ieee754_rem_pio2+0x3e8>)
 80063e8:	f7fa f86e 	bl	80004c8 <__aeabi_dmul>
 80063ec:	460f      	mov	r7, r1
 80063ee:	4606      	mov	r6, r0
 80063f0:	f7fa fb1a 	bl	8000a28 <__aeabi_d2iz>
 80063f4:	f7f9 fffe 	bl	80003f4 <__aeabi_i2d>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4630      	mov	r0, r6
 80063fe:	4639      	mov	r1, r7
 8006400:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006404:	f7f9 fea8 	bl	8000158 <__aeabi_dsub>
 8006408:	2200      	movs	r2, #0
 800640a:	4b19      	ldr	r3, [pc, #100]	; (8006470 <__ieee754_rem_pio2+0x3e8>)
 800640c:	f7fa f85c 	bl	80004c8 <__aeabi_dmul>
 8006410:	f04f 0803 	mov.w	r8, #3
 8006414:	2600      	movs	r6, #0
 8006416:	2700      	movs	r7, #0
 8006418:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800641c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8006420:	4632      	mov	r2, r6
 8006422:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8006426:	463b      	mov	r3, r7
 8006428:	46c2      	mov	sl, r8
 800642a:	f108 38ff 	add.w	r8, r8, #4294967295
 800642e:	f7fa fab3 	bl	8000998 <__aeabi_dcmpeq>
 8006432:	2800      	cmp	r0, #0
 8006434:	d1f4      	bne.n	8006420 <__ieee754_rem_pio2+0x398>
 8006436:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <__ieee754_rem_pio2+0x3ec>)
 8006438:	462a      	mov	r2, r5
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	2302      	movs	r3, #2
 800643e:	4621      	mov	r1, r4
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	a806      	add	r0, sp, #24
 8006444:	4653      	mov	r3, sl
 8006446:	f000 f985 	bl	8006754 <__kernel_rem_pio2>
 800644a:	9b04      	ldr	r3, [sp, #16]
 800644c:	4605      	mov	r5, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	f6bf ae51 	bge.w	80060f6 <__ieee754_rem_pio2+0x6e>
 8006454:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800645c:	e9c4 2300 	strd	r2, r3, [r4]
 8006460:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006468:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800646c:	e703      	b.n	8006276 <__ieee754_rem_pio2+0x1ee>
 800646e:	bf00      	nop
 8006470:	41700000 	.word	0x41700000
 8006474:	08007234 	.word	0x08007234

08006478 <__ieee754_sqrt>:
 8006478:	f8df c158 	ldr.w	ip, [pc, #344]	; 80065d4 <__ieee754_sqrt+0x15c>
 800647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006480:	ea3c 0c01 	bics.w	ip, ip, r1
 8006484:	4606      	mov	r6, r0
 8006486:	460d      	mov	r5, r1
 8006488:	460c      	mov	r4, r1
 800648a:	460a      	mov	r2, r1
 800648c:	4607      	mov	r7, r0
 800648e:	4603      	mov	r3, r0
 8006490:	d10f      	bne.n	80064b2 <__ieee754_sqrt+0x3a>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	f7fa f817 	bl	80004c8 <__aeabi_dmul>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4630      	mov	r0, r6
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7f9 fe5b 	bl	800015c <__adddf3>
 80064a6:	4606      	mov	r6, r0
 80064a8:	460d      	mov	r5, r1
 80064aa:	4630      	mov	r0, r6
 80064ac:	4629      	mov	r1, r5
 80064ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b2:	2900      	cmp	r1, #0
 80064b4:	dc0e      	bgt.n	80064d4 <__ieee754_sqrt+0x5c>
 80064b6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80064ba:	ea5c 0707 	orrs.w	r7, ip, r7
 80064be:	d0f4      	beq.n	80064aa <__ieee754_sqrt+0x32>
 80064c0:	b141      	cbz	r1, 80064d4 <__ieee754_sqrt+0x5c>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	f7f9 fe47 	bl	8000158 <__aeabi_dsub>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	f7fa f925 	bl	800071c <__aeabi_ddiv>
 80064d2:	e7e8      	b.n	80064a6 <__ieee754_sqrt+0x2e>
 80064d4:	1521      	asrs	r1, r4, #20
 80064d6:	d075      	beq.n	80065c4 <__ieee754_sqrt+0x14c>
 80064d8:	07cc      	lsls	r4, r1, #31
 80064da:	f04f 0400 	mov.w	r4, #0
 80064de:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80064e2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80064e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064ea:	bf5e      	ittt	pl
 80064ec:	0fd9      	lsrpl	r1, r3, #31
 80064ee:	005b      	lslpl	r3, r3, #1
 80064f0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80064f4:	0fd9      	lsrs	r1, r3, #31
 80064f6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80064fa:	2516      	movs	r5, #22
 80064fc:	4620      	mov	r0, r4
 80064fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006502:	107f      	asrs	r7, r7, #1
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	1846      	adds	r6, r0, r1
 8006508:	4296      	cmp	r6, r2
 800650a:	bfde      	ittt	le
 800650c:	1b92      	suble	r2, r2, r6
 800650e:	1870      	addle	r0, r6, r1
 8006510:	1864      	addle	r4, r4, r1
 8006512:	0052      	lsls	r2, r2, #1
 8006514:	3d01      	subs	r5, #1
 8006516:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800651a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800651e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006522:	d1f0      	bne.n	8006506 <__ieee754_sqrt+0x8e>
 8006524:	4629      	mov	r1, r5
 8006526:	f04f 0e20 	mov.w	lr, #32
 800652a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800652e:	4282      	cmp	r2, r0
 8006530:	eb06 0c05 	add.w	ip, r6, r5
 8006534:	dc02      	bgt.n	800653c <__ieee754_sqrt+0xc4>
 8006536:	d113      	bne.n	8006560 <__ieee754_sqrt+0xe8>
 8006538:	459c      	cmp	ip, r3
 800653a:	d811      	bhi.n	8006560 <__ieee754_sqrt+0xe8>
 800653c:	f1bc 0f00 	cmp.w	ip, #0
 8006540:	eb0c 0506 	add.w	r5, ip, r6
 8006544:	da43      	bge.n	80065ce <__ieee754_sqrt+0x156>
 8006546:	2d00      	cmp	r5, #0
 8006548:	db41      	blt.n	80065ce <__ieee754_sqrt+0x156>
 800654a:	f100 0801 	add.w	r8, r0, #1
 800654e:	1a12      	subs	r2, r2, r0
 8006550:	4640      	mov	r0, r8
 8006552:	459c      	cmp	ip, r3
 8006554:	bf88      	it	hi
 8006556:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800655a:	eba3 030c 	sub.w	r3, r3, ip
 800655e:	4431      	add	r1, r6
 8006560:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006564:	f1be 0e01 	subs.w	lr, lr, #1
 8006568:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800656c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006570:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006574:	d1db      	bne.n	800652e <__ieee754_sqrt+0xb6>
 8006576:	4313      	orrs	r3, r2
 8006578:	d006      	beq.n	8006588 <__ieee754_sqrt+0x110>
 800657a:	1c48      	adds	r0, r1, #1
 800657c:	bf0b      	itete	eq
 800657e:	4671      	moveq	r1, lr
 8006580:	3101      	addne	r1, #1
 8006582:	3401      	addeq	r4, #1
 8006584:	f021 0101 	bicne.w	r1, r1, #1
 8006588:	1063      	asrs	r3, r4, #1
 800658a:	0849      	lsrs	r1, r1, #1
 800658c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006590:	07e2      	lsls	r2, r4, #31
 8006592:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006596:	bf48      	it	mi
 8006598:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800659c:	460e      	mov	r6, r1
 800659e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80065a2:	e782      	b.n	80064aa <__ieee754_sqrt+0x32>
 80065a4:	0ada      	lsrs	r2, r3, #11
 80065a6:	3815      	subs	r0, #21
 80065a8:	055b      	lsls	r3, r3, #21
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	d0fa      	beq.n	80065a4 <__ieee754_sqrt+0x12c>
 80065ae:	02d5      	lsls	r5, r2, #11
 80065b0:	d50a      	bpl.n	80065c8 <__ieee754_sqrt+0x150>
 80065b2:	f1c1 0420 	rsb	r4, r1, #32
 80065b6:	fa23 f404 	lsr.w	r4, r3, r4
 80065ba:	1e4d      	subs	r5, r1, #1
 80065bc:	408b      	lsls	r3, r1
 80065be:	4322      	orrs	r2, r4
 80065c0:	1b41      	subs	r1, r0, r5
 80065c2:	e789      	b.n	80064d8 <__ieee754_sqrt+0x60>
 80065c4:	4608      	mov	r0, r1
 80065c6:	e7f0      	b.n	80065aa <__ieee754_sqrt+0x132>
 80065c8:	0052      	lsls	r2, r2, #1
 80065ca:	3101      	adds	r1, #1
 80065cc:	e7ef      	b.n	80065ae <__ieee754_sqrt+0x136>
 80065ce:	4680      	mov	r8, r0
 80065d0:	e7bd      	b.n	800654e <__ieee754_sqrt+0xd6>
 80065d2:	bf00      	nop
 80065d4:	7ff00000 	.word	0x7ff00000

080065d8 <__kernel_cos>:
 80065d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80065e0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80065e4:	4680      	mov	r8, r0
 80065e6:	460f      	mov	r7, r1
 80065e8:	e9cd 2300 	strd	r2, r3, [sp]
 80065ec:	da04      	bge.n	80065f8 <__kernel_cos+0x20>
 80065ee:	f7fa fa1b 	bl	8000a28 <__aeabi_d2iz>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	f000 8086 	beq.w	8006704 <__kernel_cos+0x12c>
 80065f8:	4642      	mov	r2, r8
 80065fa:	463b      	mov	r3, r7
 80065fc:	4640      	mov	r0, r8
 80065fe:	4639      	mov	r1, r7
 8006600:	f7f9 ff62 	bl	80004c8 <__aeabi_dmul>
 8006604:	2200      	movs	r2, #0
 8006606:	4b4e      	ldr	r3, [pc, #312]	; (8006740 <__kernel_cos+0x168>)
 8006608:	4604      	mov	r4, r0
 800660a:	460d      	mov	r5, r1
 800660c:	f7f9 ff5c 	bl	80004c8 <__aeabi_dmul>
 8006610:	a33f      	add	r3, pc, #252	; (adr r3, 8006710 <__kernel_cos+0x138>)
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	4682      	mov	sl, r0
 8006618:	468b      	mov	fp, r1
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	f7f9 ff53 	bl	80004c8 <__aeabi_dmul>
 8006622:	a33d      	add	r3, pc, #244	; (adr r3, 8006718 <__kernel_cos+0x140>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7f9 fd98 	bl	800015c <__adddf3>
 800662c:	4622      	mov	r2, r4
 800662e:	462b      	mov	r3, r5
 8006630:	f7f9 ff4a 	bl	80004c8 <__aeabi_dmul>
 8006634:	a33a      	add	r3, pc, #232	; (adr r3, 8006720 <__kernel_cos+0x148>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7f9 fd8d 	bl	8000158 <__aeabi_dsub>
 800663e:	4622      	mov	r2, r4
 8006640:	462b      	mov	r3, r5
 8006642:	f7f9 ff41 	bl	80004c8 <__aeabi_dmul>
 8006646:	a338      	add	r3, pc, #224	; (adr r3, 8006728 <__kernel_cos+0x150>)
 8006648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664c:	f7f9 fd86 	bl	800015c <__adddf3>
 8006650:	4622      	mov	r2, r4
 8006652:	462b      	mov	r3, r5
 8006654:	f7f9 ff38 	bl	80004c8 <__aeabi_dmul>
 8006658:	a335      	add	r3, pc, #212	; (adr r3, 8006730 <__kernel_cos+0x158>)
 800665a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665e:	f7f9 fd7b 	bl	8000158 <__aeabi_dsub>
 8006662:	4622      	mov	r2, r4
 8006664:	462b      	mov	r3, r5
 8006666:	f7f9 ff2f 	bl	80004c8 <__aeabi_dmul>
 800666a:	a333      	add	r3, pc, #204	; (adr r3, 8006738 <__kernel_cos+0x160>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f7f9 fd74 	bl	800015c <__adddf3>
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	f7f9 ff26 	bl	80004c8 <__aeabi_dmul>
 800667c:	4622      	mov	r2, r4
 800667e:	462b      	mov	r3, r5
 8006680:	f7f9 ff22 	bl	80004c8 <__aeabi_dmul>
 8006684:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006688:	4604      	mov	r4, r0
 800668a:	460d      	mov	r5, r1
 800668c:	4640      	mov	r0, r8
 800668e:	4639      	mov	r1, r7
 8006690:	f7f9 ff1a 	bl	80004c8 <__aeabi_dmul>
 8006694:	460b      	mov	r3, r1
 8006696:	4602      	mov	r2, r0
 8006698:	4629      	mov	r1, r5
 800669a:	4620      	mov	r0, r4
 800669c:	f7f9 fd5c 	bl	8000158 <__aeabi_dsub>
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <__kernel_cos+0x16c>)
 80066a2:	4680      	mov	r8, r0
 80066a4:	429e      	cmp	r6, r3
 80066a6:	4689      	mov	r9, r1
 80066a8:	dc0e      	bgt.n	80066c8 <__kernel_cos+0xf0>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4650      	mov	r0, sl
 80066b0:	4659      	mov	r1, fp
 80066b2:	f7f9 fd51 	bl	8000158 <__aeabi_dsub>
 80066b6:	4602      	mov	r2, r0
 80066b8:	2000      	movs	r0, #0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4922      	ldr	r1, [pc, #136]	; (8006748 <__kernel_cos+0x170>)
 80066be:	f7f9 fd4b 	bl	8000158 <__aeabi_dsub>
 80066c2:	b003      	add	sp, #12
 80066c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c8:	2400      	movs	r4, #0
 80066ca:	4b20      	ldr	r3, [pc, #128]	; (800674c <__kernel_cos+0x174>)
 80066cc:	4622      	mov	r2, r4
 80066ce:	429e      	cmp	r6, r3
 80066d0:	bfcc      	ite	gt
 80066d2:	4d1f      	ldrgt	r5, [pc, #124]	; (8006750 <__kernel_cos+0x178>)
 80066d4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80066d8:	462b      	mov	r3, r5
 80066da:	2000      	movs	r0, #0
 80066dc:	491a      	ldr	r1, [pc, #104]	; (8006748 <__kernel_cos+0x170>)
 80066de:	f7f9 fd3b 	bl	8000158 <__aeabi_dsub>
 80066e2:	4622      	mov	r2, r4
 80066e4:	4606      	mov	r6, r0
 80066e6:	460f      	mov	r7, r1
 80066e8:	462b      	mov	r3, r5
 80066ea:	4650      	mov	r0, sl
 80066ec:	4659      	mov	r1, fp
 80066ee:	f7f9 fd33 	bl	8000158 <__aeabi_dsub>
 80066f2:	4642      	mov	r2, r8
 80066f4:	464b      	mov	r3, r9
 80066f6:	f7f9 fd2f 	bl	8000158 <__aeabi_dsub>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4630      	mov	r0, r6
 8006700:	4639      	mov	r1, r7
 8006702:	e7dc      	b.n	80066be <__kernel_cos+0xe6>
 8006704:	2000      	movs	r0, #0
 8006706:	4910      	ldr	r1, [pc, #64]	; (8006748 <__kernel_cos+0x170>)
 8006708:	e7db      	b.n	80066c2 <__kernel_cos+0xea>
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w
 8006710:	be8838d4 	.word	0xbe8838d4
 8006714:	bda8fae9 	.word	0xbda8fae9
 8006718:	bdb4b1c4 	.word	0xbdb4b1c4
 800671c:	3e21ee9e 	.word	0x3e21ee9e
 8006720:	809c52ad 	.word	0x809c52ad
 8006724:	3e927e4f 	.word	0x3e927e4f
 8006728:	19cb1590 	.word	0x19cb1590
 800672c:	3efa01a0 	.word	0x3efa01a0
 8006730:	16c15177 	.word	0x16c15177
 8006734:	3f56c16c 	.word	0x3f56c16c
 8006738:	5555554c 	.word	0x5555554c
 800673c:	3fa55555 	.word	0x3fa55555
 8006740:	3fe00000 	.word	0x3fe00000
 8006744:	3fd33332 	.word	0x3fd33332
 8006748:	3ff00000 	.word	0x3ff00000
 800674c:	3fe90000 	.word	0x3fe90000
 8006750:	3fd20000 	.word	0x3fd20000

08006754 <__kernel_rem_pio2>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800675c:	9308      	str	r3, [sp, #32]
 800675e:	9106      	str	r1, [sp, #24]
 8006760:	4bb6      	ldr	r3, [pc, #728]	; (8006a3c <__kernel_rem_pio2+0x2e8>)
 8006762:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006764:	f112 0f14 	cmn.w	r2, #20
 8006768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800676c:	bfa8      	it	ge
 800676e:	1ed4      	subge	r4, r2, #3
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	9b08      	ldr	r3, [sp, #32]
 8006774:	bfb8      	it	lt
 8006776:	2400      	movlt	r4, #0
 8006778:	f103 33ff 	add.w	r3, r3, #4294967295
 800677c:	9307      	str	r3, [sp, #28]
 800677e:	bfa4      	itt	ge
 8006780:	2318      	movge	r3, #24
 8006782:	fb94 f4f3 	sdivge	r4, r4, r3
 8006786:	f06f 0317 	mvn.w	r3, #23
 800678a:	fb04 3303 	mla	r3, r4, r3, r3
 800678e:	eb03 0b02 	add.w	fp, r3, r2
 8006792:	9a07      	ldr	r2, [sp, #28]
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	1aa7      	subs	r7, r4, r2
 8006798:	eb03 0802 	add.w	r8, r3, r2
 800679c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800679e:	2500      	movs	r5, #0
 80067a0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80067a4:	2200      	movs	r2, #0
 80067a6:	2300      	movs	r3, #0
 80067a8:	9009      	str	r0, [sp, #36]	; 0x24
 80067aa:	ae20      	add	r6, sp, #128	; 0x80
 80067ac:	4545      	cmp	r5, r8
 80067ae:	dd14      	ble.n	80067da <__kernel_rem_pio2+0x86>
 80067b0:	f04f 0800 	mov.w	r8, #0
 80067b4:	9a08      	ldr	r2, [sp, #32]
 80067b6:	ab20      	add	r3, sp, #128	; 0x80
 80067b8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80067bc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 80067c0:	9b02      	ldr	r3, [sp, #8]
 80067c2:	4598      	cmp	r8, r3
 80067c4:	dc35      	bgt.n	8006832 <__kernel_rem_pio2+0xde>
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	2200      	movs	r2, #0
 80067ca:	f1a3 0908 	sub.w	r9, r3, #8
 80067ce:	2300      	movs	r3, #0
 80067d0:	462f      	mov	r7, r5
 80067d2:	2600      	movs	r6, #0
 80067d4:	e9cd 2300 	strd	r2, r3, [sp]
 80067d8:	e01f      	b.n	800681a <__kernel_rem_pio2+0xc6>
 80067da:	42ef      	cmn	r7, r5
 80067dc:	d40b      	bmi.n	80067f6 <__kernel_rem_pio2+0xa2>
 80067de:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80067e2:	e9cd 2300 	strd	r2, r3, [sp]
 80067e6:	f7f9 fe05 	bl	80003f4 <__aeabi_i2d>
 80067ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ee:	e8e6 0102 	strd	r0, r1, [r6], #8
 80067f2:	3501      	adds	r5, #1
 80067f4:	e7da      	b.n	80067ac <__kernel_rem_pio2+0x58>
 80067f6:	4610      	mov	r0, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	e7f8      	b.n	80067ee <__kernel_rem_pio2+0x9a>
 80067fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006800:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006804:	f7f9 fe60 	bl	80004c8 <__aeabi_dmul>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006810:	f7f9 fca4 	bl	800015c <__adddf3>
 8006814:	e9cd 0100 	strd	r0, r1, [sp]
 8006818:	3601      	adds	r6, #1
 800681a:	9b07      	ldr	r3, [sp, #28]
 800681c:	3f08      	subs	r7, #8
 800681e:	429e      	cmp	r6, r3
 8006820:	ddec      	ble.n	80067fc <__kernel_rem_pio2+0xa8>
 8006822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006826:	f108 0801 	add.w	r8, r8, #1
 800682a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800682e:	3508      	adds	r5, #8
 8006830:	e7c6      	b.n	80067c0 <__kernel_rem_pio2+0x6c>
 8006832:	9b02      	ldr	r3, [sp, #8]
 8006834:	aa0c      	add	r2, sp, #48	; 0x30
 8006836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800683a:	930b      	str	r3, [sp, #44]	; 0x2c
 800683c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800683e:	9e02      	ldr	r6, [sp, #8]
 8006840:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006844:	930a      	str	r3, [sp, #40]	; 0x28
 8006846:	ab98      	add	r3, sp, #608	; 0x260
 8006848:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800684c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006850:	ab70      	add	r3, sp, #448	; 0x1c0
 8006852:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8006856:	46d0      	mov	r8, sl
 8006858:	46b1      	mov	r9, r6
 800685a:	af0c      	add	r7, sp, #48	; 0x30
 800685c:	9700      	str	r7, [sp, #0]
 800685e:	f1b9 0f00 	cmp.w	r9, #0
 8006862:	f1a8 0808 	sub.w	r8, r8, #8
 8006866:	dc71      	bgt.n	800694c <__kernel_rem_pio2+0x1f8>
 8006868:	465a      	mov	r2, fp
 800686a:	4620      	mov	r0, r4
 800686c:	4629      	mov	r1, r5
 800686e:	f000 fbf7 	bl	8007060 <scalbn>
 8006872:	2200      	movs	r2, #0
 8006874:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006878:	4604      	mov	r4, r0
 800687a:	460d      	mov	r5, r1
 800687c:	f7f9 fe24 	bl	80004c8 <__aeabi_dmul>
 8006880:	f000 fb66 	bl	8006f50 <floor>
 8006884:	2200      	movs	r2, #0
 8006886:	4b6e      	ldr	r3, [pc, #440]	; (8006a40 <__kernel_rem_pio2+0x2ec>)
 8006888:	f7f9 fe1e 	bl	80004c8 <__aeabi_dmul>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4620      	mov	r0, r4
 8006892:	4629      	mov	r1, r5
 8006894:	f7f9 fc60 	bl	8000158 <__aeabi_dsub>
 8006898:	460d      	mov	r5, r1
 800689a:	4604      	mov	r4, r0
 800689c:	f7fa f8c4 	bl	8000a28 <__aeabi_d2iz>
 80068a0:	9004      	str	r0, [sp, #16]
 80068a2:	f7f9 fda7 	bl	80003f4 <__aeabi_i2d>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4620      	mov	r0, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7f9 fc53 	bl	8000158 <__aeabi_dsub>
 80068b2:	f1bb 0f00 	cmp.w	fp, #0
 80068b6:	4680      	mov	r8, r0
 80068b8:	4689      	mov	r9, r1
 80068ba:	dd70      	ble.n	800699e <__kernel_rem_pio2+0x24a>
 80068bc:	1e72      	subs	r2, r6, #1
 80068be:	ab0c      	add	r3, sp, #48	; 0x30
 80068c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80068c4:	9c04      	ldr	r4, [sp, #16]
 80068c6:	f1cb 0118 	rsb	r1, fp, #24
 80068ca:	fa40 f301 	asr.w	r3, r0, r1
 80068ce:	441c      	add	r4, r3
 80068d0:	408b      	lsls	r3, r1
 80068d2:	1ac0      	subs	r0, r0, r3
 80068d4:	ab0c      	add	r3, sp, #48	; 0x30
 80068d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80068da:	f1cb 0317 	rsb	r3, fp, #23
 80068de:	9404      	str	r4, [sp, #16]
 80068e0:	fa40 f303 	asr.w	r3, r0, r3
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	9b00      	ldr	r3, [sp, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dd66      	ble.n	80069ba <__kernel_rem_pio2+0x266>
 80068ec:	2200      	movs	r2, #0
 80068ee:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80068f2:	4614      	mov	r4, r2
 80068f4:	9b04      	ldr	r3, [sp, #16]
 80068f6:	3301      	adds	r3, #1
 80068f8:	9304      	str	r3, [sp, #16]
 80068fa:	4296      	cmp	r6, r2
 80068fc:	f300 80ac 	bgt.w	8006a58 <__kernel_rem_pio2+0x304>
 8006900:	f1bb 0f00 	cmp.w	fp, #0
 8006904:	dd07      	ble.n	8006916 <__kernel_rem_pio2+0x1c2>
 8006906:	f1bb 0f01 	cmp.w	fp, #1
 800690a:	f000 80b4 	beq.w	8006a76 <__kernel_rem_pio2+0x322>
 800690e:	f1bb 0f02 	cmp.w	fp, #2
 8006912:	f000 80ba 	beq.w	8006a8a <__kernel_rem_pio2+0x336>
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d14e      	bne.n	80069ba <__kernel_rem_pio2+0x266>
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	2000      	movs	r0, #0
 8006922:	4948      	ldr	r1, [pc, #288]	; (8006a44 <__kernel_rem_pio2+0x2f0>)
 8006924:	f7f9 fc18 	bl	8000158 <__aeabi_dsub>
 8006928:	4680      	mov	r8, r0
 800692a:	4689      	mov	r9, r1
 800692c:	2c00      	cmp	r4, #0
 800692e:	d044      	beq.n	80069ba <__kernel_rem_pio2+0x266>
 8006930:	465a      	mov	r2, fp
 8006932:	2000      	movs	r0, #0
 8006934:	4943      	ldr	r1, [pc, #268]	; (8006a44 <__kernel_rem_pio2+0x2f0>)
 8006936:	f000 fb93 	bl	8007060 <scalbn>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4640      	mov	r0, r8
 8006940:	4649      	mov	r1, r9
 8006942:	f7f9 fc09 	bl	8000158 <__aeabi_dsub>
 8006946:	4680      	mov	r8, r0
 8006948:	4689      	mov	r9, r1
 800694a:	e036      	b.n	80069ba <__kernel_rem_pio2+0x266>
 800694c:	2200      	movs	r2, #0
 800694e:	4b3e      	ldr	r3, [pc, #248]	; (8006a48 <__kernel_rem_pio2+0x2f4>)
 8006950:	4620      	mov	r0, r4
 8006952:	4629      	mov	r1, r5
 8006954:	f7f9 fdb8 	bl	80004c8 <__aeabi_dmul>
 8006958:	f7fa f866 	bl	8000a28 <__aeabi_d2iz>
 800695c:	f7f9 fd4a 	bl	80003f4 <__aeabi_i2d>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006968:	2200      	movs	r2, #0
 800696a:	4b38      	ldr	r3, [pc, #224]	; (8006a4c <__kernel_rem_pio2+0x2f8>)
 800696c:	f7f9 fdac 	bl	80004c8 <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4620      	mov	r0, r4
 8006976:	4629      	mov	r1, r5
 8006978:	f7f9 fbee 	bl	8000158 <__aeabi_dsub>
 800697c:	f7fa f854 	bl	8000a28 <__aeabi_d2iz>
 8006980:	9b00      	ldr	r3, [sp, #0]
 8006982:	f109 39ff 	add.w	r9, r9, #4294967295
 8006986:	f843 0b04 	str.w	r0, [r3], #4
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006990:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006994:	f7f9 fbe2 	bl	800015c <__adddf3>
 8006998:	4604      	mov	r4, r0
 800699a:	460d      	mov	r5, r1
 800699c:	e75f      	b.n	800685e <__kernel_rem_pio2+0x10a>
 800699e:	d105      	bne.n	80069ac <__kernel_rem_pio2+0x258>
 80069a0:	1e73      	subs	r3, r6, #1
 80069a2:	aa0c      	add	r2, sp, #48	; 0x30
 80069a4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80069a8:	15c3      	asrs	r3, r0, #23
 80069aa:	e79b      	b.n	80068e4 <__kernel_rem_pio2+0x190>
 80069ac:	2200      	movs	r2, #0
 80069ae:	4b28      	ldr	r3, [pc, #160]	; (8006a50 <__kernel_rem_pio2+0x2fc>)
 80069b0:	f7fa f810 	bl	80009d4 <__aeabi_dcmpge>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	d13e      	bne.n	8006a36 <__kernel_rem_pio2+0x2e2>
 80069b8:	9000      	str	r0, [sp, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	2300      	movs	r3, #0
 80069be:	4640      	mov	r0, r8
 80069c0:	4649      	mov	r1, r9
 80069c2:	f7f9 ffe9 	bl	8000998 <__aeabi_dcmpeq>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f000 80b1 	beq.w	8006b2e <__kernel_rem_pio2+0x3da>
 80069cc:	1e74      	subs	r4, r6, #1
 80069ce:	4623      	mov	r3, r4
 80069d0:	2200      	movs	r2, #0
 80069d2:	9902      	ldr	r1, [sp, #8]
 80069d4:	428b      	cmp	r3, r1
 80069d6:	da5f      	bge.n	8006a98 <__kernel_rem_pio2+0x344>
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d074      	beq.n	8006ac6 <__kernel_rem_pio2+0x372>
 80069dc:	ab0c      	add	r3, sp, #48	; 0x30
 80069de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80069e2:	f1ab 0b18 	sub.w	fp, fp, #24
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 809f 	beq.w	8006b2a <__kernel_rem_pio2+0x3d6>
 80069ec:	465a      	mov	r2, fp
 80069ee:	2000      	movs	r0, #0
 80069f0:	4914      	ldr	r1, [pc, #80]	; (8006a44 <__kernel_rem_pio2+0x2f0>)
 80069f2:	f000 fb35 	bl	8007060 <scalbn>
 80069f6:	46a2      	mov	sl, r4
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	f04f 0800 	mov.w	r8, #0
 8006a00:	ab70      	add	r3, sp, #448	; 0x1c0
 8006a02:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006a48 <__kernel_rem_pio2+0x2f4>
 8006a06:	00e5      	lsls	r5, r4, #3
 8006a08:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006a0c:	f1ba 0f00 	cmp.w	sl, #0
 8006a10:	f280 80c3 	bge.w	8006b9a <__kernel_rem_pio2+0x446>
 8006a14:	4626      	mov	r6, r4
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	f2c0 80f5 	blt.w	8006c06 <__kernel_rem_pio2+0x4b2>
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <__kernel_rem_pio2+0x300>)
 8006a1e:	f04f 0a00 	mov.w	sl, #0
 8006a22:	9307      	str	r3, [sp, #28]
 8006a24:	ab70      	add	r3, sp, #448	; 0x1c0
 8006a26:	f04f 0b00 	mov.w	fp, #0
 8006a2a:	f04f 0800 	mov.w	r8, #0
 8006a2e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006a32:	1ba7      	subs	r7, r4, r6
 8006a34:	e0db      	b.n	8006bee <__kernel_rem_pio2+0x49a>
 8006a36:	2302      	movs	r3, #2
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	e757      	b.n	80068ec <__kernel_rem_pio2+0x198>
 8006a3c:	08007380 	.word	0x08007380
 8006a40:	40200000 	.word	0x40200000
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	3e700000 	.word	0x3e700000
 8006a4c:	41700000 	.word	0x41700000
 8006a50:	3fe00000 	.word	0x3fe00000
 8006a54:	08007340 	.word	0x08007340
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	b944      	cbnz	r4, 8006a6e <__kernel_rem_pio2+0x31a>
 8006a5c:	b11b      	cbz	r3, 8006a66 <__kernel_rem_pio2+0x312>
 8006a5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	2301      	movs	r3, #1
 8006a66:	461c      	mov	r4, r3
 8006a68:	3201      	adds	r2, #1
 8006a6a:	3704      	adds	r7, #4
 8006a6c:	e745      	b.n	80068fa <__kernel_rem_pio2+0x1a6>
 8006a6e:	1acb      	subs	r3, r1, r3
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	4623      	mov	r3, r4
 8006a74:	e7f7      	b.n	8006a66 <__kernel_rem_pio2+0x312>
 8006a76:	1e72      	subs	r2, r6, #1
 8006a78:	ab0c      	add	r3, sp, #48	; 0x30
 8006a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a82:	a90c      	add	r1, sp, #48	; 0x30
 8006a84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a88:	e745      	b.n	8006916 <__kernel_rem_pio2+0x1c2>
 8006a8a:	1e72      	subs	r2, r6, #1
 8006a8c:	ab0c      	add	r3, sp, #48	; 0x30
 8006a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a92:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006a96:	e7f4      	b.n	8006a82 <__kernel_rem_pio2+0x32e>
 8006a98:	a90c      	add	r1, sp, #48	; 0x30
 8006a9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	e796      	b.n	80069d2 <__kernel_rem_pio2+0x27e>
 8006aa4:	3401      	adds	r4, #1
 8006aa6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006aaa:	2a00      	cmp	r2, #0
 8006aac:	d0fa      	beq.n	8006aa4 <__kernel_rem_pio2+0x350>
 8006aae:	9b08      	ldr	r3, [sp, #32]
 8006ab0:	f106 0801 	add.w	r8, r6, #1
 8006ab4:	18f5      	adds	r5, r6, r3
 8006ab6:	ab20      	add	r3, sp, #128	; 0x80
 8006ab8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006abc:	4434      	add	r4, r6
 8006abe:	4544      	cmp	r4, r8
 8006ac0:	da04      	bge.n	8006acc <__kernel_rem_pio2+0x378>
 8006ac2:	4626      	mov	r6, r4
 8006ac4:	e6bf      	b.n	8006846 <__kernel_rem_pio2+0xf2>
 8006ac6:	2401      	movs	r4, #1
 8006ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aca:	e7ec      	b.n	8006aa6 <__kernel_rem_pio2+0x352>
 8006acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ace:	f04f 0900 	mov.w	r9, #0
 8006ad2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006ad6:	f7f9 fc8d 	bl	80003f4 <__aeabi_i2d>
 8006ada:	2600      	movs	r6, #0
 8006adc:	2700      	movs	r7, #0
 8006ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae0:	e9c5 0100 	strd	r0, r1, [r5]
 8006ae4:	3b08      	subs	r3, #8
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	9504      	str	r5, [sp, #16]
 8006aea:	9b07      	ldr	r3, [sp, #28]
 8006aec:	4599      	cmp	r9, r3
 8006aee:	dd05      	ble.n	8006afc <__kernel_rem_pio2+0x3a8>
 8006af0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8006af4:	f108 0801 	add.w	r8, r8, #1
 8006af8:	3508      	adds	r5, #8
 8006afa:	e7e0      	b.n	8006abe <__kernel_rem_pio2+0x36a>
 8006afc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8006b00:	9900      	ldr	r1, [sp, #0]
 8006b02:	f109 0901 	add.w	r9, r9, #1
 8006b06:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006b0a:	9100      	str	r1, [sp, #0]
 8006b0c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8006b10:	f8cd c010 	str.w	ip, [sp, #16]
 8006b14:	f7f9 fcd8 	bl	80004c8 <__aeabi_dmul>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	4639      	mov	r1, r7
 8006b20:	f7f9 fb1c 	bl	800015c <__adddf3>
 8006b24:	4606      	mov	r6, r0
 8006b26:	460f      	mov	r7, r1
 8006b28:	e7df      	b.n	8006aea <__kernel_rem_pio2+0x396>
 8006b2a:	3c01      	subs	r4, #1
 8006b2c:	e756      	b.n	80069dc <__kernel_rem_pio2+0x288>
 8006b2e:	f1cb 0200 	rsb	r2, fp, #0
 8006b32:	4640      	mov	r0, r8
 8006b34:	4649      	mov	r1, r9
 8006b36:	f000 fa93 	bl	8007060 <scalbn>
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4ba4      	ldr	r3, [pc, #656]	; (8006dd0 <__kernel_rem_pio2+0x67c>)
 8006b3e:	4604      	mov	r4, r0
 8006b40:	460d      	mov	r5, r1
 8006b42:	f7f9 ff47 	bl	80009d4 <__aeabi_dcmpge>
 8006b46:	b1f8      	cbz	r0, 8006b88 <__kernel_rem_pio2+0x434>
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4ba2      	ldr	r3, [pc, #648]	; (8006dd4 <__kernel_rem_pio2+0x680>)
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	4629      	mov	r1, r5
 8006b50:	f7f9 fcba 	bl	80004c8 <__aeabi_dmul>
 8006b54:	f7f9 ff68 	bl	8000a28 <__aeabi_d2iz>
 8006b58:	4607      	mov	r7, r0
 8006b5a:	f7f9 fc4b 	bl	80003f4 <__aeabi_i2d>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4b9b      	ldr	r3, [pc, #620]	; (8006dd0 <__kernel_rem_pio2+0x67c>)
 8006b62:	f7f9 fcb1 	bl	80004c8 <__aeabi_dmul>
 8006b66:	460b      	mov	r3, r1
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f7f9 faf3 	bl	8000158 <__aeabi_dsub>
 8006b72:	f7f9 ff59 	bl	8000a28 <__aeabi_d2iz>
 8006b76:	1c74      	adds	r4, r6, #1
 8006b78:	ab0c      	add	r3, sp, #48	; 0x30
 8006b7a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006b7e:	f10b 0b18 	add.w	fp, fp, #24
 8006b82:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8006b86:	e731      	b.n	80069ec <__kernel_rem_pio2+0x298>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	f7f9 ff4c 	bl	8000a28 <__aeabi_d2iz>
 8006b90:	ab0c      	add	r3, sp, #48	; 0x30
 8006b92:	4634      	mov	r4, r6
 8006b94:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8006b98:	e728      	b.n	80069ec <__kernel_rem_pio2+0x298>
 8006b9a:	ab0c      	add	r3, sp, #48	; 0x30
 8006b9c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006ba0:	f7f9 fc28 	bl	80003f4 <__aeabi_i2d>
 8006ba4:	4632      	mov	r2, r6
 8006ba6:	463b      	mov	r3, r7
 8006ba8:	f7f9 fc8e 	bl	80004c8 <__aeabi_dmul>
 8006bac:	4642      	mov	r2, r8
 8006bae:	e86b 0102 	strd	r0, r1, [fp], #-8
 8006bb2:	464b      	mov	r3, r9
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 fc86 	bl	80004c8 <__aeabi_dmul>
 8006bbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	e722      	b.n	8006a0c <__kernel_rem_pio2+0x2b8>
 8006bc6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8006bca:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006bce:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8006bd2:	f8cd c01c 	str.w	ip, [sp, #28]
 8006bd6:	f7f9 fc77 	bl	80004c8 <__aeabi_dmul>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4650      	mov	r0, sl
 8006be0:	4659      	mov	r1, fp
 8006be2:	f7f9 fabb 	bl	800015c <__adddf3>
 8006be6:	4682      	mov	sl, r0
 8006be8:	468b      	mov	fp, r1
 8006bea:	f108 0801 	add.w	r8, r8, #1
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	4598      	cmp	r8, r3
 8006bf2:	dc01      	bgt.n	8006bf8 <__kernel_rem_pio2+0x4a4>
 8006bf4:	45b8      	cmp	r8, r7
 8006bf6:	dde6      	ble.n	8006bc6 <__kernel_rem_pio2+0x472>
 8006bf8:	ab48      	add	r3, sp, #288	; 0x120
 8006bfa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006bfe:	e9c7 ab00 	strd	sl, fp, [r7]
 8006c02:	3e01      	subs	r6, #1
 8006c04:	e707      	b.n	8006a16 <__kernel_rem_pio2+0x2c2>
 8006c06:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	dc09      	bgt.n	8006c20 <__kernel_rem_pio2+0x4cc>
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dc32      	bgt.n	8006c76 <__kernel_rem_pio2+0x522>
 8006c10:	d05a      	beq.n	8006cc8 <__kernel_rem_pio2+0x574>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	f003 0007 	and.w	r0, r3, #7
 8006c18:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d1f5      	bne.n	8006c12 <__kernel_rem_pio2+0x4be>
 8006c26:	ab48      	add	r3, sp, #288	; 0x120
 8006c28:	441d      	add	r5, r3
 8006c2a:	46aa      	mov	sl, r5
 8006c2c:	46a3      	mov	fp, r4
 8006c2e:	f1bb 0f00 	cmp.w	fp, #0
 8006c32:	dc76      	bgt.n	8006d22 <__kernel_rem_pio2+0x5ce>
 8006c34:	46aa      	mov	sl, r5
 8006c36:	46a3      	mov	fp, r4
 8006c38:	f1bb 0f01 	cmp.w	fp, #1
 8006c3c:	f300 8090 	bgt.w	8006d60 <__kernel_rem_pio2+0x60c>
 8006c40:	2700      	movs	r7, #0
 8006c42:	463e      	mov	r6, r7
 8006c44:	2c01      	cmp	r4, #1
 8006c46:	f300 80aa 	bgt.w	8006d9e <__kernel_rem_pio2+0x64a>
 8006c4a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006c4e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8006c52:	9b00      	ldr	r3, [sp, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f040 80ac 	bne.w	8006db2 <__kernel_rem_pio2+0x65e>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	462a      	mov	r2, r5
 8006c5e:	9806      	ldr	r0, [sp, #24]
 8006c60:	e9c0 2300 	strd	r2, r3, [r0]
 8006c64:	4622      	mov	r2, r4
 8006c66:	460b      	mov	r3, r1
 8006c68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006c6c:	463a      	mov	r2, r7
 8006c6e:	4633      	mov	r3, r6
 8006c70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006c74:	e7cd      	b.n	8006c12 <__kernel_rem_pio2+0x4be>
 8006c76:	2000      	movs	r0, #0
 8006c78:	46a0      	mov	r8, r4
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	ab48      	add	r3, sp, #288	; 0x120
 8006c7e:	441d      	add	r5, r3
 8006c80:	f1b8 0f00 	cmp.w	r8, #0
 8006c84:	da3a      	bge.n	8006cfc <__kernel_rem_pio2+0x5a8>
 8006c86:	9b00      	ldr	r3, [sp, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d03e      	beq.n	8006d0a <__kernel_rem_pio2+0x5b6>
 8006c8c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8006c90:	4602      	mov	r2, r0
 8006c92:	462b      	mov	r3, r5
 8006c94:	9d06      	ldr	r5, [sp, #24]
 8006c96:	2601      	movs	r6, #1
 8006c98:	e9c5 2300 	strd	r2, r3, [r5]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006ca2:	f7f9 fa59 	bl	8000158 <__aeabi_dsub>
 8006ca6:	4684      	mov	ip, r0
 8006ca8:	460f      	mov	r7, r1
 8006caa:	ad48      	add	r5, sp, #288	; 0x120
 8006cac:	42b4      	cmp	r4, r6
 8006cae:	f105 0508 	add.w	r5, r5, #8
 8006cb2:	da2c      	bge.n	8006d0e <__kernel_rem_pio2+0x5ba>
 8006cb4:	9b00      	ldr	r3, [sp, #0]
 8006cb6:	b10b      	cbz	r3, 8006cbc <__kernel_rem_pio2+0x568>
 8006cb8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006cbc:	4662      	mov	r2, ip
 8006cbe:	463b      	mov	r3, r7
 8006cc0:	9906      	ldr	r1, [sp, #24]
 8006cc2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006cc6:	e7a4      	b.n	8006c12 <__kernel_rem_pio2+0x4be>
 8006cc8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8006cca:	ab48      	add	r3, sp, #288	; 0x120
 8006ccc:	4637      	mov	r7, r6
 8006cce:	441d      	add	r5, r3
 8006cd0:	2c00      	cmp	r4, #0
 8006cd2:	da09      	bge.n	8006ce8 <__kernel_rem_pio2+0x594>
 8006cd4:	9b00      	ldr	r3, [sp, #0]
 8006cd6:	b10b      	cbz	r3, 8006cdc <__kernel_rem_pio2+0x588>
 8006cd8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006cdc:	4632      	mov	r2, r6
 8006cde:	463b      	mov	r3, r7
 8006ce0:	9906      	ldr	r1, [sp, #24]
 8006ce2:	e9c1 2300 	strd	r2, r3, [r1]
 8006ce6:	e794      	b.n	8006c12 <__kernel_rem_pio2+0x4be>
 8006ce8:	4630      	mov	r0, r6
 8006cea:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 fa34 	bl	800015c <__adddf3>
 8006cf4:	3c01      	subs	r4, #1
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	e7e9      	b.n	8006cd0 <__kernel_rem_pio2+0x57c>
 8006cfc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006d00:	f7f9 fa2c 	bl	800015c <__adddf3>
 8006d04:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d08:	e7ba      	b.n	8006c80 <__kernel_rem_pio2+0x52c>
 8006d0a:	460d      	mov	r5, r1
 8006d0c:	e7c0      	b.n	8006c90 <__kernel_rem_pio2+0x53c>
 8006d0e:	4660      	mov	r0, ip
 8006d10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d14:	4639      	mov	r1, r7
 8006d16:	f7f9 fa21 	bl	800015c <__adddf3>
 8006d1a:	3601      	adds	r6, #1
 8006d1c:	4684      	mov	ip, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	e7c4      	b.n	8006cac <__kernel_rem_pio2+0x558>
 8006d22:	e9da 6700 	ldrd	r6, r7, [sl]
 8006d26:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006d2a:	4632      	mov	r2, r6
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	4640      	mov	r0, r8
 8006d30:	4649      	mov	r1, r9
 8006d32:	f7f9 fa13 	bl	800015c <__adddf3>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d3e:	4640      	mov	r0, r8
 8006d40:	4649      	mov	r1, r9
 8006d42:	f7f9 fa09 	bl	8000158 <__aeabi_dsub>
 8006d46:	4632      	mov	r2, r6
 8006d48:	463b      	mov	r3, r7
 8006d4a:	f7f9 fa07 	bl	800015c <__adddf3>
 8006d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d52:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006d56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d5a:	e9ca 2300 	strd	r2, r3, [sl]
 8006d5e:	e766      	b.n	8006c2e <__kernel_rem_pio2+0x4da>
 8006d60:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d64:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8006d68:	4642      	mov	r2, r8
 8006d6a:	464b      	mov	r3, r9
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7f9 f9f4 	bl	800015c <__adddf3>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	4639      	mov	r1, r7
 8006d80:	f7f9 f9ea 	bl	8000158 <__aeabi_dsub>
 8006d84:	4642      	mov	r2, r8
 8006d86:	464b      	mov	r3, r9
 8006d88:	f7f9 f9e8 	bl	800015c <__adddf3>
 8006d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d90:	e86a 0102 	strd	r0, r1, [sl], #-8
 8006d94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d98:	e9ca 2300 	strd	r2, r3, [sl]
 8006d9c:	e74c      	b.n	8006c38 <__kernel_rem_pio2+0x4e4>
 8006d9e:	4638      	mov	r0, r7
 8006da0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8006da4:	4631      	mov	r1, r6
 8006da6:	f7f9 f9d9 	bl	800015c <__adddf3>
 8006daa:	3c01      	subs	r4, #1
 8006dac:	4607      	mov	r7, r0
 8006dae:	460e      	mov	r6, r1
 8006db0:	e748      	b.n	8006c44 <__kernel_rem_pio2+0x4f0>
 8006db2:	9b06      	ldr	r3, [sp, #24]
 8006db4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006db8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006dbc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006dc0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8006dc4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8006dc8:	601d      	str	r5, [r3, #0]
 8006dca:	615e      	str	r6, [r3, #20]
 8006dcc:	e721      	b.n	8006c12 <__kernel_rem_pio2+0x4be>
 8006dce:	bf00      	nop
 8006dd0:	41700000 	.word	0x41700000
 8006dd4:	3e700000 	.word	0x3e700000

08006dd8 <__kernel_sin>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	e9cd 2300 	strd	r2, r3, [sp]
 8006de2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006de6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006dea:	4682      	mov	sl, r0
 8006dec:	460c      	mov	r4, r1
 8006dee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006df0:	da03      	bge.n	8006dfa <__kernel_sin+0x22>
 8006df2:	f7f9 fe19 	bl	8000a28 <__aeabi_d2iz>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	d050      	beq.n	8006e9c <__kernel_sin+0xc4>
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	4623      	mov	r3, r4
 8006dfe:	4650      	mov	r0, sl
 8006e00:	4621      	mov	r1, r4
 8006e02:	f7f9 fb61 	bl	80004c8 <__aeabi_dmul>
 8006e06:	4606      	mov	r6, r0
 8006e08:	460f      	mov	r7, r1
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4650      	mov	r0, sl
 8006e10:	4621      	mov	r1, r4
 8006e12:	f7f9 fb59 	bl	80004c8 <__aeabi_dmul>
 8006e16:	a33e      	add	r3, pc, #248	; (adr r3, 8006f10 <__kernel_sin+0x138>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	4689      	mov	r9, r1
 8006e20:	4630      	mov	r0, r6
 8006e22:	4639      	mov	r1, r7
 8006e24:	f7f9 fb50 	bl	80004c8 <__aeabi_dmul>
 8006e28:	a33b      	add	r3, pc, #236	; (adr r3, 8006f18 <__kernel_sin+0x140>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 f993 	bl	8000158 <__aeabi_dsub>
 8006e32:	4632      	mov	r2, r6
 8006e34:	463b      	mov	r3, r7
 8006e36:	f7f9 fb47 	bl	80004c8 <__aeabi_dmul>
 8006e3a:	a339      	add	r3, pc, #228	; (adr r3, 8006f20 <__kernel_sin+0x148>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 f98c 	bl	800015c <__adddf3>
 8006e44:	4632      	mov	r2, r6
 8006e46:	463b      	mov	r3, r7
 8006e48:	f7f9 fb3e 	bl	80004c8 <__aeabi_dmul>
 8006e4c:	a336      	add	r3, pc, #216	; (adr r3, 8006f28 <__kernel_sin+0x150>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 f981 	bl	8000158 <__aeabi_dsub>
 8006e56:	4632      	mov	r2, r6
 8006e58:	463b      	mov	r3, r7
 8006e5a:	f7f9 fb35 	bl	80004c8 <__aeabi_dmul>
 8006e5e:	a334      	add	r3, pc, #208	; (adr r3, 8006f30 <__kernel_sin+0x158>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f7f9 f97a 	bl	800015c <__adddf3>
 8006e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e6c:	b9dd      	cbnz	r5, 8006ea6 <__kernel_sin+0xce>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	460b      	mov	r3, r1
 8006e72:	4630      	mov	r0, r6
 8006e74:	4639      	mov	r1, r7
 8006e76:	f7f9 fb27 	bl	80004c8 <__aeabi_dmul>
 8006e7a:	a32f      	add	r3, pc, #188	; (adr r3, 8006f38 <__kernel_sin+0x160>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f7f9 f96a 	bl	8000158 <__aeabi_dsub>
 8006e84:	4642      	mov	r2, r8
 8006e86:	464b      	mov	r3, r9
 8006e88:	f7f9 fb1e 	bl	80004c8 <__aeabi_dmul>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4650      	mov	r0, sl
 8006e92:	4621      	mov	r1, r4
 8006e94:	f7f9 f962 	bl	800015c <__adddf3>
 8006e98:	4682      	mov	sl, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	b006      	add	sp, #24
 8006ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eac:	4b24      	ldr	r3, [pc, #144]	; (8006f40 <__kernel_sin+0x168>)
 8006eae:	f7f9 fb0b 	bl	80004c8 <__aeabi_dmul>
 8006eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 fb03 	bl	80004c8 <__aeabi_dmul>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eca:	f7f9 f945 	bl	8000158 <__aeabi_dsub>
 8006ece:	4632      	mov	r2, r6
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	f7f9 faf9 	bl	80004c8 <__aeabi_dmul>
 8006ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006eda:	f7f9 f93d 	bl	8000158 <__aeabi_dsub>
 8006ede:	a316      	add	r3, pc, #88	; (adr r3, 8006f38 <__kernel_sin+0x160>)
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	460f      	mov	r7, r1
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4649      	mov	r1, r9
 8006eec:	f7f9 faec 	bl	80004c8 <__aeabi_dmul>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	f7f9 f930 	bl	800015c <__adddf3>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4650      	mov	r0, sl
 8006f02:	4621      	mov	r1, r4
 8006f04:	f7f9 f928 	bl	8000158 <__aeabi_dsub>
 8006f08:	e7c6      	b.n	8006e98 <__kernel_sin+0xc0>
 8006f0a:	bf00      	nop
 8006f0c:	f3af 8000 	nop.w
 8006f10:	5acfd57c 	.word	0x5acfd57c
 8006f14:	3de5d93a 	.word	0x3de5d93a
 8006f18:	8a2b9ceb 	.word	0x8a2b9ceb
 8006f1c:	3e5ae5e6 	.word	0x3e5ae5e6
 8006f20:	57b1fe7d 	.word	0x57b1fe7d
 8006f24:	3ec71de3 	.word	0x3ec71de3
 8006f28:	19c161d5 	.word	0x19c161d5
 8006f2c:	3f2a01a0 	.word	0x3f2a01a0
 8006f30:	1110f8a6 	.word	0x1110f8a6
 8006f34:	3f811111 	.word	0x3f811111
 8006f38:	55555549 	.word	0x55555549
 8006f3c:	3fc55555 	.word	0x3fc55555
 8006f40:	3fe00000 	.word	0x3fe00000

08006f44 <fabs>:
 8006f44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006f48:	4770      	bx	lr
 8006f4a:	0000      	movs	r0, r0
 8006f4c:	0000      	movs	r0, r0
	...

08006f50 <floor>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8006f58:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8006f5c:	2e13      	cmp	r6, #19
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4607      	mov	r7, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	4605      	mov	r5, r0
 8006f68:	dc33      	bgt.n	8006fd2 <floor+0x82>
 8006f6a:	2e00      	cmp	r6, #0
 8006f6c:	da14      	bge.n	8006f98 <floor+0x48>
 8006f6e:	a334      	add	r3, pc, #208	; (adr r3, 8007040 <floor+0xf0>)
 8006f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f74:	f7f9 f8f2 	bl	800015c <__adddf3>
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f7f9 fd34 	bl	80009e8 <__aeabi_dcmpgt>
 8006f80:	b138      	cbz	r0, 8006f92 <floor+0x42>
 8006f82:	2c00      	cmp	r4, #0
 8006f84:	da58      	bge.n	8007038 <floor+0xe8>
 8006f86:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006f8a:	431d      	orrs	r5, r3
 8006f8c:	d001      	beq.n	8006f92 <floor+0x42>
 8006f8e:	2500      	movs	r5, #0
 8006f90:	4c2d      	ldr	r4, [pc, #180]	; (8007048 <floor+0xf8>)
 8006f92:	4623      	mov	r3, r4
 8006f94:	462f      	mov	r7, r5
 8006f96:	e025      	b.n	8006fe4 <floor+0x94>
 8006f98:	4a2c      	ldr	r2, [pc, #176]	; (800704c <floor+0xfc>)
 8006f9a:	fa42 f806 	asr.w	r8, r2, r6
 8006f9e:	ea01 0208 	and.w	r2, r1, r8
 8006fa2:	4302      	orrs	r2, r0
 8006fa4:	d01e      	beq.n	8006fe4 <floor+0x94>
 8006fa6:	a326      	add	r3, pc, #152	; (adr r3, 8007040 <floor+0xf0>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 f8d6 	bl	800015c <__adddf3>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f7f9 fd18 	bl	80009e8 <__aeabi_dcmpgt>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d0ea      	beq.n	8006f92 <floor+0x42>
 8006fbc:	2c00      	cmp	r4, #0
 8006fbe:	bfbe      	ittt	lt
 8006fc0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006fc4:	fa43 f606 	asrlt.w	r6, r3, r6
 8006fc8:	19a4      	addlt	r4, r4, r6
 8006fca:	2500      	movs	r5, #0
 8006fcc:	ea24 0408 	bic.w	r4, r4, r8
 8006fd0:	e7df      	b.n	8006f92 <floor+0x42>
 8006fd2:	2e33      	cmp	r6, #51	; 0x33
 8006fd4:	dd0a      	ble.n	8006fec <floor+0x9c>
 8006fd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006fda:	d103      	bne.n	8006fe4 <floor+0x94>
 8006fdc:	f7f9 f8be 	bl	800015c <__adddf3>
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8006ff4:	fa22 f808 	lsr.w	r8, r2, r8
 8006ff8:	ea18 0f00 	tst.w	r8, r0
 8006ffc:	d0f2      	beq.n	8006fe4 <floor+0x94>
 8006ffe:	a310      	add	r3, pc, #64	; (adr r3, 8007040 <floor+0xf0>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f7f9 f8aa 	bl	800015c <__adddf3>
 8007008:	2200      	movs	r2, #0
 800700a:	2300      	movs	r3, #0
 800700c:	f7f9 fcec 	bl	80009e8 <__aeabi_dcmpgt>
 8007010:	2800      	cmp	r0, #0
 8007012:	d0be      	beq.n	8006f92 <floor+0x42>
 8007014:	2c00      	cmp	r4, #0
 8007016:	da02      	bge.n	800701e <floor+0xce>
 8007018:	2e14      	cmp	r6, #20
 800701a:	d103      	bne.n	8007024 <floor+0xd4>
 800701c:	3401      	adds	r4, #1
 800701e:	ea25 0508 	bic.w	r5, r5, r8
 8007022:	e7b6      	b.n	8006f92 <floor+0x42>
 8007024:	2301      	movs	r3, #1
 8007026:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800702a:	fa03 f606 	lsl.w	r6, r3, r6
 800702e:	4435      	add	r5, r6
 8007030:	42bd      	cmp	r5, r7
 8007032:	bf38      	it	cc
 8007034:	18e4      	addcc	r4, r4, r3
 8007036:	e7f2      	b.n	800701e <floor+0xce>
 8007038:	2500      	movs	r5, #0
 800703a:	462c      	mov	r4, r5
 800703c:	e7a9      	b.n	8006f92 <floor+0x42>
 800703e:	bf00      	nop
 8007040:	8800759c 	.word	0x8800759c
 8007044:	7e37e43c 	.word	0x7e37e43c
 8007048:	bff00000 	.word	0xbff00000
 800704c:	000fffff 	.word	0x000fffff

08007050 <nan>:
 8007050:	2000      	movs	r0, #0
 8007052:	4901      	ldr	r1, [pc, #4]	; (8007058 <nan+0x8>)
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	7ff80000 	.word	0x7ff80000
 800705c:	00000000 	.word	0x00000000

08007060 <scalbn>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007066:	4604      	mov	r4, r0
 8007068:	460d      	mov	r5, r1
 800706a:	4617      	mov	r7, r2
 800706c:	460b      	mov	r3, r1
 800706e:	b996      	cbnz	r6, 8007096 <scalbn+0x36>
 8007070:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007074:	4303      	orrs	r3, r0
 8007076:	d039      	beq.n	80070ec <scalbn+0x8c>
 8007078:	4b33      	ldr	r3, [pc, #204]	; (8007148 <scalbn+0xe8>)
 800707a:	2200      	movs	r2, #0
 800707c:	f7f9 fa24 	bl	80004c8 <__aeabi_dmul>
 8007080:	4b32      	ldr	r3, [pc, #200]	; (800714c <scalbn+0xec>)
 8007082:	4604      	mov	r4, r0
 8007084:	429f      	cmp	r7, r3
 8007086:	460d      	mov	r5, r1
 8007088:	da0f      	bge.n	80070aa <scalbn+0x4a>
 800708a:	a32b      	add	r3, pc, #172	; (adr r3, 8007138 <scalbn+0xd8>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f7f9 fa1a 	bl	80004c8 <__aeabi_dmul>
 8007094:	e006      	b.n	80070a4 <scalbn+0x44>
 8007096:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800709a:	4296      	cmp	r6, r2
 800709c:	d10a      	bne.n	80070b4 <scalbn+0x54>
 800709e:	4602      	mov	r2, r0
 80070a0:	f7f9 f85c 	bl	800015c <__adddf3>
 80070a4:	4604      	mov	r4, r0
 80070a6:	460d      	mov	r5, r1
 80070a8:	e020      	b.n	80070ec <scalbn+0x8c>
 80070aa:	460b      	mov	r3, r1
 80070ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80070b0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80070b4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80070b8:	19b9      	adds	r1, r7, r6
 80070ba:	4291      	cmp	r1, r2
 80070bc:	dd0e      	ble.n	80070dc <scalbn+0x7c>
 80070be:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80070c2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80070c6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80070ca:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80070ce:	4820      	ldr	r0, [pc, #128]	; (8007150 <scalbn+0xf0>)
 80070d0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80070d4:	a31a      	add	r3, pc, #104	; (adr r3, 8007140 <scalbn+0xe0>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	e7d9      	b.n	8007090 <scalbn+0x30>
 80070dc:	2900      	cmp	r1, #0
 80070de:	dd08      	ble.n	80070f2 <scalbn+0x92>
 80070e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80070f6:	da12      	bge.n	800711e <scalbn+0xbe>
 80070f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80070fc:	429f      	cmp	r7, r3
 80070fe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007102:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8007106:	dcdc      	bgt.n	80070c2 <scalbn+0x62>
 8007108:	a30b      	add	r3, pc, #44	; (adr r3, 8007138 <scalbn+0xd8>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007112:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007116:	480f      	ldr	r0, [pc, #60]	; (8007154 <scalbn+0xf4>)
 8007118:	f041 011f 	orr.w	r1, r1, #31
 800711c:	e7b8      	b.n	8007090 <scalbn+0x30>
 800711e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007122:	3136      	adds	r1, #54	; 0x36
 8007124:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007128:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	2200      	movs	r2, #0
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <scalbn+0xf8>)
 8007134:	e7ac      	b.n	8007090 <scalbn+0x30>
 8007136:	bf00      	nop
 8007138:	c2f8f359 	.word	0xc2f8f359
 800713c:	01a56e1f 	.word	0x01a56e1f
 8007140:	8800759c 	.word	0x8800759c
 8007144:	7e37e43c 	.word	0x7e37e43c
 8007148:	43500000 	.word	0x43500000
 800714c:	ffff3cb0 	.word	0xffff3cb0
 8007150:	8800759c 	.word	0x8800759c
 8007154:	c2f8f359 	.word	0xc2f8f359
 8007158:	3c900000 	.word	0x3c900000

0800715c <_init>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	bf00      	nop
 8007160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007162:	bc08      	pop	{r3}
 8007164:	469e      	mov	lr, r3
 8007166:	4770      	bx	lr

08007168 <_fini>:
 8007168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716a:	bf00      	nop
 800716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800716e:	bc08      	pop	{r3}
 8007170:	469e      	mov	lr, r3
 8007172:	4770      	bx	lr
